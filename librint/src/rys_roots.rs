#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
#![feature(extern_types)]
use num_traits::ToPrimitive;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn exit(_: libc::c_int) -> !;
    fn exp(_: libc::c_double) -> libc::c_double;
    fn pow(_: libc::c_double, _: libc::c_double) -> libc::c_double;
    fn sqrtl(_: f128::f128) -> f128::f128;
    fn sqrt(_: libc::c_double) -> libc::c_double;
    fn CINTlrys_laguerre(
        n: libc::c_int,
        x: libc::c_double,
        lower: libc::c_double,
        roots: *mut libc::c_double,
        weights: *mut libc::c_double,
    ) -> libc::c_int;
    fn CINTrys_jacobi(
        n: libc::c_int,
        x: libc::c_double,
        lower: libc::c_double,
        roots: *mut libc::c_double,
        weights: *mut libc::c_double,
    ) -> libc::c_int;
    fn CINTlrys_jacobi(
        n: libc::c_int,
        x: libc::c_double,
        lower: libc::c_double,
        roots: *mut libc::c_double,
        weights: *mut libc::c_double,
    ) -> libc::c_int;
    fn gamma_inc_like(f: *mut libc::c_double, t: libc::c_double, m: libc::c_int);
    fn lgamma_inc_like(f: *mut f128::f128, t: f128::f128, m: libc::c_int);
    fn fmt_erfc_like(
        f: *mut libc::c_double,
        t: libc::c_double,
        lower: libc::c_double,
        m: libc::c_int,
    );
    fn fmt_lerfc_like(
        f: *mut f128::f128,
        t: f128::f128,
        lower: f128::f128,
        m: libc::c_int,
    );
    fn _CINT_polynomial_roots(
        roots: *mut libc::c_double,
        cs: *mut libc::c_double,
        nroots: libc::c_int,
    ) -> libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type QuadratureFunction = unsafe extern "C" fn(
    libc::c_int,
    libc::c_double,
    libc::c_double,
    *mut libc::c_double,
    *mut libc::c_double,
) -> libc::c_int;
static mut POLY_SMALLX_R0: [libc::c_double; 496] = [
    5.0000000000000000e-01f64,
    1.3069360623708470e-01f64,
    2.8693063937629151e+00f64,
    6.0376924683279896e-02f64,
    7.7682335593104601e-01f64,
    6.6627997193856743e+00f64,
    3.4819897306147152e-02f64,
    3.8156718508004406e-01f64,
    1.7373072694588976e+00f64,
    1.1846305648154912e+01f64,
    2.2665926631698637e-02f64,
    2.3127169214090557e-01f64,
    8.5734602411883609e-01f64,
    2.9735303812034606e+00f64,
    1.8415185975905100e+01f64,
    1.5933294950708051e-02f64,
    1.5647046776795465e-01f64,
    5.2658326320347937e-01f64,
    1.4554949383527416e+00f64,
    4.4772915489042244e+00f64,
    2.6368226486820891e+01f64,
    1.1813808454790223e-02f64,
    1.1337832545962978e-01f64,
    3.6143546199827142e-01f64,
    8.9527303800610059e-01f64,
    2.1671830744997034e+00f64,
    6.2459217468839974e+00f64,
    3.5704994544697506e+01f64,
    9.1096129361797583e-03f64,
    8.6130778786234360e-02f64,
    2.6546936423055723e-01f64,
    6.1752374342048377e-01f64,
    1.3290252120652055e+00f64,
    2.9891077977621077e+00f64,
    8.2783291650163164e+00f64,
    4.6425304325782918e+01f64,
    7.2388268576176690e-03f64,
    6.7744856280706228e-02f64,
    2.0415049332589749e-01f64,
    4.5633199434791133e-01f64,
    9.1729173690437338e-01f64,
    1.8243932992566771e+00f64,
    3.9197868892557834e+00f64,
    1.0573996723107014e+01f64,
    5.8529065180664020e+01f64,
    5.8908068184661301e-03f64,
    5.4725924879562259e-02f64,
    1.6232609261161096e-01f64,
    3.5315267858751925e-01f64,
    6.7944242243948438e-01f64,
    1.2573939988964797e+00f64,
    2.3797176188890110e+00f64,
    4.9584689501831161e+00f64,
    1.3132652926121416e+01f64,
    7.2016228580573340e+01f64,
    4.8873361261651269e-03f64,
    4.5157008761019399e-02f64,
    1.3240037096506918e-01f64,
    2.8253618374640332e-01f64,
    5.2746670115882444e-01f64,
    9.3166748944873068e-01f64,
    1.6361250128213276e+00f64,
    2.9941113975093119e+00f64,
    6.1047380665207358e+00f64,
    1.5954143802284950e+01f64,
    8.6886766630657462e+01f64,
    4.1201918467690364e-03f64,
    3.7911181291998906e-02f64,
    1.1018828563899001e-01f64,
    2.3179530831466225e-01f64,
    4.2345630230694603e-01f64,
    7.2421338523125789e-01f64,
    1.2113317522159244e+00f64,
    2.0525334008082456e+00f64,
    3.6670630733185123e+00f64,
    7.3583481234816475e+00f64,
    1.9038376627614220e+01f64,
    1.0314066236793083e+02f64,
    3.5205547919345487e-03f64,
    3.2289011702114359e-02f64,
    9.3214971024566495e-02f64,
    1.9395959218782607e-01f64,
    3.4863942062035819e-01f64,
    5.8246762196717317e-01f64,
    9.4178878042410219e-01f64,
    1.5174658097736393e+00f64,
    2.5060512608340129e+00f64,
    4.3982595654500427e+00f64,
    8.7191456120517863e+00f64,
    2.2385292804867444e+01f64,
    1.2077790499430500e+02f64,
    3.0429596866636517e-03f64,
    2.7836958317494689e-02f64,
    7.9934050123079720e-02f64,
    1.6491083995350633e-01f64,
    2.9275174955113165e-01f64,
    4.8056334796006994e-01f64,
    7.5805833071173867e-01f64,
    1.1792349429563096e+00f64,
    1.8494738526884431e+00f64,
    2.9963211569901405e+00f64,
    5.1875000243561145e+00f64,
    1.0187030609882370e+01f64,
    2.5994853806516272e+01f64,
    1.3979848737030667e+02f64,
    2.6563882798588422e-03f64,
    2.4250094342677907e-02f64,
    6.9335687672495691e-02f64,
    1.4207481953281492e-01f64,
    2.4974878660205013e-01f64,
    4.0442628385592422e-01f64,
    6.2615572291363975e-01f64,
    9.4929992942214436e-01f64,
    1.4359478786754303e+00f64,
    2.2069717422671000e+00f64,
    3.5231083207720131e+00f64,
    6.0346505430483566e+00f64,
    1.1761935734646896e+01f64,
    2.9867033445944998e+01f64,
    1.6020240462202361e+02f64,
    2.3390891340939958e-03f64,
    2.1317080945253201e-02f64,
    6.0736095944339923e-02f64,
    1.2376819871441241e-01f64,
    2.1586001541338806e-01f64,
    3.4579995866737606e-01f64,
    5.2767337072352205e-01f64,
    7.8452789304120707e-01f64,
    1.1555935675460669e+00f64,
    1.7115298466871347e+00f64,
    2.5897019911803474e+00f64,
    4.0862530420883099e+00f64,
    6.9396189328516167e+00f64,
    1.3443814172272431e+01f64,
    3.4001813414873574e+01f64,
    1.8198965332991693e+02f64,
    2.0754424341283091e-03f64,
    1.8887592459816600e-02f64,
    5.3658014548213083e-02f64,
    1.0884885454501933e-01f64,
    1.8862266668962116e-01f64,
    2.9954903459405208e-01f64,
    4.5185308380311651e-01f64,
    6.6164964801649240e-01f64,
    9.5509492609113844e-01f64,
    1.3765373767867681e+00f64,
    2.0057094213304625e+00f64,
    2.9974863464885759e+00f64,
    4.6856434232417712e+00f64,
    7.9023399751558259e+00f64,
    1.5232632558400770e+01f64,
    3.8399180598022653e+01f64,
    2.0516023103739158e+02f64,
    1.8539963414043730e-03f64,
    1.6852276947378890e-02f64,
    4.7759641118871647e-02f64,
    9.6517662877457097e-02f64,
    1.6636649640437165e-01f64,
    2.6232651719296074e-01f64,
    3.9202397022416274e-01f64,
    5.6711232331318462e-01f64,
    8.0578967544389657e-01f64,
    1.1374575501399538e+00f64,
    1.6118526781020055e+00f64,
    2.3182957744259616e+00f64,
    3.4301980006685246e+00f64,
    5.3211990723247959e+00f64,
    8.9227664393420767e+00f64,
    1.7128366583322400e+01f64,
    4.3059125399051126e+01f64,
    2.2971413594275947e+02f64,
    1.6661998936375252e-03f64,
    1.5130014686433138e-02f64,
    4.2790695960997299e-02f64,
    8.6200730889532062e-02f64,
    1.4792271329238424e-01f64,
    2.3186595750538547e-01f64,
    3.4384897279841592e-01f64,
    4.9253668994919914e-01f64,
    6.9103506867637832e-01f64,
    9.5970145594169631e-01f64,
    1.3313348322389476e+00f64,
    1.8613408062545294e+00f64,
    2.6491513055224365e+00f64,
    3.8877446160652291e+00f64,
    5.9928609675506301e+00f64,
    1.0000863418852175e+01f64,
    1.9130998189134935e+01f64,
    4.7981640664446111e+01f64,
    2.5565136670034096e+02f64,
    1.5055636736750460e-03f64,
    1.3659581309068787e-02f64,
    3.8564342567293824e-02f64,
    7.7476594928727063e-02f64,
    1.3245147741657512e-01f64,
    2.0658296700885234e-01f64,
    3.0439699080823512e-01f64,
    4.3248851020324230e-01f64,
    6.0056920785975065e-01f64,
    8.2323977038557739e-01f64,
    1.1231054875957920e+00f64,
    1.5365239604700129e+00f64,
    2.1248567569558028e+00f64,
    2.9981746126480338e+00f64,
    4.3700575829188786e+00f64,
    6.7005849497038312e+00f64,
    1.1136604650698095e+01f64,
    2.1240513731235975e+01f64,
    5.3166720972969635e+01f64,
    2.8297192228864293e+02f64,
    1.3670907867368810e-03f64,
    1.2394054047073586e-02f64,
    3.4938717738704779e-02f64,
    7.0029665723141538e-02f64,
    1.1933546517548120e-01f64,
    1.8533975034810135e-01f64,
    2.7162214849373179e-01f64,
    3.8330281537433031e-01f64,
    5.2775249147995862e-01f64,
    7.1575249251405548e-01f64,
    9.6345103210237271e-01f64,
    1.2957976481725484e+00f64,
    1.7528752562478540e+00f64,
    2.4022925139112141e+00f64,
    3.3652895418982895e+00f64,
    4.8770850124786653e+00f64,
    7.4443374249155490e+00f64,
    1.2329970060272636e+01f64,
    2.3456902742141821e+01f64,
    5.8614362155227504e+01f64,
    3.1167580192095022e+02f64,
    1.2468830266566071e-03f64,
    1.1296974077260939e-02f64,
    3.1804472951472436e-02f64,
    6.3619574436888329e-02f64,
    1.0811189954427899e-01f64,
    1.6730017611467515e-01f64,
    2.4405695487560791e-01f64,
    3.4242592106441611e-01f64,
    4.6811614228539372e-01f64,
    6.2928567081422648e-01f64,
    8.3781715700385528e-01f64,
    1.1114655761383376e+00f64,
    1.4776257531369692e+00f64,
    1.9802761199884003e+00f64,
    2.6935661694090105e+00f64,
    3.7504379423093370e+00f64,
    5.4087870441105492e+00f64,
    8.2240924562866571e+00f64,
    1.3580944085234208e+01f64,
    2.5780157081866051e+01f64,
    6.4324560961905945e+01f64,
    3.4176300498341982e+02f64,
    1.1418631828867911e-03f64,
    1.0339660911653800e-02f64,
    2.9076181798097987e-02f64,
    5.8060466666749251e-02f64,
    9.8427835316294177e-02f64,
    1.5183741234468401e-01f64,
    2.2062391084280356e-01f64,
    3.0802869139363409e-01f64,
    4.1855186217289764e-01f64,
    5.5849619707813158e-01f64,
    7.3682598952358325e-01f64,
    9.6656238513293491e-01f64,
    1.2671304167611064e+00f64,
    1.6684742780654425e+00f64,
    2.2186404130584330e+00f64,
    2.9986146322141836e+00f64,
    4.1535747513207992e+00f64,
    5.9651326283714123e+00f64,
    9.0398297521904443e+00f64,
    1.4889514507506986e+01f64,
    2.8210270342431137e+01f64,
    7.0297314830298916e+01f64,
    3.7323353099141679e+02f64,
    1.0495759261988334e-03f64,
    9.4992992354385325e-03f64,
    2.6686295586583197e-02f64,
    5.3206697955337431e-02f64,
    9.0009970388381530e-02f64,
    1.3847326383472791e-01f64,
    2.0051570393946336e-01f64,
    2.7876963531845217e-01f64,
    3.7683660713108602e-01f64,
    4.9967393580009961e-01f64,
    6.5418912561449616e-01f64,
    8.5017628790014732e-01f64,
    1.1018357175881530e+00f64,
    1.4303284449010452e+00f64,
    1.8682541268706729e+00f64,
    2.4679012551940342e+00f64,
    3.3173886234481418e+00f64,
    4.5746645870722178e+00f64,
    6.5460972759896343e+00f64,
    9.8915332475732622e+00f64,
    1.6255671624263933e+01f64,
    3.0747237423089796e+01f64,
    7.6532621717181570e+01f64,
    4.0608737955819714e+02f64,
    9.6804284738431225e-04f64,
    8.7575539343254932e-03f64,
    2.4580815547761405e-02f64,
    4.8942752455150472e-02f64,
    8.2643793737600238e-02f64,
    1.2683727043286128e-01f64,
    1.8311667069998602e-01f64,
    2.5364456253704887e-01f64,
    3.4134207545566181e-01f64,
    4.5016937343104196e-01f64,
    5.8554703532077257e-01f64,
    7.5500228999917485e-01f64,
    9.6918565647872623e-01f64,
    1.2435195346086747e+00f64,
    1.6009686601323014e+00f64,
    2.0768956135707137e+00f64,
    2.7280060286023411e+00f64,
    3.6498491702681330e+00f64,
    5.0136793389300003e+00f64,
    7.1516614535243814e+00f64,
    1.0779190085915269e+01f64,
    1.7679407649692763e+01f64,
    3.3391054222461705e+01f64,
    8.3030479977314329e+01f64,
    4.4032455037210190e+02f64,
    8.9565544579415254e-04f64,
    8.0995527542570573e-03f64,
    2.2716144347385257e-02f64,
    4.5176009998213855e-02f64,
    7.6158887961076630e-02f64,
    1.1663848431984211e-01f64,
    1.6794992820605648e-01f64,
    2.3188820866452553e-01f64,
    3.1085069091583328e-01f64,
    4.0804436959930529e-01f64,
    5.2779092420711327e-01f64,
    6.7598365319794951e-01f64,
    8.6078710994700591e-01f64,
    1.0937368186145631e+00f64,
    1.3915217951874832e+00f64,
    1.7789794003868797e+00f64,
    2.2943435454843417e+00f64,
    2.9989128434113854e+00f64,
    3.9959651029812480e+00f64,
    5.4705964337941646e+00f64,
    7.7818094208903092e+00f64,
    1.1702789877157626e+01f64,
    1.9160716276781699e+01f64,
    3.6141717412159579e+01f64,
    8.9790888273867822e+01f64,
    4.7594504317971854e+02f64,
    8.3109512231001499e-04f64,
    7.5131289999639658e-03f64,
    2.1056762228657960e-02f64,
    4.1831472800230959e-02f64,
    7.0418380847064116e-02f64,
    1.0764559262935150e-01f64,
    1.5464094439970513e-01f64,
    2.1290812273042228e-01f64,
    2.8443540318795413e-01f64,
    3.7185131035702607e-01f64,
    4.7864959901382476e-01f64,
    6.0951929142249150e-01f64,
    7.7083812244638827e-01f64,
    9.7142732494617945e-01f64,
    1.2237373962444573e+00f64,
    1.5457695551603108e+00f64,
    1.9643035543347287e+00f64,
    2.5205537131838662e+00f64,
    3.2805879923783383e+00f64,
    4.3557112384146945e+00f64,
    5.9453975688643608e+00f64,
    8.4365283763879209e+00f64,
    1.2662324149042576e+01f64,
    2.0699592351914731e+01f64,
    3.8999224268126255e+01f64,
    9.6813845511527404e+01f64,
    5.1294885777328875e+02f64,
    7.7327265934614168e-04f64,
    6.9882508946790788e-03f64,
    1.9573489101087662e-02f64,
    3.8847864637965371e-02f64,
    6.5311250720158837e-02f64,
    9.9672659091338711e-02f64,
    1.4289191032726364e-01f64,
    1.9623917849107639e-01f64,
    2.6137903585278394e-01f64,
    3.4048907901994535e-01f64,
    4.3642861876513317e-01f64,
    5.5298158998816316e-01f64,
    6.9521214980263679e-01f64,
    8.6999572387224722e-01f64,
    1.0868307890446043e+00f64,
    1.3591137397500017e+00f64,
    1.7062043430069920e+00f64,
    2.1568951145849722e+00f64,
    2.7554903420777213e+00f64,
    3.5730040885853245e+00f64,
    4.7290670414068323e+00f64,
    6.4380677720692976e+00f64,
    9.1158078193148011e+00f64,
    1.3657785936164659e+01f64,
    2.2296031630204965e+01f64,
    4.1963572543442723e+01f64,
    1.0409935078594111e+02f64,
    5.5133599398118213e+02f64,
    7.2128194564740754e-04f64,
    6.5165867490334173e-03f64,
    1.8242169108187746e-02f64,
    3.6174706944078615e-02f64,
    6.0746630485518080e-02f64,
    9.2568726696294054e-02f64,
    1.3246337474487627e-01f64,
    1.8151161540602556e-01f64,
    2.4111887374480270e-01f64,
    3.1310655640913304e-01f64,
    3.9984041967064188e-01f64,
    5.0441237267625860e-01f64,
    6.3090166347065468e-01f64,
    7.8475672612934000e-01f64,
    9.7336500077332955e-01f64,
    1.2069236234854512e+00f64,
    1.4998064894190901e+00f64,
    1.8727788041083879e+00f64,
    2.3567166558988348e+00f64,
    2.9991242138096359e+00f64,
    3.8761386831078006e+00f64,
    5.1160156250390809e+00f64,
    6.9485946963461123e+00f64,
    9.8196390688702735e+00f64,
    1.4689169468495249e+01f64,
    2.3950030589416851e+01f64,
    4.5034760371338379e+01f64,
    1.1164740334510041e+02f64,
    5.9110645166061056e+02f64,
    6.7436423858690424e-04f64,
    6.0911701752723131e-03f64,
    1.7042663914726686e-02f64,
    3.3770100579734327e-02f64,
    5.6649534609952659e-02f64,
    8.6210122382939763e-02f64,
    1.2316086250453281e-01f64,
    1.6842816229032329e-01f64,
    2.2320778254362922e-01f64,
    2.8903640974860378e-01f64,
    3.6789065056317111e-01f64,
    4.6232515675023911e-01f64,
    5.7566774544675881e-01f64,
    7.1229929883268572e-01f64,
    8.7806261702092869e-01f64,
    1.0808722364210885e+00f64,
    1.3316459770568605e+00f64,
    1.6457673300845621e+00f64,
    2.0454542277297771e+00f64,
    2.5637374631125205e+00f64,
    3.2514312621986456e+00f64,
    4.1899732254466091e+00f64,
    5.5165429945418198e+00f64,
    7.4769680832474528e+00f64,
    1.0548014896887539e+01f64,
    1.5756469932714268e+01f64,
    2.5661586286947824e+01f64,
    4.8212786190469124e+01f64,
    1.1945800255953849e+02f64,
    6.3226023069200130e+02f64,
    6.3188030795311258e-04f64,
    5.7061398509158142e-03f64,
    1.5958074377719466e-02f64,
    3.1599024262999015e-02f64,
    5.2957614335718592e-02f64,
    8.0494684232131519e-02f64,
    1.1482497679045181e-01f64,
    1.5674738549368780e-01f64,
    2.0728641098615663e-01f64,
    2.6774869366161896e-01f64,
    3.3980028211803459e-01f64,
    4.2557300057118946e-01f64,
    5.2781244442213382e-01f64,
    6.5008669605942015e-01f64,
    7.9708543296514911e-01f64,
    9.7505658701549880e-01f64,
    1.1924574198151743e+00f64,
    1.4609489039066195e+00f64,
    1.7969565829860152e+00f64,
    2.2241986989346771e+00f64,
    2.7779321228812770e+00f64,
    3.5123915105929826e+00f64,
    4.5144922723425349e+00f64,
    5.9306374689397341e+00f64,
    8.0231793507898264e+00f64,
    1.1300929244520692e+01f64,
    1.6859683287482135e+01f64,
    2.7430696248828827e+01f64,
    5.1497648686801327e+01f64,
    1.2753114789911722e+02f64,
    6.7479733097461019e+02f64,
];
static mut POLY_SMALLX_R1: [libc::c_double; 496] = [
    -2.0000000000000001e-01f64,
    -2.9043023608241049e-02f64,
    -6.3762364305842567e-01f64,
    -9.2887576435815231e-03f64,
    -1.1951128552785324e-01f64,
    -1.0250461106747191e+00f64,
    -4.0964585066055473e-03f64,
    -4.4890257068240479e-02f64,
    -2.0438909052457618e-01f64,
    -1.3936830174299895e+00f64,
    -2.1586596792093939e-03f64,
    -2.2025875441991007e-02f64,
    -8.1652002297032011e-02f64,
    -2.8319336963842484e-01f64,
    -1.7538272358004856e+00f64,
    -1.2746635960566440e-03f64,
    -1.2517637421436372e-02f64,
    -4.2126661056278353e-02f64,
    -1.1643959506821934e-01f64,
    -3.5818332391233798e-01f64,
    -2.1094581189456711e+00f64,
    -8.1474541067518772e-04f64,
    -7.8191948592848132e-03f64,
    -2.4926583586087684e-02f64,
    -6.1742968138351763e-02f64,
    -1.4946090168963472e-01f64,
    -4.3075322392303428e-01f64,
    -2.4624134168756902e+00f64,
    -5.5209775370786412e-04f64,
    -5.2200471991657189e-03f64,
    -1.6089052377609530e-02f64,
    -3.7425681419423255e-02f64,
    -8.0546982549406398e-02f64,
    -1.8115804834921864e-01f64,
    -5.0171691909189797e-01f64,
    -2.8136548076232071e+00f64,
    -3.9128793824960370e-04f64,
    -3.6618841232814174e-03f64,
    -1.1035161801399865e-02f64,
    -2.4666594289076287e-02f64,
    -4.9583337129966133e-02f64,
    -9.8615854013874446e-02f64,
    -2.1188037239220453e-01f64,
    -5.7156739043821692e-01f64,
    -3.1637332530088660e+00f64,
    -2.8735643016907951e-04f64,
    -2.6695573111981587e-03f64,
    -7.9183459810541930e-03f64,
    -1.7226959931098500e-02f64,
    -3.3143532801926071e-02f64,
    -6.1336292629096574e-02f64,
    -1.1608378628726883e-01f64,
    -2.4187653415527396e-01f64,
    -6.4061721590836185e-01f64,
    -3.5129867600279674e+00f64,
    -2.1721493894067231e-04f64,
    -2.0069781671564176e-03f64,
    -5.8844609317808515e-03f64,
    -1.2557163722062370e-02f64,
    -2.3442964495947752e-02f64,
    -4.1407443975499142e-02f64,
    -7.2716667236503454e-02f64,
    -1.3307161766708053e-01f64,
    -2.7132169184536603e-01f64,
    -7.0907305787933106e-01f64,
    -3.8616340724736649e+00f64,
    -1.6817109578649129e-04f64,
    -1.5473951547754655e-03f64,
    -4.4974810464893881e-03f64,
    -9.4610329924351942e-03f64,
    -1.7283930706405961e-02f64,
    -2.9559730009439098e-02f64,
    -4.9442112335343846e-02f64,
    -8.3776873502377364e-02f64,
    -1.4967604380891888e-01f64,
    -3.0034073973394482e-01f64,
    -7.7707659704547827e-01f64,
    -4.2098229537930951e+00f64,
    -1.3285112422394522e-04f64,
    -1.2184532717779003e-03f64,
    -3.5175460763987357e-03f64,
    -7.3192298938802294e-03f64,
    -1.3156204551711631e-02f64,
    -2.1979910262912194e-02f64,
    -3.5539199261286875e-02f64,
    -5.7262860746175065e-02f64,
    -9.4567972106943884e-02f64,
    -1.6597205907358650e-01f64,
    -3.2902436271893531e-01f64,
    -8.4472803037235644e-01f64,
    -4.5576567922379247e+00f64,
    -1.0677051532153163e-04f64,
    -9.7673537956121715e-04f64,
    -2.8047035130905162e-03f64,
    -5.7863452615265383e-03f64,
    -1.0271991212320409e-02f64,
    -1.6861871858248067e-02f64,
    -2.6598537919710129e-02f64,
    -4.1376664665133671e-02f64,
    -6.4893819392576949e-02f64,
    -1.0513407568386457e-01f64,
    -1.8201754471424963e-01f64,
    -3.5743967052218845e-01f64,
    -9.1210013356197439e-01f64,
    -4.9052100831686554e+00f64,
    -8.7094697700289907e-05f64,
    -7.9508506041566917e-04f64,
    -2.2733012351637931e-03f64,
    -4.6581908043545877e-03f64,
    -8.1884848066245946e-03f64,
    -1.3259878159210630e-02f64,
    -2.0529695833234090e-02f64,
    -3.1124587849906373e-02f64,
    -4.7080258317227223e-02f64,
    -7.2359729254659014e-02f64,
    -1.1551174822203321e-01f64,
    -1.9785739485404447e-01f64,
    -3.8563723720153753e-01f64,
    -9.7924699822770489e-01f64,
    -5.2525378564597904e+00f64,
    -7.1971973356738328e-05f64,
    -6.5591018293086772e-04f64,
    -1.8688029521335360e-03f64,
    -3.8082522681357664e-03f64,
    -6.6418466281042482e-03f64,
    -1.0639998728226956e-02f64,
    -1.6236103714569908e-02f64,
    -2.4139319785883295e-02f64,
    -3.5556725155263598e-02f64,
    -5.2662456821142609e-02f64,
    -7.9683138190164524e-02f64,
    -1.2573086283348647e-01f64,
    -2.1352673639543437e-01f64,
    -4.1365582068530554e-01f64,
    -1.0462096435345716e+00f64,
    -5.5996816409205206e+00f64,
    -6.0157751713864028e-05f64,
    -5.4746644811062611e-04f64,
    -1.5553047695134228e-03f64,
    -3.1550392621744732e-03f64,
    -5.4673236721629326e-03f64,
    -8.6825807128710752e-03f64,
    -1.3097190834872943e-02f64,
    -1.9178250667144705e-02f64,
    -2.7683910901192418e-02f64,
    -3.9899634109761398e-02f64,
    -5.8136504966100365e-02f64,
    -8.6883662217060162e-02f64,
    -1.3581575139831223e-01f64,
    -2.2905333261321234e-01f64,
    -4.4152558140292086e-01f64,
    -1.1130197274789173e+00f64,
    -5.9466733634026543e+00f64,
    -5.0794420312448578e-05f64,
    -4.6170621773640794e-04f64,
    -1.3084833183252507e-03f64,
    -2.6443195308892354e-03f64,
    -4.5579862028594974e-03f64,
    -7.1870278683002940e-03f64,
    -1.0740382745867472e-02f64,
    -1.5537323926388621e-02f64,
    -2.2076429464216344e-02f64,
    -3.1163220551779554e-02f64,
    -4.4160347345260427e-02f64,
    -6.3514952723998944e-02f64,
    -9.3978027415576024e-02f64,
    -1.4578627595410401e-01f64,
    -2.4445935450252265e-01f64,
    -4.6927031735129865e-01f64,
    -1.1797020657274282e+00f64,
    -6.2935379710345059e+00f64,
    -4.3277919315260391e-05f64,
    -3.9298739445280882e-04f64,
    -1.1114466483375923e-03f64,
    -2.2389800231047289e-03f64,
    -3.8421483972047852e-03f64,
    -6.0224924027372853e-03f64,
    -8.9311421506082060e-03f64,
    -1.2793160777901276e-02f64,
    -1.7948962822763075e-02f64,
    -2.4927310543940165e-02f64,
    -3.4580125512699934e-02f64,
    -4.8346514448169599e-02f64,
    -6.8809124818764583e-02f64,
    -1.0098037963805791e-01f64,
    -1.5565872642988648e-01f64,
    -2.5976268620395260e-01f64,
    -4.9690904387363471e-01f64,
    -1.2462763808947042e+00f64,
    -6.6402952389698946e+00f64,
    -3.7174411695680151e-05f64,
    -3.3727361256959967e-04f64,
    -9.5220598931589691e-04f64,
    -1.9130023439191868e-03f64,
    -3.2704068497919785e-03f64,
    -5.1008140002185764e-03f64,
    -7.5159750816848189e-03f64,
    -1.0678728646993636e-02f64,
    -1.4828869329870386e-02f64,
    -2.0326907910754997e-02f64,
    -2.7730999693723259e-02f64,
    -3.7938863221481801e-02f64,
    -5.2465598937180315e-02f64,
    -7.4029002781432929e-02f64,
    -1.0790265636836738e-01f64,
    -1.6544654196799582e-01f64,
    -2.7497789260982952e-01f64,
    -5.2445712916632037e-01f64,
    -1.3127585425424602e+00f64,
    -6.9869610441640235e+00f64,
    -3.2166842040867788e-05f64,
    -2.9162480110761377e-04f64,
    -8.2208747620481830e-04f64,
    -1.6477568405445066e-03f64,
    -2.8078932982466163e-03f64,
    -4.3609353023082676e-03f64,
    -6.3911093763231001e-03f64,
    -9.0188897735136529e-03f64,
    -1.2417705681881379e-02f64,
    -1.6841235117977776e-02f64,
    -2.2669436049467591e-02f64,
    -3.0489356427589372e-02f64,
    -4.1244123676420094e-02f64,
    -5.6524529739087392e-02f64,
    -7.9183283338783286e-02f64,
    -1.1475494147008623e-01f64,
    -1.7516088058624821e-01f64,
    -2.9011694259465026e-01f64,
    -5.5192712334451344e-01f64,
    -1.3791614624759412e+00f64,
    -7.3335482804929466e+00f64,
    -2.8019843295654089e-05f64,
    -2.5386458600586381e-04f64,
    -7.1470725733645919e-04f64,
    -1.4296533581323221e-03f64,
    -2.4294808886354828e-03f64,
    -3.7595545194309024e-03f64,
    -5.4844259522608520e-03f64,
    -7.6949645183014854e-03f64,
    -1.0519463871581881e-02f64,
    -1.4141251029533179e-02f64,
    -1.8827351842783266e-02f64,
    -2.4976754519962643e-02f64,
    -3.3205073104201552e-02f64,
    -4.4500586966031465e-02f64,
    -6.0529576840651925e-02f64,
    -8.4279504321558132e-02f64,
    -1.2154577627214719e-01f64,
    -1.8481106643340806e-01f64,
    -3.0518975472436422e-01f64,
    -5.7932937262620343e-01f64,
    -1.4454957519529426e+00f64,
    -7.6800675277172985e+00f64,
    -2.4556197481436369e-05f64,
    -2.2235829917535054e-04f64,
    -6.2529423221716106e-04f64,
    -1.2486121863817042e-03f64,
    -2.1167276412106277e-03f64,
    -3.2653206955846024e-03f64,
    -4.7446002331785709e-03f64,
    -6.6242729331964312e-03f64,
    -9.0011153155461852e-03f64,
    -1.2010670904906056e-02f64,
    -1.5845720204808240e-02f64,
    -2.0786287852321179e-02f64,
    -2.7250116489486158e-02f64,
    -3.5881167270224570e-02f64,
    -4.7712697055020063e-02f64,
    -6.4486336176649103e-02f64,
    -8.9324188200447296e-02f64,
    -1.2828242211551424e-01f64,
    -1.9440494090732141e-01f64,
    -3.2020461306466635e-01f64,
    -6.0667248048238998e-01f64,
    -1.5117702114042777e+00f64,
    -8.0265275482025125e+00f64,
    -2.1640740746367700e-05f64,
    -1.9586183990594915e-04f64,
    -5.5023289869243698e-04f64,
    -1.0970453186667512e-03f64,
    -1.8558756781109594e-03f64,
    -2.8551188419531528e-03f64,
    -4.1343444111229559e-03f64,
    -5.7478275323392201e-03f64,
    -7.7698269511564128e-03f64,
    -1.0302555377321641e-02f64,
    -1.3488435579680333e-02f64,
    -1.7529407997941181e-02f64,
    -2.2718262218312437e-02f64,
    -2.9491308142289591e-02f64,
    -3.8520703646817998e-02f64,
    -5.0884561962763600e-02f64,
    -6.8399765431920445e-02f64,
    -9.4322981176746756e-02f64,
    -1.3497107785545637e-01f64,
    -2.0394913912522192e-01f64,
    -3.3516848709822544e-01f64,
    -6.3396365820803702e-01f64,
    -1.5779922003542592e+00f64,
    -8.3729356609937557e+00f64,
    -1.9169165294738857e-05f64,
    -1.7341690959060381e-04f64,
    -4.8674882272794860e-04f64,
    -9.6916341495347468e-04f64,
    -1.6365107670811929e-03f64,
    -2.5116291174824014e-03f64,
    -3.6260726871284363e-03f64,
    -5.0226646046940366e-03f64,
    -6.7592490189239962e-03f64,
    -8.9142450184364740e-03f64,
    -1.1594990798431138e-02f64,
    -1.4950540396023263e-02f64,
    -1.9191795177796560e-02f64,
    -2.4624149200171776e-02f64,
    -3.1702349705590126e-02f64,
    -4.1126645813281459e-02f64,
    -5.4019921358462203e-02f64,
    -7.2274240995408578e-02f64,
    -9.9280778988712889e-02f64,
    -1.4161705848563130e-01f64,
    -2.1344930863198552e-01f64,
    -3.5008728019193586e-01f64,
    -6.6120899450419213e-01f64,
    -1.6441679203428579e+00f64,
    -8.7192980271703355e+00f64,
    -1.7060103729412429e-05f64,
    -1.5427719531918205e-04f64,
    -4.3268846375971913e-04f64,
    -8.6049542853740670e-04f64,
    -1.4506454849728882e-03f64,
    -2.2216854156160404e-03f64,
    -3.1990462515439329e-03f64,
    -4.4169182602766767e-03f64,
    -5.9209655412539672e-03f64,
    -7.7722737066534342e-03f64,
    -1.0053160461087871e-02f64,
    -1.2875879108532372e-02f64,
    -1.6395944951371543e-02f64,
    -2.0833082259325012e-02f64,
    -2.6505177051190154e-02f64,
    -3.3885321912131047e-02f64,
    -4.3701781818749362e-02f64,
    -5.7122149398312110e-02f64,
    -7.6113621009166618e-02f64,
    -1.0420183683417455e-01f64,
    -1.4822494135029160e-01f64,
    -2.2291028337443097e-01f64,
    -3.6496602431965136e-01f64,
    -6.8841366499351586e-01f64,
    -1.7103026337879585e+00f64,
    -9.0656198700898774e+00f64,
    -1.5249451785504861e-05f64,
    -1.3785557798099020e-04f64,
    -3.8636260970014607e-04f64,
    -7.6754995963726534e-04f64,
    -1.2920803825149380e-03f64,
    -1.9751484886119542e-03f64,
    -2.8374485210955072e-03f64,
    -3.9065710592738039e-03f64,
    -5.2189982236321856e-03f64,
    -6.8229598230646988e-03f64,
    -8.7825614497949490e-03f64,
    -1.1183840209587001e-02f64,
    -1.4143818760484188e-02f64,
    -1.7824354586168430e-02f64,
    -2.2453897178797380e-02f64,
    -2.8362744131381849e-02f64,
    -3.6042267052013369e-02f64,
    -4.6248691985025070e-02f64,
    -6.0194275089510793e-02f64,
    -7.9921307126875132e-02f64,
    -1.0908986364888736e-01f64,
    -1.5479868580528294e-01f64,
    -2.3233622291821240e-01f64,
    -3.7980903398008681e-01f64,
    -7.1558209666286710e-01f64,
    -1.7764008350738973e+00f64,
    -9.4119056472163081e+00f64,
    -1.3686241758338792e-05f64,
    -1.2368585654299255e-04f64,
    -3.4643343541748077e-04f64,
    -6.8757282545071452e-04f64,
    -1.1559513401798024e-03f64,
    -1.7641178600236939e-03f64,
    -2.5290603597745778e-03f64,
    -3.4732597963022371e-03f64,
    -4.6261776257129905e-03f64,
    -6.0263553808839881e-03f64,
    -7.7244003321262512e-03f64,
    -9.7872847785515603e-03f64,
    -1.2304639819515696e-02f64,
    -1.5398154404818535e-02f64,
    -1.9235943168931048e-02f64,
    -2.4055110438053130e-02f64,
    -3.0198306955875963e-02f64,
    -3.8175134771415438e-02f64,
    -4.8769740567747279e-02f64,
    -6.3239010417439373e-02f64,
    -8.3700301617820050e-02f64,
    -1.1394810216051854e-01f64,
    -1.6134173131530621e-01f64,
    -2.4173072453388778e-01f64,
    -3.9462002885318520e-01f64,
    -7.4271809811403044e-01f64,
    -1.8424663855918781e+00f64,
    -9.7581591855076493e+00f64,
    -1.2329605908502692e-05f64,
    -1.1139464528262253e-04f64,
    -3.1183195056731187e-04f64,
    -6.1837105887313872e-04f64,
    -1.0384039399233859e-03f64,
    -1.5823713965178472e-03f64,
    -2.2643311922201071e-03f64,
    -3.1027626565132576e-03f64,
    -4.1216901494838072e-03f64,
    -5.3522488275065472e-03f64,
    -6.8348789687289208e-03f64,
    -8.6224337209616850e-03f64,
    -1.0784643820011191e-02f64,
    -1.3414644891099829e-02f64,
    -1.6638717961937256e-02f64,
    -2.0631173051033354e-02f64,
    -2.5637717767847696e-02f64,
    -3.2013312890741670e-02f64,
    -4.0285754801689486e-02f64,
    -5.1267080577942499e-02f64,
    -6.6258780907825651e-02f64,
    -8.7453258547676604e-02f64,
    -1.1877939651873697e-01f64,
    -1.6785707810034656e-01f64,
    -2.5109691399137180e-01f64,
    -4.0940223229772399e-01f64,
    -7.6982496361262176e-01f64,
    -1.9085026212837679e+00f64,
    -1.0104383789070267e+01f64,
    -1.1146516340279409e-05f64,
    -1.0068049876483163e-04f64,
    -2.8169692421035848e-04f64,
    -5.5818348065676566e-04f64,
    -9.3635594396615962e-04f64,
    -1.4249607005444589e-03f64,
    -2.0357167356121128e-03f64,
    -2.7839365667822031e-03f64,
    -3.6893848354318877e-03f64,
    -4.7774613181587400e-03f64,
    -6.0808371993912582e-03f64,
    -7.6417381281031257e-03f64,
    -9.5151693462274187e-03f64,
    -1.1773542129465880e-02f64,
    -1.4513431686296341e-02f64,
    -1.7865656800348573e-02f64,
    -2.2010677306724968e-02f64,
    -2.7202765786521688e-02f64,
    -3.3809160788921939e-02f64,
    -4.2375825836570589e-02f64,
    -5.3742665490886701e-02f64,
    -6.9255755792505938e-02f64,
    -9.1182528835401983e-02f64,
    -1.2358624930987525e-01f64,
    -1.7434735366756263e-01f64,
    -2.6043751954899613e-01f64,
    -4.2415845102393096e-01f64,
    -7.9690555686725828e-01f64,
    -1.9745124390006361e+00f64,
    -1.0450582325487625e+01f64,
    -1.0110084927249801e-05f64,
    -9.1298237614653030e-05f64,
    -2.5532919004351141e-04f64,
    -5.0558438820798421e-04f64,
    -8.4732182937149742e-04f64,
    -1.2879149477141043e-03f64,
    -1.8371996286472290e-03f64,
    -2.5079581678990048e-03f64,
    -3.3165825757785062e-03f64,
    -4.2839790985859027e-03f64,
    -5.4368045138885540e-03f64,
    -6.8091680091390315e-03f64,
    -8.4449991107541419e-03f64,
    -1.0401387136950723e-02f64,
    -1.2753366927442385e-02f64,
    -1.5600905392247981e-02f64,
    -1.9079318717042791e-02f64,
    -2.3375182462505910e-02f64,
    -2.8751305327776241e-02f64,
    -3.5587179182954835e-02f64,
    -4.4446913966100433e-02f64,
    -5.6198264169487720e-02f64,
    -7.2231876357480559e-02f64,
    -9.4890199503035746e-02f64,
    -1.2837086961263722e-01f64,
    -1.8081486791233109e-01f64,
    -2.6975493259971417e-01f64,
    -4.3889113998126128e-01f64,
    -8.2396237898882119e-01f64,
    -2.0404983663858753e+00f64,
    -1.0796757295593762e+01f64,
];
static mut POLY_SMALLX_W0: [libc::c_double; 496] = [
    1.0000000000000000e+00f64,
    6.5214515486254609e-01f64,
    3.4785484513745385e-01f64,
    4.6791393457269104e-01f64,
    3.6076157304813861e-01f64,
    1.7132449237917036e-01f64,
    3.6268378337836199e-01f64,
    3.1370664587788727e-01f64,
    2.2238103445337448e-01f64,
    1.0122853629037626e-01f64,
    2.9552422471475287e-01f64,
    2.6926671930999635e-01f64,
    2.1908636251598204e-01f64,
    1.4945134915058059e-01f64,
    6.6671344308688138e-02f64,
    2.4914704581340277e-01f64,
    2.3349253653835481e-01f64,
    2.0316742672306592e-01f64,
    1.6007832854334622e-01f64,
    1.0693932599531843e-01f64,
    4.7175336386511828e-02f64,
    2.1526385346315779e-01f64,
    2.0519846372129560e-01f64,
    1.8553839747793782e-01f64,
    1.5720316715819355e-01f64,
    1.2151857068790319e-01f64,
    8.0158087159760208e-02f64,
    3.5119460331751860e-02f64,
    1.8945061045506850e-01f64,
    1.8260341504492358e-01f64,
    1.6915651939500254e-01f64,
    1.4959598881657674e-01f64,
    1.2462897125553388e-01f64,
    9.5158511682492786e-02f64,
    6.2253523938647894e-02f64,
    2.7152459411754096e-02f64,
    1.6914238296314360e-01f64,
    1.6427648374583273e-01f64,
    1.5468467512626524e-01f64,
    1.4064291467065065e-01f64,
    1.2255520671147846e-01f64,
    1.0094204410628717e-01f64,
    7.6425730254889052e-02f64,
    4.9714548894969797e-02f64,
    2.1616013526483312e-02f64,
    1.5275338713072584e-01f64,
    1.4917298647260374e-01f64,
    1.4209610931838204e-01f64,
    1.3168863844917664e-01f64,
    1.1819453196151841e-01f64,
    1.0193011981724044e-01f64,
    8.3276741576704755e-02f64,
    6.2672048334109068e-02f64,
    4.0601429800386939e-02f64,
    1.7614007139152118e-02f64,
    1.3925187285563198e-01f64,
    1.3654149834601517e-01f64,
    1.3117350478706238e-01f64,
    1.2325237681051242e-01f64,
    1.1293229608053922e-01f64,
    1.0041414444288096e-01f64,
    8.5941606217067729e-02f64,
    6.9796468424520489e-02f64,
    5.2293335152683286e-02f64,
    3.3774901584814152e-02f64,
    1.4627995298272200e-02f64,
    1.2793819534675216e-01f64,
    1.2583745634682830e-01f64,
    1.2167047292780339e-01f64,
    1.1550566805372560e-01f64,
    1.0744427011596563e-01f64,
    9.7618652104113884e-02f64,
    8.6190161531953274e-02f64,
    7.3346481411080300e-02f64,
    5.9298584915436783e-02f64,
    4.4277438817419808e-02f64,
    2.8531388628933663e-02f64,
    1.2341229799987200e-02f64,
    1.1832141527926228e-01f64,
    1.1666044348529658e-01f64,
    1.1336181654631966e-01f64,
    1.0847184052857659e-01f64,
    1.0205916109442542e-01f64,
    9.4213800355914146e-02f64,
    8.5045894313485235e-02f64,
    7.4684149765659749e-02f64,
    6.3274046329574840e-02f64,
    5.0975825297147809e-02f64,
    3.7962383294362766e-02f64,
    2.4417851092631910e-02f64,
    1.0551372617343006e-02f64,
    1.1004701301647520e-01f64,
    1.0871119225829413e-01f64,
    1.0605576592284642e-01f64,
    1.0211296757806076e-01f64,
    9.6930657997929923e-02f64,
    9.0571744393032838e-02f64,
    8.3113417228901212e-02f64,
    7.4646214234568783e-02f64,
    6.5272923966999602e-02f64,
    5.5107345675716748e-02f64,
    4.4272934759004227e-02f64,
    3.2901427782304378e-02f64,
    2.1132112592771261e-02f64,
    9.1242825930945171e-03f64,
    1.0285265289355884e-01f64,
    1.0176238974840550e-01f64,
    9.9593420586795267e-02f64,
    9.6368737174644253e-02f64,
    9.2122522237786122e-02f64,
    8.6899787201082976e-02f64,
    8.0755895229420213e-02f64,
    7.3755974737705204e-02f64,
    6.5974229882180491e-02f64,
    5.7493156217619065e-02f64,
    4.8402672830594053e-02f64,
    3.8799192569627050e-02f64,
    2.8784707883323369e-02f64,
    1.8466468311090958e-02f64,
    7.9681924961666050e-03f64,
    9.6540088514727798e-02f64,
    9.5638720079274861e-02f64,
    9.3844399080804566e-02f64,
    9.1173878695763891e-02f64,
    8.7652093004403811e-02f64,
    8.3311924226946749e-02f64,
    7.8193895787070311e-02f64,
    7.2345794108848505e-02f64,
    6.5822222776361849e-02f64,
    5.8684093478535544e-02f64,
    5.0998059262376175e-02f64,
    4.2835898022226683e-02f64,
    3.4273862913021431e-02f64,
    2.5392065309262059e-02f64,
    1.6274394730905670e-02f64,
    7.0186100094700964e-03f64,
    9.0956740330259869e-02f64,
    9.0203044370640736e-02f64,
    8.8701897835693863e-02f64,
    8.6465739747035752e-02f64,
    8.3513099699845661e-02f64,
    7.9868444339771846e-02f64,
    7.5561974660031936e-02f64,
    7.0629375814255727e-02f64,
    6.5111521554076415e-02f64,
    5.9054135827524494e-02f64,
    5.2507414572678109e-02f64,
    4.5525611523353271e-02f64,
    3.8166593796387517e-02f64,
    3.0491380638446131e-02f64,
    2.2563721985494969e-02f64,
    1.4450162748595036e-02f64,
    6.2291405559086847e-03f64,
    8.5983275670394751e-02f64,
    8.5346685739338624e-02f64,
    8.4078218979661931e-02f64,
    8.2187266704339706e-02f64,
    7.9687828912071601e-02f64,
    7.6598410645870668e-02f64,
    7.2941885005653059e-02f64,
    6.8745323835736449e-02f64,
    6.4039797355015485e-02f64,
    5.8860144245324819e-02f64,
    5.3244713977759921e-02f64,
    4.7235083490265978e-02f64,
    4.0875750923644892e-02f64,
    3.4213810770307232e-02f64,
    2.7298621498568779e-02f64,
    2.0181515297735472e-02f64,
    1.2915947284065574e-02f64,
    5.5657196642450455e-03f64,
    8.1525029280385783e-02f64,
    8.0982493770597103e-02f64,
    7.9901033243527819e-02f64,
    7.8287844658210953e-02f64,
    7.6153663548446396e-02f64,
    7.3512692584743453e-02f64,
    7.0382507066898956e-02f64,
    6.6783937979140409e-02f64,
    6.2740933392133061e-02f64,
    5.8280399146997203e-02f64,
    5.3432019910332321e-02f64,
    4.8228061860758682e-02f64,
    4.2703158504674432e-02f64,
    3.6894081594024741e-02f64,
    3.0839500545175053e-02f64,
    2.4579739738232374e-02f64,
    1.8156577709613236e-02f64,
    1.1613444716468675e-02f64,
    5.0028807496393457e-03f64,
    7.7505947978424805e-02f64,
    7.7039818164247972e-02f64,
    7.6110361900626242e-02f64,
    7.4723169057968261e-02f64,
    7.2886582395804062e-02f64,
    7.0611647391286780e-02f64,
    6.7912045815233898e-02f64,
    6.4804013456601042e-02f64,
    6.1306242492928938e-02f64,
    5.7439769099391552e-02f64,
    5.3227846983936823e-02f64,
    4.8695807635072232e-02f64,
    4.3870908185673269e-02f64,
    3.8782167974472016e-02f64,
    3.3460195282547844e-02f64,
    2.7937006980023400e-02f64,
    2.2245849194166958e-02f64,
    1.6421058381907890e-02f64,
    1.0498284531152813e-02f64,
    4.5212770985331909e-03f64,
    7.3864234232172879e-02f64,
    7.3460813453467527e-02f64,
    7.2656175243804105e-02f64,
    7.1454714265170985e-02f64,
    6.9862992492594159e-02f64,
    6.7889703376521948e-02f64,
    6.5545624364908975e-02f64,
    6.2843558045002579e-02f64,
    5.9798262227586656e-02f64,
    5.6426369358018383e-02f64,
    5.2746295699174071e-02f64,
    4.8778140792803244e-02f64,
    4.4543577771965881e-02f64,
    4.0065735180692265e-02f64,
    3.5369071097592110e-02f64,
    3.0479240699603467e-02f64,
    2.5422959526113047e-02f64,
    2.0227869569052644e-02f64,
    1.4922443697357493e-02f64,
    9.5362203017485027e-03f64,
    4.1059986046490847e-03f64,
    7.0549157789354069e-02f64,
    7.0197685473558216e-02f64,
    6.9496491861572585e-02f64,
    6.8449070269366655e-02f64,
    6.7060638906293657e-02f64,
    6.5338114879181439e-02f64,
    6.3290079733203858e-02f64,
    6.0926736701561970e-02f64,
    5.8259859877595493e-02f64,
    5.5302735563728056e-02f64,
    5.2070096091704460e-02f64,
    4.8578046448352036e-02f64,
    4.4843984081970031e-02f64,
    4.0886512310346221e-02f64,
    3.6725347813808873e-02f64,
    3.2381222812069822e-02f64,
    2.7875782821281010e-02f64,
    2.3231481902019211e-02f64,
    1.8471481736814750e-02f64,
    1.3619586755579985e-02f64,
    8.7004813675248434e-03f64,
    3.7454048031127776e-03f64,
    6.7518685849036461e-02f64,
    6.7210613600678176e-02f64,
    6.6595874768454882e-02f64,
    6.5677274267781208e-02f64,
    6.4459003467139064e-02f64,
    6.2946621064394512e-02f64,
    6.1147027724650478e-02f64,
    5.9068434595546317e-02f64,
    5.6720325843991233e-02f64,
    5.4113415385856754e-02f64,
    5.1259598007143019e-02f64,
    4.8171895101712200e-02f64,
    4.4864395277318128e-02f64,
    4.1352190109678728e-02f64,
    3.7651305357386068e-02f64,
    3.3778627999106900e-02f64,
    2.9751829552202756e-02f64,
    2.5589286397130012e-02f64,
    2.1309998754136500e-02f64,
    1.6933514007836239e-02f64,
    1.2479883770988685e-02f64,
    7.9698982297246226e-03f64,
    3.4303008681070483e-03f64,
    6.4737696812683918e-02f64,
    6.4466164435950088e-02f64,
    6.3924238584648185e-02f64,
    6.3114192286254020e-02f64,
    6.2039423159892665e-02f64,
    6.0704439165893881e-02f64,
    5.9114839698395635e-02f64,
    5.7277292100403214e-02f64,
    5.5199503699984165e-02f64,
    5.2890189485193667e-02f64,
    5.0359035553854473e-02f64,
    4.7616658492490478e-02f64,
    4.4674560856694280e-02f64,
    4.1545082943464748e-02f64,
    3.8241351065830709e-02f64,
    3.4777222564770442e-02f64,
    3.1167227832798090e-02f64,
    2.7426509708356948e-02f64,
    2.3570760839324380e-02f64,
    1.9616160457355529e-02f64,
    1.5579315722943849e-02f64,
    1.1477234579234540e-02f64,
    7.3275539012762625e-03f64,
    3.1533460523058385e-03f64,
    6.2176616655347260e-02f64,
    6.1936067420683243e-02f64,
    6.1455899590316665e-02f64,
    6.0737970841770218e-02f64,
    5.9785058704265460e-02f64,
    5.8600849813222444e-02f64,
    5.7189925647728380e-02f64,
    5.5557744806212520e-02f64,
    5.3710621888996245e-02f64,
    5.1655703069581137e-02f64,
    4.9400938449466317e-02f64,
    4.6955051303948434e-02f64,
    4.4327504338803274e-02f64,
    4.1528463090147696e-02f64,
    3.8568756612587678e-02f64,
    3.5459835615146151e-02f64,
    3.2213728223578014e-02f64,
    2.8842993580535197e-02f64,
    2.5360673570012392e-02f64,
    2.1780243170124794e-02f64,
    1.8115560713489392e-02f64,
    1.4380822761485574e-02f64,
    1.0590548383650969e-02f64,
    6.7597991957454012e-03f64,
    2.9086225531551411e-03f64,
    5.9810365745291860e-02f64,
    5.9596260171248160e-02f64,
    5.9168815466042968e-02f64,
    5.8529561771813871e-02f64,
    5.7680787452526826e-02f64,
    5.6625530902368597e-02f64,
    5.5367569669302653e-02f64,
    5.3911406932757262e-02f64,
    5.2262255383906990e-02f64,
    5.0426018566342379e-02f64,
    4.8409269744074897e-02f64,
    4.6219228372784790e-02f64,
    4.3863734259000406e-02f64,
    4.1351219500560268e-02f64,
    3.8690678310423977e-02f64,
    3.5891634835097233e-02f64,
    3.2964109089718800e-02f64,
    2.9918581147143946e-02f64,
    2.6765953746504013e-02f64,
    2.3517513553984463e-02f64,
    2.0184891507980793e-02f64,
    1.6780023396300737e-02f64,
    1.3315114982340961e-02f64,
    9.8026345794627514e-03f64,
    6.2555239629732773e-03f64,
    2.6913169500471113e-03f64,
    5.7617536707147025e-02f64,
    5.7426137054112113e-02f64,
    5.7043973558794599e-02f64,
    5.6472315730625965e-02f64,
    5.5713062560589985e-02f64,
    5.4768736213057986e-02f64,
    5.3642473647553611e-02f64,
    5.2338016198298747e-02f64,
    5.0859697146188147e-02f64,
    4.9212427324528886e-02f64,
    4.7401678806444990e-02f64,
    4.5433466728276715e-02f64,
    4.3314329309597013e-02f64,
    4.1051306136644976e-02f64,
    3.8651914782102517e-02f64,
    3.6124125840383554e-02f64,
    3.3476336464372647e-02f64,
    3.0717342497870677e-02f64,
    2.7856309310595871e-02f64,
    2.4902741467208774e-02f64,
    2.1866451422853084e-02f64,
    1.8757527621469379e-02f64,
    1.5586303035924131e-02f64,
    1.2363328128847644e-02f64,
    9.0993694555093971e-03f64,
    5.8056110152399851e-03f64,
    2.4974818357615860e-03f64,
    5.5579746306514397e-02f64,
    5.5407952503245123e-02f64,
    5.5064895901762424e-02f64,
    5.4551636870889424e-02f64,
    5.3869761865714488e-02f64,
    5.3021378524010766e-02f64,
    5.2009109151741402e-02f64,
    5.0836082617798484e-02f64,
    4.9505924683047577e-02f64,
    4.8022746793600260e-02f64,
    4.6391133373001894e-02f64,
    4.4616127652692281e-02f64,
    4.2703216084667088e-02f64,
    4.0658311384744517e-02f64,
    3.8487734259247661e-02f64,
    3.6198193872315189e-02f64,
    3.3796767115611762e-02f64,
    3.1290876747310445e-02f64,
    2.8688268473822741e-02f64,
    2.5996987058391954e-02f64,
    2.3225351562565315e-02f64,
    2.0381929882402571e-02f64,
    1.7475512911400946e-02f64,
    1.4515089278021472e-02f64,
    1.1509824340383383e-02f64,
    8.4690631633078869e-03f64,
    5.4025222460153382e-03f64,
    2.3238553757732156e-03f64,
    5.3681119863334847e-02f64,
    5.3526343304058255e-02f64,
    5.3217236446579011e-02f64,
    5.2754690526370836e-02f64,
    5.2140039183669822e-02f64,
    5.1375054618285725e-02f64,
    5.0461942479953129e-02f64,
    4.9403335508962393e-02f64,
    4.8202285945417749e-02f64,
    4.6862256729026344e-02f64,
    4.5387111514819806e-02f64,
    4.3781103533640252e-02f64,
    4.2048863329582124e-02f64,
    4.0195385409867800e-02f64,
    3.8226013845858435e-02f64,
    3.6146426867087272e-02f64,
    3.3962620493416008e-02f64,
    3.1680891253809330e-02f64,
    2.9307818044160491e-02f64,
    2.6850243181981870e-02f64,
    2.4315252724963952e-02f64,
    2.1710156140146236e-02f64,
    1.9042465461893407e-02f64,
    1.6319874234970964e-02f64,
    1.3550237112988812e-02f64,
    1.0741553532878773e-02f64,
    7.9019738499986752e-03f64,
    5.0399816126502428e-03f64,
    2.1677232496274501e-03f64,
    5.1907877631220636e-02f64,
    5.1767943174910187e-02f64,
    5.1488451500980935e-02f64,
    5.1070156069855627e-02f64,
    5.0514184532509374e-02f64,
    4.9822035690550180e-02f64,
    4.8995575455756835e-02f64,
    4.8037031819971182e-02f64,
    4.6948988848912201e-02f64,
    4.5734379716114486e-02f64,
    4.4396478795787113e-02f64,
    4.2938892835935639e-02f64,
    4.1365551235584753e-02f64,
    3.9680695452380801e-02f64,
    3.7888867569243444e-02f64,
    3.5994898051084502e-02f64,
    3.4003892724946423e-02f64,
    3.1921219019296329e-02f64,
    2.9752491500788944e-02f64,
    2.7503556749924791e-02f64,
    2.5180477621521247e-02f64,
    2.2789516943997820e-02f64,
    2.0337120729457286e-02f64,
    1.7829901014207720e-02f64,
    1.5274618596784799e-02f64,
    1.2678166476815959e-02f64,
    1.0047557182287984e-02f64,
    7.3899311633454558e-03f64,
    4.7127299269535683e-03f64,
    2.0268119688737585e-03f64,
    5.0248000375256278e-02f64,
    5.0121069569043289e-02f64,
    4.9867528594952394e-02f64,
    4.9488017919699291e-02f64,
    4.8983496220517835e-02f64,
    4.8355237963477675e-02f64,
    4.7604830184101235e-02f64,
    4.6734168478415522e-02f64,
    4.5745452214570180e-02f64,
    4.4641178977124413e-02f64,
    4.3424138258047418e-02f64,
    4.2097404410385099e-02f64,
    4.0664328882417444e-02f64,
    3.9128531751963083e-02f64,
    3.7493892582280031e-02f64,
    3.5764540622768140e-02f64,
    3.3944844379410546e-02f64,
    3.2039400581624682e-02f64,
    3.0053022573989872e-02f64,
    2.7990728163314639e-02f64,
    2.5857726954024697e-02f64,
    2.3659407208682794e-02f64,
    2.1401322277669967e-02f64,
    1.9089176658573199e-02f64,
    1.6728811790177316e-02f64,
    1.4326191823806518e-02f64,
    1.1887390117010501e-02f64,
    9.4185794284203875e-03f64,
    6.9260419018309606e-03f64,
    4.4163334569309052e-03f64,
    1.8992056795136905e-03f64,
];
static mut POLY_SMALLX_W1: [libc::c_double; 496] = [
    -3.3333333333333331e-01f64,
    -1.2271362192859778e-01f64,
    -2.1061971140473557e-01f64,
    -5.6487691723447885e-02f64,
    -1.4907718645889767e-01f64,
    -1.2776845515098778e-01f64,
    -3.1384430571429409e-02f64,
    -8.9804624256712817e-02f64,
    -1.2931437096375242e-01f64,
    -8.2829907541438680e-02f64,
    -1.9686757690986864e-02f64,
    -5.6173759018728280e-02f64,
    -9.7115272681211257e-02f64,
    -1.0297926219357020e-01f64,
    -5.7378281748836732e-02f64,
    -1.3404459326117429e-02f64,
    -3.7140259226780728e-02f64,
    -6.9798025993402457e-02f64,
    -8.9903208869919593e-02f64,
    -8.1202949733650345e-02f64,
    -4.1884430183462780e-02f64,
    -9.6762784934135981e-03f64,
    -2.5810077192692869e-02f64,
    -5.0559277860857933e-02f64,
    -7.1997207281479375e-02f64,
    -7.8739057440032886e-02f64,
    -6.4711830138776669e-02f64,
    -3.1839604926079998e-02f64,
    -7.2956931243810877e-03f64,
    -1.8697575943681034e-02f64,
    -3.7385544074891822e-02f64,
    -5.6452682904581976e-02f64,
    -6.8429140245654982e-02f64,
    -6.7705342645285799e-02f64,
    -5.2380981359025407e-02f64,
    -2.4986373035831237e-02f64,
    -5.6884471222090364e-03f64,
    -1.4017609368068548e-02f64,
    -2.8279396473125228e-02f64,
    -4.4297481709585342e-02f64,
    -5.7192383961753759e-02f64,
    -6.2644131890598725e-02f64,
    -5.8019794346925377e-02f64,
    -4.3080183147849817e-02f64,
    -2.0113905313217502e-02f64,
    -4.5548069078836916e-03f64,
    -1.0812068870036251e-02f64,
    -2.1858322694621932e-02f64,
    -3.5065901484532154e-02f64,
    -4.7201253922888042e-02f64,
    -5.5107972224754838e-02f64,
    -5.6377251364257981e-02f64,
    -4.9866349375738916e-02f64,
    -3.5958202071776788e-02f64,
    -1.6531204416842745e-02f64,
    -3.7265960577018311e-03f64,
    -8.5403678824716809e-03f64,
    -1.7229332137015666e-02f64,
    -2.8080687367955298e-02f64,
    -3.8907666134333468e-02f64,
    -4.7433694841593890e-02f64,
    -5.1693920888210537e-02f64,
    -5.0384549968286702e-02f64,
    -4.3099530033836778e-02f64,
    -3.0414471142145506e-02f64,
    -1.3822516879781982e-02f64,
    -3.1038096899801901e-03f64,
    -6.8830915722212487e-03f64,
    -1.3819746842434521e-02f64,
    -2.2762002213180321e-02f64,
    -3.2198834723663874e-02f64,
    -4.0484183390368120e-02f64,
    -4.6081931636853396e-02f64,
    -4.7795785285076720e-02f64,
    -4.4950377862156901e-02f64,
    -3.7497135400073503e-02f64,
    -2.6030178540522940e-02f64,
    -1.1726256176801588e-02f64,
    -2.6240792114390053e-03f64,
    -5.6436186987320449e-03f64,
    -1.1257772310878891e-02f64,
    -1.8670533124689720e-02f64,
    -2.6815751926887902e-02f64,
    -3.4492520092913835e-02f64,
    -4.0518024622316566e-02f64,
    -4.3878709377426037e-02f64,
    -4.3860783492389178e-02f64,
    -4.0143708158048838e-02f64,
    -3.2844993055811733e-02f64,
    -2.2511371641957784e-02f64,
    -1.0071467619841788e-02f64,
    -2.2469308790401127e-03f64,
    -4.6964849046452917e-03f64,
    -9.2974560817277799e-03f64,
    -1.5486275275472907e-02f64,
    -2.2495801468911308e-02f64,
    -2.9439624856328239e-02f64,
    -3.5409663026430928e-02f64,
    -3.9576455854167823e-02f64,
    -4.1281268726971909e-02f64,
    -4.0109999958463663e-02f64,
    -3.5940867319080382e-02f64,
    -2.8960749795930670e-02f64,
    -1.9649015970703121e-02f64,
    -8.7427392154592037e-03f64,
    -1.9452005169610048e-03f64,
    -3.9590659703587971e-03f64,
    -7.7727242996177151e-03f64,
    -1.2978556297161697e-02f64,
    -1.9014501003127515e-02f64,
    -2.5218029951309142e-02f64,
    -3.0889870150948288e-02f64,
    -3.5361429299482924e-02f64,
    -3.8059523861408914e-02f64,
    -3.8562264536316726e-02f64,
    -3.6640791404117634e-02f64,
    -3.2282899099728132e-02f64,
    -2.5696361141300823e-02f64,
    -1.7292174284832689e-02f64,
    -7.6599415166613213e-03f64,
    -1.7001230829367258e-03f64,
    -3.3754187760707522e-03f64,
    -6.5691417015674332e-03f64,
    -1.0980813193163734e-02f64,
    -1.6191752239187309e-02f64,
    -2.1700508243780385e-02f64,
    -2.6965355395781234e-02f64,
    -3.1450294276355116e-02f64,
    -3.4670712171327708e-02f64,
    -3.6234880948403915e-02f64,
    -3.5877818286314068e-02f64,
    -3.3484676556934885e-02f64,
    -2.9101705514392662e-02f64,
    -2.2933920020103322e-02f64,
    -1.5330145136012663e-02f64,
    -6.7660677910014247e-03f64,
    -1.4984074950259089e-03f64,
    -2.9067246676076157e-03f64,
    -5.6063199913378228e-03f64,
    -9.3719000074020762e-03f64,
    -1.3886833612390828e-02f64,
    -1.8766944700796127e-02f64,
    -2.3589413509197684e-02f64,
    -2.7924639812563028e-02f64,
    -3.1368700683786291e-02f64,
    -3.3573990726416987e-02f64,
    -3.4275766919362793e-02f64,
    -3.3312623741992758e-02f64,
    -3.0639375470369250e-02f64,
    -2.6331392475133136e-02f64,
    -2.0580114466852976e-02f64,
    -1.3680500642828962e-02f64,
    -6.0196844102690869e-03f64,
    -1.3304316837717016e-03f64,
    -2.5254539216072332e-03f64,
    -4.8267625926033710e-03f64,
    -8.0628400015049003e-03f64,
    -1.1990899100116491e-02f64,
    -1.6313190281052339e-02f64,
    -2.0697019672680061e-02f64,
    -2.4797149597584039e-02f64,
    -2.8279093434533591e-02f64,
    -3.0841757376119491e-02f64,
    -3.2237924483929564e-02f64,
    -3.2291219224453237e-02f64,
    -3.0908424053730399e-02f64,
    -2.8086328935576100e-02f64,
    -2.3912663421741687e-02f64,
    -1.8561091188511476e-02f64,
    -1.2280982655562224e-02f64,
    -5.3901017082554287e-03f64,
    -1.1890941070327255e-03f64,
    -2.2116988826134500e-03f64,
    -4.1886553631745567e-03f64,
    -6.9875756372839480e-03f64,
    -1.0419927528137743e-02f64,
    -1.4252420410437240e-02f64,
    -1.8221106397652641e-02f64,
    -2.2047354808442856e-02f64,
    -2.5454745823222515e-02f64,
    -2.8185874148949006e-02f64,
    -3.0018058614902164e-02f64,
    -3.0777018638139111e-02f64,
    -3.0347699599460185e-02f64,
    -2.8681599315174507e-02f64,
    -2.5800157550483593e-02f64,
    -2.1794010982877157e-02f64,
    -1.6818196700600894e-02f64,
    -1.1083936470966001e-02f64,
    -4.8542023537830386e-03f64,
    -1.0690629147509234e-03f64,
    -1.9508097838309760e-03f64,
    -3.6611187853273588e-03f64,
    -6.0965216267657952e-03f64,
    -9.1089122140064586e-03f64,
    -1.2513632207604274e-02f64,
    -1.6099559879687413e-02f64,
    -1.9640657574944317e-02f64,
    -2.2908354254861273e-02f64,
    -2.5684094401597250e-02f64,
    -2.7771375416823764e-02f64,
    -2.9006623070525431e-02f64,
    -2.9268317072484000e-02f64,
    -2.8483873130656211e-02f64,
    -2.6633909001728261e-02f64,
    -2.3753664147307559e-02f64,
    -1.9931501267395593e-02f64,
    -1.5304606185569621e-02f64,
    -1.0052431646823436e-02f64,
    -4.3943087506434211e-03f64,
    -9.6627314278892426e-04f64,
    -1.7318347083541976e-03f64,
    -3.2210239526491015e-03f64,
    -5.3520511073680780e-03f64,
    -8.0073246286096484e-03f64,
    -1.1039282585195927e-02f64,
    -1.4277715337011516e-02f64,
    -1.7538220345659664e-02f64,
    -2.0631374387745500e-02f64,
    -2.3372173185105094e-02f64,
    -2.5589275254414505e-02f64,
    -2.7133596260340120e-02f64,
    -2.7885831872629167e-02f64,
    -2.7762539538660241e-02f64,
    -2.6720480163454536e-02f64,
    -2.4759006126101473e-02f64,
    -2.1920378758193571e-02f64,
    -1.8288004573812425e-02f64,
    -1.3982709537162180e-02f64,
    -9.1575193277493756e-03f64,
    -3.9967185403280816e-03f64,
    -8.7758269425313210e-04f64,
    -1.5464683528524546e-03f64,
    -2.8508202714467739e-03f64,
    -4.7253106993737966e-03f64,
    -7.0756580127189356e-03f64,
    -9.7828924188553788e-03f64,
    -1.2708741997005996e-02f64,
    -1.5701898033920712e-02f64,
    -1.8604879236247839e-02f64,
    -2.1261187557625936e-02f64,
    -2.3522435269239354e-02f64,
    -2.5255124114469417e-02f64,
    -2.6346772869184864e-02f64,
    -2.6711118691921380e-02f64,
    -2.6292159006198620e-02f64,
    -2.5066852499734976e-02f64,
    -2.3046357966386773e-02f64,
    -2.0275756003799422e-02f64,
    -1.6832270733800399e-02f64,
    -1.2822101353378577e-02f64,
    -8.3762659163262396e-03f64,
    -3.6506796345923557e-03f64,
    -8.0053237561891213e-04f64,
    -1.3883300247785086e-03f64,
    -2.5370292953011361e-03f64,
    -4.1939521779308740e-03f64,
    -6.2828211065206491e-03f64,
    -8.7069202945531735e-03f64,
    -1.1353106382478750e-02f64,
    -1.4096503966598999e-02f64,
    -1.6805693484973475e-02f64,
    -1.9348178723997807e-02f64,
    -2.1595909708747425e-02f64,
    -2.3430634422247840e-02f64,
    -2.4748859759267428e-02f64,
    -2.5466218075784461e-02f64,
    -2.5521059996814338e-02f64,
    -2.4877125808989646e-02f64,
    -2.3525185527977711e-02f64,
    -2.1483580167976052e-02f64,
    -1.8797642603314672e-02f64,
    -1.5538026278976966e-02f64,
    -1.1798038198100505e-02f64,
    -7.6903245153657745e-03f64,
    -3.3476604370182329e-03f64,
    -7.3317556916507529e-04f64,
    -1.2524590747887223e-03f64,
    -2.2691845462950136e-03f64,
    -3.7405007205857576e-03f64,
    -5.6041788910352087e-03f64,
    -7.7809841253016748e-03f64,
    -1.0177696039521220e-02f64,
    -1.2690665256319447e-02f64,
    -1.5209771470394179e-02f64,
    -1.7622633889750192e-02f64,
    -1.9818915283735725e-02f64,
    -2.1694557310112852e-02f64,
    -2.3155787346856936e-02f64,
    -2.4122745624809844e-02f64,
    -2.4532595723585893e-02f64,
    -2.4342000921887333e-02f64,
    -2.3528872763375518e-02f64,
    -2.2093325643166399e-02f64,
    -2.0057801314458116e-02f64,
    -1.7466359276473199e-02f64,
    -1.4383164083589122e-02f64,
    -1.0890252413042244e-02f64,
    -7.0848839825290218e-03f64,
    -3.0808220625546364e-03f64,
    -6.7395540337246787e-04f64,
    -1.1349566358644543e-03f64,
    -2.0390746801447687e-03f64,
    -3.3511690623813806e-03f64,
    -5.0200781398304032e-03f64,
    -6.9804175588084787e-03f64,
    -9.1548797431910186e-03f64,
    -1.1456954442290054e-02f64,
    -1.3793975716853965e-02f64,
    -1.6070389378533476e-02f64,
    -1.8191127216247032e-02f64,
    -2.0064970609393468e-02f64,
    -2.1607786472664380e-02f64,
    -2.2745522888648222e-02f64,
    -2.3416860109892888e-02f64,
    -2.3575424563802901e-02f64,
    -2.3191488659954042e-02f64,
    -2.2253097062672412e-02f64,
    -2.0766580060411256e-02f64,
    -1.8756436145074561e-02f64,
    -1.6264588577291961e-02f64,
    -1.3349045851497947e-02f64,
    -1.0082036571136040e-02f64,
    -6.5478866197224098e-03f64,
    -2.8446311636533511e-03f64,
    -6.2161488689990480e-04f64,
    -1.0327275086083386e-03f64,
    -1.8401960580889394e-03f64,
    -3.0149869640499873e-03f64,
    -4.5147339695371389e-03f64,
    -6.2851163121741835e-03f64,
    -8.2616265380855095e-03f64,
    -1.0371671052150202e-02f64,
    -1.2536935793770810e-02f64,
    -1.4675940887304666e-02f64,
    -1.6706702024265049e-02f64,
    -1.8549412886245953e-02f64,
    -2.0129062224194316e-02f64,
    -2.1377901293589997e-02f64,
    -2.2237682139585283e-02f64,
    -2.2661594577637559e-02f64,
    -2.2615839388568829e-02f64,
    -2.2080786934452167e-02f64,
    -2.1051683736156294e-02f64,
    -1.9538884132735745e-02f64,
    -1.7567599591891560e-02f64,
    -1.5177174446041301e-02f64,
    -1.2419915194091842e-02f64,
    -9.3595332664645377e-03f64,
    -6.0694393571820810e-03f64,
    -2.6345721695611437e-03f64,
    -5.7513028408902322e-04f64,
    -9.4329168430796887e-04f64,
    -1.6673519036875177e-03f64,
    -2.7231558362285969e-03f64,
    -4.0753849099907985e-03f64,
    -5.6786233722776929e-03f64,
    -7.4787299505662741e-03f64,
    -9.4144739152637359e-03f64,
    -1.1419386669380317e-02f64,
    -1.3423773547435855e-02f64,
    -1.5356825713614353e-02f64,
    -1.7148769050359263e-02f64,
    -1.8732985812784094e-02f64,
    -2.0048045624828675e-02f64,
    -2.1039585086268936e-02f64,
    -2.1661979765378692e-02f64,
    -2.1879758536315162e-02f64,
    -2.1668717899778190e-02f64,
    -2.1016702873908635e-02f64,
    -1.9924031000705781e-02f64,
    -1.8403546708975267e-02f64,
    -1.6480304475441670e-02f64,
    -1.4190890952391386e-02f64,
    -1.1582409919015752e-02f64,
    -8.7111810553797079e-03f64,
    -5.6413659566756039e-03f64,
    -2.4469308282843898e-03f64,
    -5.3366111684094713e-04f64,
    -8.6464500025246356e-04f64,
    -1.5163554162466518e-03f64,
    -2.4685657231938683e-03f64,
    -3.6916481016212623e-03f64,
    -5.1474059282214536e-03f64,
    -6.7901472727191041e-03f64,
    -8.5679696755271186e-03f64,
    -1.0424220488828342e-02f64,
    -1.2299092180139715e-02f64,
    -1.4131308241160878e-02f64,
    -1.5859852820091818e-02f64,
    -1.7425695972749667e-02f64,
    -1.8773466540719552e-02f64,
    -1.9853026110371076e-02f64,
    -2.0620900244837929e-02f64,
    -2.1041527136180304e-02f64,
    -2.1088288887562652e-02f64,
    -2.0744296665855217e-02f64,
    -2.0002907798798691e-02f64,
    -1.8867960345377299e-02f64,
    -1.7353718559221982e-02f64,
    -1.5484530854094966e-02f64,
    -1.3294210470928623e-02f64,
    -1.0825159460360188e-02f64,
    -8.1272796169722730e-03f64,
    -5.2568631355084626e-03f64,
    -2.2786295689508269e-03f64,
    -4.9651222051138092e-04f64,
    -7.9515492910924588e-04f64,
    -1.3838075161188327e-03f64,
    -2.2454304965243265e-03f64,
    -3.3550242159053603e-03f64,
    -4.6802840672847696e-03f64,
    -6.1824474473191234e-03f64,
    -7.8173104864695114e-03f64,
    -9.5363881834857386e-03f64,
    -1.1288187853302170e-02f64,
    -1.3019562855678271e-02f64,
    -1.4677111485834683e-02f64,
    -1.6208584731990053e-02f64,
    -1.7564266368590393e-02f64,
    -1.8698289564294306e-02f64,
    -1.9569855822093415e-02f64,
    -2.0144324592970581e-02f64,
    -2.0394145249041540e-02f64,
    -2.0299607180963412e-02f64,
    -1.9849388492826435e-02f64,
    -1.9040888986250282e-02f64,
    -1.7880338725651895e-02f64,
    -1.6382679334875805e-02f64,
    -1.4571221214845644e-02f64,
    -1.2477086244340073e-02f64,
    -1.0138453615874508e-02f64,
    -7.5996463863333523e-03f64,
    -4.9102340771396448e-03f64,
    -2.1271009877085771e-03f64,
    -4.6310464738128133e-04f64,
    -7.3348180776671226e-04f64,
    -1.2669287870492598e-03f64,
    -2.0490099239445147e-03f64,
    -3.0585149395456822e-03f64,
    -4.2679787427113616e-03f64,
    -5.6443547331045977e-03f64,
    -7.1498252733619401e-03f64,
    -8.7427296744303148e-03f64,
    -1.0378587186787830e-02f64,
    -1.2011190184133108e-02f64,
    -1.3593741021053611e-02f64,
    -1.5080004983478243e-02f64,
    -1.6425451356138845e-02f64,
    -1.7588354914387684e-02f64,
    -1.8530831101716622e-02f64,
    -1.9219779756140722e-02f64,
    -1.9627714459533419e-02f64,
    -1.9733457350653339e-02f64,
    -1.9522682498344823e-02f64,
    -1.8988294598248755e-02f64,
    -1.8130633747778603e-02f64,
    -1.6957501279801657e-02f64,
    -1.5484006012953288e-02f64,
    -1.3732234769856470e-02f64,
    -1.1730755802916937e-02f64,
    -9.5139701834677914e-03f64,
    -7.1213437578314283e-03f64,
    -4.5966801393834151e-03f64,
    -1.9901896994310832e-03f64,
    -4.3295313883927794e-04f64,
    -6.7851870107199454e-04f64,
    -1.1634312017740312e-03f64,
    -1.8753961641719409e-03f64,
    -2.7963255554749196e-03f64,
    -3.9027531947284874e-03f64,
    -5.1663738309140816e-03f64,
    -6.5546936397432127e-03f64,
    -8.0317773547678734e-03f64,
    -9.5590750512080276e-03f64,
    -1.1096309789162002e-02f64,
    -1.2602405937747242e-02f64,
    -1.4036437074665549e-02f64,
    -1.5358571907751601e-02f64,
    -1.6530996706426423e-02f64,
    -1.7518793260717383e-02f64,
    -1.8290752391624653e-02f64,
    -1.8820104496316398e-02f64,
    -1.9085150491865859e-02f64,
    -1.9069778779481357e-02f64,
    -1.8763856436510597e-02f64,
    -1.8163485698059839e-02f64,
    -1.7271119851178813e-02f64,
    -1.6095535868708110e-02f64,
    -1.4651664402953265e-02f64,
    -1.2960281132221278e-02f64,
    -1.1047567099186447e-02f64,
    -8.9445508736011696e-03f64,
    -6.6864610473804766e-03f64,
    -4.3121367372060491e-03f64,
    -1.8660755178749769e-03f64,
];
static mut POLY_LARGEX_RT: [libc::c_double; 496] = [
    5.0000000000000000e-01f64,
    2.7525512860841095e-01f64,
    2.7247448713915889e+00f64,
    1.9016350919348812e-01f64,
    1.7844927485432516e+00f64,
    5.5253437422632601e+00f64,
    1.4530352150331710e-01f64,
    1.3390972881263614e+00f64,
    3.9269635013582871e+00f64,
    8.5886356890120350e+00f64,
    1.1758132021177814e-01f64,
    1.0745620124369040e+00f64,
    3.0859374437175502e+00f64,
    6.4147297336620301e+00f64,
    1.1807189489971737e+01f64,
    9.8747014068481187e-02f64,
    8.9830283456961768e-01f64,
    2.5525898026681713e+00f64,
    5.1961525300544658e+00f64,
    9.1242480375311796e+00f64,
    1.5129959781108086e+01f64,
    8.5115442997594035e-02f64,
    7.7213792004277704e-01f64,
    2.1805918884504591e+00f64,
    4.3897928867310139e+00f64,
    7.5540913261017844e+00f64,
    1.1989993039823879e+01f64,
    1.8528277495852493e+01f64,
    7.4791882596818265e-02f64,
    6.7724908764928915e-01f64,
    1.9051136350314284e+00f64,
    3.8094763614849070e+00f64,
    6.4831454286271706e+00f64,
    1.0093323675221344e+01f64,
    1.4972627088426393e+01f64,
    2.1984272840962650e+01f64,
    6.6702230958194400e-02f64,
    6.0323635708174872e-01f64,
    1.6923950797931788e+00f64,
    3.3691762702432690e+00f64,
    5.6944233429577551e+00f64,
    8.7697567302686021e+00f64,
    1.2771825354869193e+01f64,
    1.8046505467728981e+01f64,
    2.5485979166099078e+01f64,
    6.0192063149587915e-02f64,
    5.4386750029464603e-01f64,
    1.5229441054044437e+00f64,
    3.0225133764515739e+00f64,
    5.0849077500985240e+00f64,
    7.7774392315254453e+00f64,
    1.1208130204348663e+01f64,
    1.5561163332189350e+01f64,
    2.1193892096301543e+01f64,
    2.9024950340236227e+01f64,
    5.4839869578818493e-02f64,
    4.9517412335035643e-01f64,
    1.3846557400845998e+00f64,
    2.7419199401067025e+00f64,
    4.5977377004857116e+00f64,
    6.9993974695288363e+00f64,
    1.0018908275957234e+01f64,
    1.3769305866101691e+01f64,
    1.8441119680978193e+01f64,
    2.4401961242387042e+01f64,
    3.2594980091440817e+01f64,
    5.0361889117293952e-02f64,
    4.5450668156378027e-01f64,
    1.2695899401039614e+00f64,
    2.5098480972321280e+00f64,
    4.1984156448784136e+00f64,
    6.3699753880306353e+00f64,
    9.0754342309612035e+00f64,
    1.2390447963809471e+01f64,
    1.6432195087675314e+01f64,
    2.1396755936166109e+01f64,
    2.7661108779846089e+01f64,
    3.6191360360615604e+01f64,
    4.6560083245024773e-02f64,
    4.2002740640121355e-01f64,
    1.1723107732777798e+00f64,
    2.3145408643494343e+00f64,
    3.8645850382281592e+00f64,
    5.8487348113063433e+00f64,
    8.3045534899859010e+00f64,
    1.1285750993517638e+01f64,
    1.4870960377525401e+01f64,
    1.9180919485610456e+01f64,
    2.4416692333056517e+01f64,
    3.0963938274746795e+01f64,
    3.9810426068749337e+01f64,
    4.3292035739773548e-02f64,
    3.9042092604203149e-01f64,
    1.0889658675692704e+00f64,
    2.1477994705822314e+00f64,
    3.5810282499917712e+00f64,
    5.4091123306164599e+00f64,
    7.6606911156100850e+00f64,
    1.0375563009770053e+01f64,
    1.3609711429390236e+01f64,
    1.7444294475704190e+01f64,
    2.2003196766914922e+01f64,
    2.7492041504843851e+01f64,
    3.4304620509373080e+01f64,
    4.3449262307852045e+01f64,
    4.0452704304575260e-02f64,
    3.6472064505140778e-01f64,
    1.0167460688574956e+00f64,
    2.0037189531339226e+00f64,
    3.3369832057345099e+00f64,
    5.0328052776251155e+00f64,
    7.1135937697298752e+00f64,
    9.6098172843044445e+00f64,
    1.2563082369948498e+01f64,
    1.6031284108073976e+01f64,
    2.0097785334755926e+01f64,
    2.4889312475156551e+01f64,
    3.0615717400899491e+01f64,
    3.7678471784205300e+01f64,
    4.7105508618218913e+01f64,
    3.7962914575313457e-02f64,
    3.4220015601094766e-01f64,
    9.5355315539086549e-01f64,
    1.8779315076960743e+00f64,
    3.1246010507021444e+00f64,
    4.7067267076675874e+00f64,
    6.6422151797414442e+00f64,
    8.9550013377233899e+00f64,
    1.1677033673975957e+01f64,
    1.4851431341801250e+01f64,
    1.8537743178606693e+01f64,
    2.2821300693525210e+01f64,
    2.7831438211328678e+01f64,
    3.3781970488226165e+01f64,
    4.1081666525491201e+01f64,
    5.0777223877537082e+01f64,
    3.5761858556337386e-02f64,
    3.2230289701540760e-01f64,
    8.9778743824424956e-01f64,
    1.7671330095048279e+00f64,
    2.9380104369247211e+00f64,
    4.4212366485835117e+00f64,
    6.2313736025080120e+00f64,
    8.3876207781715131e+00f64,
    1.0915150152476127e+01f64,
    1.3847145110793951e+01f64,
    1.7228024947684798e+01f64,
    2.1118801755252182e+01f64,
    2.5606595795917325e+01f64,
    3.0823164238528481e+01f64,
    3.6986065260934993e+01f64,
    4.4511035627908562e+01f64,
    5.4462790440994993e+01f64,
    3.3802060596144767e-02f64,
    3.0459519206802305e-01f64,
    8.4820747882451009e-01f64,
    1.6687755533298347e+00f64,
    2.7727245286391229e+00f64,
    4.1690582475017761e+00f64,
    5.8697952945278802e+00f64,
    7.8906059174609409e+00f64,
    1.0251740616401369e+01f64,
    1.2979403028335362e+01f64,
    1.6107833621211359e+01f64,
    1.9682594096569808e+01f64,
    2.3766014733151867e+01f64,
    2.8446863416187917e+01f64,
    3.3859169865578401e+01f64,
    4.0224050469543094e+01f64,
    4.7963921373889526e+01f64,
    5.8160844506183068e+01f64,
    3.2045913128252994e-02f64,
    2.8873407234686432e-01f64,
    8.0383479939549507e-01f64,
    1.5808614575096895e+00f64,
    2.6252513972914890e+00f64,
    3.9445843839317147e+00f64,
    5.5489066368145510e+00f64,
    7.4511963747374166e+00f64,
    9.6680282675023470e+00f64,
    1.2220529929386148e+01f64,
    1.5135786084744241e+01f64,
    1.8448961406463173e+01f64,
    2.2206639606535553e+01f64,
    2.6472355727146923e+01f64,
    3.1336411796150887e+01f64,
    3.6934985280054455e+01f64,
    4.3492591618441629e+01f64,
    5.1438070769382129e+01f64,
    6.1870224479037041e+01f64,
    3.0463239279482524e-02f64,
    2.7444471579285035e-01f64,
    7.6388755844391321e-01f64,
    1.5018014976681044e+00f64,
    2.4928301451213657e+00f64,
    3.7434180412162936e+00f64,
    5.2620558537883513e+00f64,
    7.0596277357415609e+00f64,
    9.1498983120306487e+00f64,
    1.1550198286442804e+01f64,
    1.4282403685210403e+01f64,
    1.7374366975199077e+01f64,
    2.0862075185437845e+01f64,
    2.4793039892463458e+01f64,
    2.9231910157093427e+01f64,
    3.4270428925039575e+01f64,
    4.0046815790245603e+01f64,
    4.6788846392124967e+01f64,
    5.4931555621020550e+01f64,
    6.5589931990639727e+01f64,
    2.9029543936387635e-02f64,
    2.6150430708215294e-01f64,
    7.2773338834365031e-01f64,
    1.4303150459330356e+00f64,
    2.3732474728319004e+00f64,
    3.5620583926357074e+00f64,
    5.0039935628186738e+00f64,
    6.7082806310126752e+00f64,
    8.6864934825800209e+00f64,
    1.0953055650413523e+01f64,
    1.3525943011373357e+01f64,
    1.6427682387916022e+01f64,
    1.9686806658322944e+01f64,
    2.3340045388239311e+01f64,
    2.7435762818520232e+01f64,
    3.2039647947988584e+01f64,
    3.7244806615266050e+01f64,
    4.3191409701011828e+01f64,
    5.0110370364086812e+01f64,
    5.8442711638286255e+01f64,
    6.9319101991400871e+01f64,
    2.7724736591276774e-02f64,
    2.4973028108823533e-01f64,
    6.9485521795227390e-01f64,
    1.3653582776868292e+00f64,
    2.2647072589375217e+00f64,
    3.3976808657520632e+00f64,
    4.7705156762734964e+00f64,
    6.3911097478094518e+00f64,
    8.2693001309060623e+00f64,
    1.0417240214581929e+01f64,
    1.2849916314252928e+01f64,
    1.5585864757495914e+01f64,
    1.8648187517474806e+01f64,
    2.2066029202676830e+01f64,
    2.5876798119301597e+01f64,
    3.0129649964964479e+01f64,
    3.4891252115132360e+01f64,
    4.0256006929107102e+01f64,
    4.6365957352938530e+01f64,
    5.3455044504540616e+01f64,
    6.1970091334807094e+01f64,
    7.3056979479728611e+01f64,
    2.6532183876098379e-02f64,
    2.3897161999933406e-01f64,
    6.6482608325629022e-01f64,
    1.3060716158039978e+00f64,
    2.1657359795353486e+00f64,
    3.2479796092961242e+00f64,
    4.5582116475947760e+00f64,
    6.1032492614598546e+00f64,
    7.8915323621309739e+00f64,
    9.9334115718826261e+00f64,
    1.2241535951273148e+01f64,
    1.4831380588625729e+01f64,
    1.7721976213997483e+01f64,
    2.0936940207605186e+01f64,
    2.4505973901846374e+01f64,
    2.8467112454527676e+01f64,
    3.2870252361043640e+01f64,
    3.7782987405363052e+01f64,
    4.3300959201161334e+01f64,
    4.9568012842125619e+01f64,
    5.6821018665012517e+01f64,
    6.5512427112270117e+01f64,
    7.6802901160312700e+01f64,
    2.5437996585689359e-02f64,
    2.2910231649262433e-01f64,
    6.3729027873266875e-01f64,
    1.2517406323627465e+00f64,
    2.0751129098523808e+00f64,
    3.1110524551477132e+00f64,
    4.3642830769353065e+00f64,
    5.8407332713236082e+00f64,
    7.5477046800234540e+00f64,
    9.4940953300264876e+00f64,
    1.1690695926056073e+01f64,
    1.4150586187285759e+01f64,
    1.6889671928527108e+01f64,
    1.9927425875242463e+01f64,
    2.3287932824879917e+01f64,
    2.7001406056472355e+01f64,
    3.1106464709046566e+01f64,
    3.5653703516328214e+01f64,
    4.0711598185543110e+01f64,
    4.6376979557540132e+01f64,
    5.2795432527283630e+01f64,
    6.0206666963057224e+01f64,
    6.9068601975304375e+01f64,
    8.0556280819950402e+01f64,
    2.4430486164134554e-02f64,
    2.2001639865187669e-01f64,
    6.1194905886035600e-01f64,
    1.2017665377409916e+00f64,
    1.9918178052911781e+00f64,
    2.9853154656388092e+00f64,
    4.1864105010442785e+00f64,
    5.6002933990827337e+00f64,
    7.2333279637322212e+00f64,
    9.0932267983089190e+00f64,
    1.1189281321712450e+01f64,
    1.3532664930275971e+01f64,
    1.6136836705389790e+01f64,
    1.9018086906205195e+01f64,
    2.2196288008884540e+01f64,
    2.5695953089717140e+01f64,
    2.9547770386068311e+01f64,
    3.3790907096465993e+01f64,
    3.8476619956375998e+01f64,
    4.3674228042342541e+01f64,
    4.9481707240111525e+01f64,
    5.6046326151559533e+01f64,
    6.3610552160222085e+01f64,
    7.2637626045451725e+01f64,
    8.4316597544701708e+01f64,
    2.3499745451748166e-02f64,
    2.1162409772850768e-01f64,
    5.8854965565640838e-01f64,
    1.1556436128826397e+00f64,
    1.9149911321201440e+00f64,
    2.8694384848332137e+00f64,
    4.0226539114050963e+00f64,
    5.3792094651444282e+00f64,
    6.9446884907059312e+00f64,
    8.7258252848297229e+00f64,
    1.0730686164960115e+01f64,
    1.2968905056512702e+01f64,
    1.5451992498719477e+01f64,
    1.8193745832982035e+01f64,
    2.1210802311794055e+01f64,
    2.4523399621789363e+01f64,
    2.8156446757738671e+01f64,
    3.2141075953841757e+01f64,
    3.6516971983705098e+01f64,
    4.1336022358465094e+01f64,
    4.6668355740523516e+01f64,
    5.2613053664164717e+01f64,
    5.9319017574105793e+01f64,
    6.7031396926394294e+01f64,
    7.6218617538242384e+01f64,
    8.8083386135303101e+01f64,
    2.2637321764490403e-02f64,
    2.0384886358910115e-01f64,
    5.6687674698997592e-01f64,
    1.1129417449108705e+00f64,
    1.8439034531225937e+00f64,
    2.7622958634819486e+00f64,
    3.8713773423959186e+00f64,
    5.1751974796436677e+00f64,
    6.6786842873405901e+00f64,
    8.3877565918984587e+00f64,
    1.0309468348865641e+01f64,
    1.2452194292401609e+01f64,
    1.4825870237972618e+01f64,
    1.7442307191222060e+01f64,
    2.0315607360293736e+01f64,
    2.3462724279507746e+01f64,
    2.6904232239340534e+01f64,
    3.0665409061778991e+01f64,
    3.4777804747837429e+01f64,
    3.9281595476659632e+01f64,
    4.4229272334197169e+01f64,
    4.9691743673383556e+01f64,
    5.5769161249665579e+01f64,
    6.2612012913671613e+01f64,
    7.0468060440696945e+01f64,
    7.9810787215031667e+01f64,
    9.1856229242335857e+01f64,
    2.1835959421664289e-02f64,
    1.9662501675605398e-01f64,
    5.4674575955457738e-01f64,
    1.0732927646925488e+00f64,
    1.7779315886935154e+00f64,
    2.6629283184247892e+00f64,
    3.7311909350139651e+00f64,
    4.9863243745575856e+00f64,
    6.4327019219178299e+00f64,
    8.0755565686670163e+00f64,
    9.9210973194213103e+00f64,
    1.1976657318097082e+01f64,
    1.4250883359461472e+01f64,
    1.6753980285337462e+01f64,
    1.9498029648036461e+01f64,
    2.2497411050074689e+01f64,
    2.5769368816152561e+01f64,
    2.9334789869091171e+01f64,
    3.3219297919270076e+01f64,
    3.7454838268460072e+01f64,
    4.2082055800206739e+01f64,
    4.7154021248777767e+01f64,
    5.2742395970002200e+01f64,
    5.8948369842919362e+01f64,
    6.5923974474211676e+01f64,
    7.3919519173353009e+01f64,
    8.3413425568839060e+01f64,
    9.5634750860588284e+01f64,
    2.1089395098205156e-02f64,
    1.8989588398975638e-01f64,
    5.2799756150380650e-01f64,
    1.0363796519133510e+00f64,
    1.7165398584196183e+00f64,
    2.5705130786025099e+00f64,
    3.6009058856172511e+00f64,
    4.8109422295121211e+00f64,
    6.2045223787503812e+00f64,
    7.7862978584545157e+00f64,
    9.5617661276720227e+00f64,
    1.1537390089408222e+01f64,
    1.3720749420799105e+01f64,
    1.6120733421037702e+01f64,
    1.8747789038878786e+01f64,
    2.1614243675418422e+01f64,
    2.4734731466985338e+01f64,
    2.8126766135082082e+01f64,
    3.1811526931229533e+01f64,
    3.5814963828855454e+01f64,
    4.0169397995140628e+01f64,
    4.4915923137908337e+01f64,
    5.0108168407561145e+01f64,
    5.5818524151111106e+01f64,
    6.2149189096788938e+01f64,
    6.9253699227995114e+01f64,
    7.7384850976179521e+01f64,
    8.7025892182318486e+01f64,
    9.9418610907768539e+01f64,
    2.0392193775236527e-02f64,
    1.8361230503708192e-01f64,
    5.1049421913596571e-01f64,
    1.0019279274528394e+00f64,
    1.6592651780060930e+00f64,
    2.4843402777905514e+00f64,
    3.4794990281427913e+00f64,
    4.6476369270260962e+00f64,
    5.9922482023656096e+00f64,
    7.5174877929290096e+00f64,
    9.2282491217658844e+00f64,
    1.1130261490352575e+01f64,
    1.3230212276078705e+01f64,
    1.5535901019228723e+01f64,
    1.8056435214799702e+01f64,
    2.0802481620579336e+01f64,
    2.3786592878196362e+01f64,
    2.7023638435386893e+01f64,
    3.0531383273363225e+01f64,
    3.4331281605561593e+01f64,
    3.8449592717510598e+01f64,
    4.2918996674025955e+01f64,
    4.7781018446551954e+01f64,
    5.3089826610037136e+01f64,
    5.8918518746195041e+01f64,
    6.5370275574797105e+01f64,
    7.2600100925448842e+01f64,
    8.0863221815671636e+01f64,
    9.0647606826965728e+01f64,
    1.0320750067582173e+02f64,
    1.9739616193178225e-02f64,
    1.7773142707141706e-01f64,
    4.9411557648940696e-01f64,
    9.6969873164499709e-01f64,
    1.6057051140985357e+00f64,
    2.4037941117242698e+00f64,
    3.3660847103142895e+00f64,
    4.4951876368162758e+00f64,
    5.7942464369889661e+00f64,
    7.2669891295593967e+00f64,
    8.9177926244746359e+00f64,
    1.0751762818395916e+01f64,
    1.2774834264847245e+01f64,
    1.4993894676815959e+01f64,
    1.7416941435106203e+01f64,
    2.0053280025321786e+01f64,
    2.2913778355123558e+01f64,
    2.6011196940249089e+01f64,
    2.9360624220999089e+01f64,
    3.2980060918172178e+01f64,
    3.6891221217477799e+01f64,
    4.1120658946990169e+01f64,
    4.5701398131155180e+01f64,
    5.0675379370668551e+01f64,
    5.6097293554984454e+01f64,
    6.2040925662658722e+01f64,
    6.8610413634453707e+01f64,
    7.5962195116562384e+01f64,
    8.4353874634793740e+01f64,
    9.4278041969742887e+01f64,
    1.0700113899010603e+02f64,
];
static mut POLY_LARGEX_WW: [libc::c_double; 496] = [
    1.0000000000000000e+00f64,
    9.0824829046386302e-01f64,
    9.1751709536136983e-02f64,
    8.1765693911205850e-01f64,
    1.7723149208382905e-01f64,
    5.1115688041124931e-03f64,
    7.4602451535815473e-01f64,
    2.3447981532351803e-01f64,
    1.9270440241576533e-02f64,
    2.2522907675073554e-04f64,
    6.8928466986403814e-01f64,
    2.7096740596053548e-01f64,
    3.8223161001540572e-02f64,
    1.5161418686244353e-03f64,
    8.6213052614365738e-06f64,
    6.4332872302566002e-01f64,
    2.9393409609065996e-01f64,
    5.8233375824728303e-02f64,
    4.4067613750663976e-03f64,
    9.6743698451812559e-05f64,
    2.9998543352743358e-07f64,
    6.0526925362603901e-01f64,
    3.0816667968502726e-01f64,
    7.7300217648506794e-02f64,
    8.8578382138948062e-03f64,
    4.0067910752148827e-04f64,
    5.3219826881352609e-06f64,
    9.7363225154967611e-09f64,
    5.7313704247602426e-01f64,
    3.1667674550189923e-01f64,
    9.4569504708028052e-02f64,
    1.4533875202369467e-02f64,
    1.0519698531478185e-03f64,
    3.0600064324974545e-05f64,
    2.6189464325736453e-07f64,
    2.9956294463236794e-10f64,
    5.4556646930857577e-01f64,
    3.2137060778702525e-01f64,
    1.0979326496044525e-01f64,
    2.1033035503882684e-02f64,
    2.1309695925833040e-03f64,
    1.0359792288232413e-04f64,
    2.0431047952739623e-06f64,
    1.1810976957673191e-08f64,
    8.8331775387174107e-12f64,
    5.2158612689910977e-01f64,
    3.2347866796799990e-01f64,
    1.2301274412795381e-01f64,
    2.7995674894202006e-02f64,
    3.6602062621609857e-03f64,
    2.5765255992385888e-04f64,
    8.8042421804617054e-06f64,
    1.2254980519965896e-07f64,
    4.9641247246303573e-10f64,
    2.5156013448758539e-13f64,
    5.0048719317386992e-01f64,
    3.2381258682735053e-01f64,
    1.3439262285778006e-01f64,
    3.5138145761611533e-02f64,
    5.6175220951544319e-03f64,
    5.2456660651192756e-04f64,
    2.6691954253619027e-05f64,
    6.6397074996280721e-07f64,
    6.7330283189164226e-09f64,
    1.9682757964692173e-11f64,
    6.9589212957542919e-15f64,
    4.8174023109328062e-01f64,
    3.2291902573400016e-01f64,
    1.4413872803435665e-01f64,
    4.2252688817935091e-02f64,
    7.9532178583626174e-03f64,
    9.2943743755879136e-04f64,
    6.4190011305491828e-05f64,
    2.4353194908851625e-06f64,
    4.5349233469612837e-08f64,
    3.4373298559297163e-10f64,
    7.4299483055247976e-13f64,
    1.8780387378083912e-16f64,
    4.6494147126015534e-01f64,
    3.2117309122758919e-01f64,
    1.5245906441260604e-01f64,
    4.9195331314242363e-02f64,
    1.0604396031364489e-02f64,
    1.4884051527208678e-03f64,
    1.3115117388667682e-04f64,
    6.8868272246162541e-06f64,
    1.9973511146629173e-07f64,
    2.8485864759760186e-09f64,
    1.6485618886327706e-11f64,
    2.6890952993271460e-14f64,
    4.9613885207872613e-18f64,
    4.4977725950135311e-01f64,
    3.1883638732261832e-01f64,
    1.5954673202319922e-01f64,
    5.5871569535761778e-02f64,
    1.3504919418060288e-02f64,
    2.2086118557151971e-03f64,
    2.3765707628035695e-04f64,
    1.6187168114290304e-05f64,
    6.6097288998530188e-07f64,
    1.4958725169227277e-08f64,
    1.6653219687764516e-10f64,
    7.4918020703531324e-13f64,
    9.3835311390007269e-16f64,
    1.2865094877603708e-19f64,
    4.3599994363115452e-01f64,
    3.1609390641804141e-01f64,
    1.6557367343124368e-01f64,
    6.2223540367002554e-02f64,
    1.6591495115446591e-02f64,
    3.0894146797321703e-03f64,
    3.9302588796965280e-04f64,
    3.3159963261346906e-05f64,
    1.7818177737242388e-06f64,
    5.7643503080952891e-08f64,
    1.0356918934379420e-09f64,
    9.1468517426524072e-12f64,
    3.2481602599447942e-14f64,
    3.1711218899325956e-17f64,
    3.2816140162356828e-21f64,
    4.2341113976095862e-01f64,
    3.1307798751519689e-01f64,
    1.7068961654416151e-01f64,
    6.8219695452184106e-02f64,
    1.9806923404641182e-02f64,
    4.1241021026157693e-03f64,
    6.0511405163412495e-04f64,
    6.1119606121792604e-05f64,
    4.1192442079068574e-06f64,
    1.7762581426211791e-07f64,
    4.6250368241484811e-09f64,
    6.6950024796024144e-11f64,
    4.7561297115556171e-13f64,
    1.3510580447340238e-15f64,
    1.0416899183921723e-18f64,
    8.2492149780365387e-23f64,
    4.1184987333822709e-01f64,
    3.0988419302971959e-01f64,
    1.7502336271724780e-01f64,
    7.3846925916088518e-02f64,
    2.3101477893554247e-02f64,
    5.3016484766203907e-03f64,
    8.7992993354924756e-04f64,
    1.0365425286733819e-04f64,
    8.4554514967754892e-06f64,
    4.6240685286457705e-07f64,
    1.6234818080244531e-08f64,
    3.4486111334905771e-10f64,
    4.0733153595416136e-12f64,
    2.3558755812450367e-14f64,
    5.4161094185246469e-17f64,
    3.3362887511570735e-20f64,
    2.0466542596109164e-24f64,
    4.0118401287804417e-01f64,
    3.0658202679942276e-01f64,
    1.7868499500877333e-01f64,
    7.9104739533119445e-02f64,
    2.6433148031204251e-02f64,
    6.6082690768705906e-03f64,
    1.2215096671021977e-03f64,
    1.6440051124820763e-04f64,
    1.5793956173446348e-05f64,
    1.0556630385602033e-06f64,
    4.7476455547314095e-08f64,
    1.3742166774424460e-09f64,
    2.4094891730959752e-11f64,
    2.3480585102103185e-13f64,
    1.1174227957300119e-15f64,
    2.1005883869494762e-18f64,
    1.0444732401725871e-21f64,
    5.0180752692698952e-26f64,
    3.9130397408272694e-01f64,
    3.0322229252021565e-01f64,
    1.8176831110517649e-01f64,
    8.4001039948325432e-02f64,
    2.9767244441382214e-02f64,
    8.0286850035604113e-03f64,
    1.6319828251932273e-03f64,
    2.4684151322487875e-04f64,
    2.7333196978369716e-05f64,
    2.1703986095318892e-06f64,
    1.2035140659893825e-07f64,
    4.5029695793209629e-09f64,
    1.0862939294794203e-10f64,
    1.5883441401039689e-12f64,
    1.2895813049708617e-14f64,
    5.0973075787523842e-17f64,
    7.9075044204715010e-20f64,
    3.2031736699482299e-23f64,
    1.2172039136849715e-27f64,
    3.8211801932398098e-01f64,
    2.9984222352714129e-01f64,
    1.8435315834012161e-01f64,
    8.8549110404553627e-02f64,
    3.3075688285138807e-02f64,
    9.5470897636467222e-03f64,
    2.1117580338036305e-03f64,
    3.5414585759848034e-04f64,
    4.4423542864951672e-05f64,
    4.0977948721629217e-06f64,
    2.7206848431497516e-07f64,
    1.2651794377097727e-08f64,
    3.9782370520555256e-10f64,
    8.0752771633903726e-12f64,
    9.9361770583955663e-14f64,
    6.7797068864966500e-16f64,
    2.2445504136542276e-18f64,
    2.8972188631031838e-21f64,
    9.6409358804016256e-25f64,
    2.9236797477388334e-29f64,
    3.7354869772403904e-01f64,
    2.9646910879859129e-01f64,
    1.8650753720919128e-01f64,
    9.2765483582315497e-02f64,
    3.6336180231103146e-02f64,
    1.1147849122436932e-02f64,
    2.6597718111442863e-03f64,
    4.8905337817380372e-04f64,
    6.8514755458217144e-05f64,
    7.2106204226087590e-06f64,
    5.6008898522734312e-07f64,
    3.1408112827615208e-08f64,
    1.2364837913810998e-09f64,
    3.2968179518363160e-11f64,
    5.6788001330617536e-13f64,
    5.9277568359646953e-15f64,
    3.4256354220559639e-17f64,
    9.5710836993052230e-20f64,
    1.0356140658899054e-22f64,
    2.8523956917266094e-26f64,
    6.9596835174689164e-31f64,
    3.6553011371946231e-01f64,
    2.9312288834281841e-01f64,
    1.8828943358993128e-01f64,
    9.6668454590768463e-02f64,
    3.9531361667655203e-02f64,
    1.2815980436689405e-02f64,
    3.2737594536686007e-03f64,
    6.5380594526582214e-04f64,
    1.0110048687004475e-04f64,
    1.1961012995742855e-05f64,
    1.0668304325616616e-06f64,
    7.0441602788046541e-08f64,
    3.3660916108090524e-09f64,
    1.1313130408204488e-10f64,
    2.5781296319278107e-12f64,
    3.7970360820092867e-14f64,
    3.3868542207148304e-16f64,
    1.6693353963053630e-18f64,
    3.9630311999855163e-21f64,
    3.6189621414024282e-24f64,
    8.3072697216188933e-28f64,
    1.6430501786349221e-32f64,
    3.5800580619470224e-01f64,
    2.8981803207491413e-01f64,
    1.8974838445154743e-01f64,
    1.0027705660218360e-01f64,
    4.2648028294714431e-02f64,
    1.4537458961986797e-02f64,
    3.9505207413261072e-03f64,
    8.5011717981626621e-04f64,
    1.4366505225061130e-04f64,
    1.8873197643040382e-05f64,
    1.9035156699551580e-06f64,
    1.4516963726858872e-07f64,
    8.2164449617053346e-09f64,
    3.3722125814057582e-10f64,
    9.7482259264857162e-12f64,
    1.9122727690869887e-13f64,
    2.4244888308603273e-15f64,
    1.8600707015402171e-17f64,
    7.8690901804095408e-20f64,
    1.5972254521067973e-22f64,
    1.2385719396147015e-25f64,
    2.3844925442657878e-29f64,
    3.8493292540923028e-34f64,
    3.5092708362373221e-01f64,
    2.8656491398635237e-01f64,
    1.9092680112285854e-01f64,
    1.0361036709912053e-01f64,
    4.5676424200182683e-02f64,
    1.6299393710703856e-02f64,
    4.6861642235208030e-03f64,
    1.0791731692543769e-03f64,
    1.9763609835222678e-04f64,
    2.8532184648493629e-05f64,
    3.2127873910852268e-06f64,
    2.7855833791199193e-07f64,
    1.8308111492627642e-08f64,
    8.9485743068727498e-10f64,
    3.1767219624927134e-11f64,
    7.9516119169429805e-13f64,
    1.3513354549314233e-14f64,
    1.4839987196129436e-16f64,
    9.8509302193979142e-19f64,
    3.5977098324746188e-21f64,
    6.2789532895984159e-24f64,
    4.1581179428373256e-27f64,
    6.7529122862707464e-31f64,
    8.9543109477517401e-36f64,
    3.4425170398488636e-01f64,
    2.8337082649988776e-01f64,
    1.9186108071620300e-01f64,
    1.0668704906340193e-01f64,
    4.8609625728486129e-02f64,
    1.8090108309699284e-02f64,
    5.4763217938706820e-03f64,
    1.3416561239574158e-03f64,
    2.6434526573379763e-04f64,
    4.1569703514690922e-05f64,
    5.1698753178987693e-06f64,
    5.0292197616776470e-07f64,
    3.7764519536704563e-08f64,
    2.1541215787780342e-09f64,
    9.1532734246208986e-11f64,
    2.8284578722532820e-12f64,
    6.1676573740107623e-14f64,
    9.1333964936011630e-16f64,
    8.7363436324031306e-18f64,
    5.0449656143360147e-20f64,
    1.5990188955830168e-22f64,
    2.4120891015221532e-25f64,
    1.3712561517848866e-28f64,
    1.8886829319168770e-32f64,
    2.0692150011539962e-37f64,
    3.3794281831211437e-01f64,
    2.8024073546098432e-01f64,
    1.9258253664230973e-01f64,
    1.0952505818221495e-01f64,
    5.1443013966369251e-02f64,
    1.9899155012384467e-02f64,
    6.3163306227402025e-03f64,
    1.6377836829106235e-03f64,
    3.4499769531939000e-04f64,
    5.8648633425770045e-05f64,
    7.9822676287387412e-06f64,
    8.6158159056191463e-07f64,
    7.2919305786010736e-08f64,
    4.7737982856558615e-09f64,
    2.3782159601959589e-10f64,
    8.8381931671955866e-12f64,
    2.3909835074532958e-13f64,
    4.5669756896372288e-15f64,
    5.9243423891952970e-17f64,
    4.9611413029243299e-19f64,
    2.5046563890060752e-21f64,
    6.9230353804790649e-24f64,
    9.0697778108407137e-27f64,
    4.4476138376213146e-30f64,
    5.2211960259687506e-34f64,
    4.7522163234420851e-39f64,
    3.3196811795916797e-01f64,
    2.7717784627086350e-01f64,
    1.9311817671143119e-01f64,
    1.1214146659976469e-01f64,
    5.4173829278283167e-02f64,
    2.1717283483241989e-02f64,
    7.2013828893609513e-03f64,
    1.9673577634472727e-03f64,
    4.4065031364698225e-04f64,
    8.0447056193944704e-05f64,
    1.1887976024248379e-05f64,
    1.4102595988863506e-06f64,
    1.3299289524291626e-07f64,
    9.8546372097326664e-09f64,
    5.6585279982455109e-10f64,
    2.4761135152376546e-11f64,
    8.0919962956343983e-13f64,
    1.9265276469394000e-14f64,
    3.2395644735553757e-16f64,
    3.6991112272006689e-18f64,
    2.7246881477213788e-20f64,
    1.2080980930422961e-22f64,
    2.9251392406309606e-25f64,
    3.3429672492020109e-28f64,
    1.4203821086453334e-31f64,
    1.4277608134851950e-35f64,
    1.0851136987196605e-40f64,
    3.2629914080686934e-01f64,
    2.7418403121591522e-01f64,
    1.9349135384672128e-01f64,
    1.1455236779916420e-01f64,
    5.6800798959136672e-02f64,
    2.3536380515071280e-02f64,
    8.1266456989688568e-03f64,
    2.3298181360809985e-03f64,
    5.5219822553578704e-04f64,
    1.0764284892273721e-04f64,
    1.7152583673214982e-05f64,
    2.2181151846596210e-06f64,
    2.3080391657036210e-07f64,
    1.9130906282643374e-08f64,
    1.2482138218979068e-09f64,
    6.3205006410821946e-11f64,
    2.4420298304472757e-12f64,
    7.0528726336758567e-14f64,
    1.4847846385026617e-15f64,
    2.2081547314362957e-17f64,
    2.2293012712626885e-19f64,
    1.4505724806862015e-21f64,
    5.6724748192019088e-24f64,
    1.2081232562612244e-26f64,
    1.2093961010872282e-29f64,
    4.4708121318609240e-33f64,
    3.8646806884574510e-37f64,
    2.4643207251964564e-42f64,
    3.2091070260471899e-01f64,
    2.7126015390759434e-01f64,
    1.9372231080136831e-01f64,
    1.1677283731866922e-01f64,
    5.9323828445470898e-02f64,
    2.5349392478457165e-02f64,
    9.0873545403086370e-03f64,
    2.7242971132887413e-03f64,
    6.8036819444262659e-04f64,
    1.4089949985735000e-04f64,
    2.4065325529694293e-05f64,
    3.3683591904564624e-06f64,
    3.8347678623247262e-07f64,
    3.5200066343932804e-08f64,
    2.5784329171251308e-09f64,
    1.4890103967540035e-10f64,
    6.6820102338953568e-12f64,
    2.2903165842743183e-13f64,
    5.8723917058983836e-15f64,
    1.0979718124159402e-16f64,
    1.4502656885515038e-18f64,
    1.2998534256895677e-20f64,
    7.5014959155146296e-23f64,
    2.5973065268494646e-25f64,
    4.8845679074858355e-28f64,
    4.2994974135956300e-31f64,
    1.3882300680633443e-34f64,
    1.0361288228040763e-38f64,
    5.5680352918588278e-44f64,
    3.1578042765949238e-01f64,
    2.6840631685517313e-01f64,
    1.9382863687099960e-01f64,
    1.1881693127749456e-01f64,
    6.1743746844779984e-02f64,
    2.7150238923080394e-02f64,
    1.0078883978552689e-02f64,
    3.1496727855870829e-03f64,
    8.2571803671126003e-04f64,
    1.8085360541258893e-04f64,
    3.2934475587777893e-05f64,
    4.9584218331236953e-06f64,
    6.1310664099141697e-07f64,
    6.1785017606854071e-08f64,
    5.0289859710017596e-09f64,
    3.2715763079828753e-10f64,
    1.6801084533762248e-11f64,
    6.7120850712329025e-13f64,
    2.0498413262850772e-14f64,
    4.6855314259072089e-16f64,
    7.8120487098049794e-18f64,
    9.2003980457468935e-20f64,
    7.3486452176672533e-22f64,
    3.7752824470360482e-24f64,
    1.1615602816842657e-26f64,
    1.9358169994612708e-29f64,
    1.5036325048276650e-32f64,
    4.2558250249436302e-36f64,
    2.7529603514345679e-40f64,
    1.2520351346822822e-45f64,
    3.1088835901770417e-01f64,
    2.6562205119893828e-01f64,
    1.9382565158599319e-01f64,
    1.2069770990611951e-01f64,
    6.4062098330091646e-02f64,
    2.8933723190107209e-02f64,
    1.1096799233588306e-02f64,
    3.6046190917707753e-03f64,
    9.8864073763996327e-04f64,
    2.2810430848881909e-04f64,
    4.4082312968263375e-05f64,
    7.0996778628839258e-06f64,
    9.4734617519597147e-07f64,
    1.0402046551304455e-07f64,
    9.3247728369681139e-09f64,
    6.7620297828389661e-10f64,
    3.9244392817292199e-11f64,
    1.8000072378314520e-12f64,
    6.4284832978960700e-14f64,
    1.7562292529450302e-15f64,
    3.5926337638018172e-17f64,
    5.3612722742496849e-19f64,
    5.6502164272837441e-21f64,
    4.0359700176457077e-23f64,
    1.8521346940051287e-25f64,
    5.0810055281854111e-28f64,
    7.5291225128713794e-31f64,
    5.1779710958942424e-34f64,
    1.2890636290348067e-37f64,
    7.2526085391619564e-42f64,
    2.8025709293189409e-47f64,
];
unsafe extern "C" fn segment_solve(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut u: *mut libc::c_double,
    mut w: *mut libc::c_double,
    mut breakpoint: libc::c_double,
    mut fn1: Option::<QuadratureFunction>,
    mut fn2: Option::<QuadratureFunction>,
) -> libc::c_int {
    let mut error: libc::c_int = 0;
    if x <= breakpoint {
        error = fn1.expect("non-null function pointer")(n, x, lower, u, w);
    } else {
        error = fn2.expect("non-null function pointer")(n, x, lower, u, w);
    }
    if error != 0 {
        error = CINTlrys_schmidt(n, x, lower, u, w);
    }
    return error;
}
#[no_mangle]
pub unsafe extern "C" fn CINTrys_roots(
    mut nroots: libc::c_int,
    mut x: libc::c_double,
    mut u: *mut libc::c_double,
    mut w: *mut libc::c_double,
) {
    if x <= 3e-7f64 {
        let mut off: libc::c_int = nroots * (nroots - 1 as libc::c_int)
            / 2 as libc::c_int;
        let mut i: libc::c_int = 0;
        i = 0 as libc::c_int;
        while i < nroots {
            *u
                .offset(
                    i as isize,
                ) = POLY_SMALLX_R0[(off + i) as usize]
                + POLY_SMALLX_R1[(off + i) as usize] * x;
            *w
                .offset(
                    i as isize,
                ) = POLY_SMALLX_W0[(off + i) as usize]
                + POLY_SMALLX_W1[(off + i) as usize] * x;
            i += 1;
            i;
        }
        return;
    } else if x >= (35 as libc::c_int + nroots * 5 as libc::c_int) as libc::c_double {
        let mut off_0: libc::c_int = nroots * (nroots - 1 as libc::c_int)
            / 2 as libc::c_int;
        let mut i_0: libc::c_int = 0;
        let mut rt: libc::c_double = 0.;
        let mut t: libc::c_double = sqrt(0.78539816339744827900f64 / x);
        i_0 = 0 as libc::c_int;
        while i_0 < nroots {
            rt = POLY_LARGEX_RT[(off_0 + i_0) as usize];
            *u.offset(i_0 as isize) = rt / (x - rt);
            *w.offset(i_0 as isize) = POLY_LARGEX_WW[(off_0 + i_0) as usize] * t;
            i_0 += 1;
            i_0;
        }
        return;
    }
    let mut err: libc::c_int = 0;
    match nroots {
        1 => {
            err = rys_root1(x, u, w);
        }
        2 => {
            err = rys_root2(x, u, w);
        }
        3 => {
            err = rys_root3(x, u, w);
        }
        4 => {
            err = rys_root4(x, u, w);
        }
        5 => {
            err = rys_root5(x, u, w);
        }
        6 | 7 => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                11 as libc::c_int as libc::c_double,
                Some(
                    CINTrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTrys_schmidt
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        8 => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                11 as libc::c_int as libc::c_double,
                Some(
                    CINTrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_schmidt
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        9 => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                10 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        10 | 11 => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                18 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        12 => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                22 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        _ => {
            err = segment_solve(
                nroots,
                x,
                0.0f64,
                u,
                w,
                50 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
    }
    if err != 0 {
        fprintf(
            stderr,
            b"rys_roots fails: nroots=%d x=%g\n\0" as *const u8 as *const libc::c_char,
            nroots,
            x,
        );
        exit(err);
    }
}
unsafe extern "C" fn segment_solve1(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut u: *mut libc::c_double,
    mut w: *mut libc::c_double,
    mut lower_bp1: libc::c_double,
    mut lower_bp2: libc::c_double,
    mut breakpoint: libc::c_double,
    mut fn1: Option::<QuadratureFunction>,
    mut fn2: Option::<QuadratureFunction>,
    mut fn3: Option::<QuadratureFunction>,
) -> libc::c_int {
    let mut error: libc::c_int = 0;
    if lower < lower_bp1 {
        if x <= breakpoint {
            error = fn1.expect("non-null function pointer")(n, x, lower, u, w);
        } else {
            error = fn2.expect("non-null function pointer")(n, x, lower, u, w);
        }
    } else if lower < lower_bp2 {
        error = fn3.expect("non-null function pointer")(n, x, lower, u, w);
    } else {
        return 1 as libc::c_int
    }
    if error != 0 {
        error = CINTlrys_schmidt(n, x, lower, u, w);
    }
    return error;
}
#[no_mangle]
pub unsafe extern "C" fn CINTsr_rys_roots(
    mut nroots: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut u: *mut libc::c_double,
    mut w: *mut libc::c_double,
) {
    let mut err: libc::c_int = 1 as libc::c_int;
    match nroots {
        1 => {
            err = CINTrys_schmidt(nroots, x, lower, u, w);
        }
        2 => {
            if lower < 0.99f64 {
                err = CINTrys_schmidt(nroots, x, lower, u, w);
            } else {
                err = CINTlrys_jacobi(nroots, x, lower, u, w);
            }
        }
        3 => {
            if lower < 0.93f64 {
                err = CINTrys_schmidt(nroots, x, lower, u, w);
            } else if lower < 0.97f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    10 as libc::c_int as libc::c_double,
                    Some(
                        CINTlrys_jacobi
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else {
                err = CINTlrys_jacobi(nroots, x, lower, u, w);
            }
        }
        4 => {
            if lower < 0.8f64 {
                err = CINTrys_schmidt(nroots, x, lower, u, w);
            } else if lower < 0.9f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    10 as libc::c_int as libc::c_double,
                    Some(
                        CINTlrys_jacobi
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else {
                err = CINTlrys_jacobi(nroots, x, lower, u, w);
            }
        }
        5 => {
            if lower < 0.4f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    50 as libc::c_int as libc::c_double,
                    Some(
                        CINTrys_schmidt
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else if lower < 0.8f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    10 as libc::c_int as libc::c_double,
                    Some(
                        CINTlrys_jacobi
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else {
                err = CINTlrys_jacobi(nroots, x, lower, u, w);
            }
        }
        6 => {
            if lower < 0.25f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    60 as libc::c_int as libc::c_double,
                    Some(
                        CINTrys_schmidt
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else if lower < 0.8f64 {
                err = segment_solve(
                    nroots,
                    x,
                    lower,
                    u,
                    w,
                    10 as libc::c_int as libc::c_double,
                    Some(
                        CINTlrys_jacobi
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                    Some(
                        CINTlrys_laguerre
                            as unsafe extern "C" fn(
                                libc::c_int,
                                libc::c_double,
                                libc::c_double,
                                *mut libc::c_double,
                                *mut libc::c_double,
                            ) -> libc::c_int,
                    ),
                );
            } else {
                err = CINTlrys_jacobi(nroots, x, lower, u, w);
            }
        }
        7 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.5f64,
                1.0f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        8 | 9 | 10 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.15f64,
                1.0f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        11 | 12 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.15f64,
                1.0f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        13 | 14 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.25f64,
                1.0f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        15 | 16 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.25f64,
                0.75f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        17 => {
            segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.25f64,
                0.65f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        18 => {
            segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.15f64,
                0.65f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        19 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.15f64,
                0.55f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        20 | 21 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.25f64,
                0.45f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        22 | 23 | 24 => {
            err = segment_solve1(
                nroots,
                x,
                lower,
                u,
                w,
                0.25f64,
                0.35f64,
                60 as libc::c_int as libc::c_double,
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_laguerre
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
                Some(
                    CINTlrys_jacobi
                        as unsafe extern "C" fn(
                            libc::c_int,
                            libc::c_double,
                            libc::c_double,
                            *mut libc::c_double,
                            *mut libc::c_double,
                        ) -> libc::c_int,
                ),
            );
        }
        _ => {
            fprintf(
                stderr,
                b"libcint SR-rys_roots does not support nroots=%d\n\0" as *const u8
                    as *const libc::c_char,
                nroots,
            );
            exit(1 as libc::c_int);
        }
    }
    if err != 0 {
        fprintf(
            stderr,
            b"sr_rys_roots fails: nroots=%d x=%.15g lower=%.15g\n\0" as *const u8
                as *const libc::c_char,
            nroots,
            x,
            lower,
        );
        exit(err);
    }
}
unsafe extern "C" fn rys_root1(
    mut X: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut Y: libc::c_double = 0.;
    let mut F1: libc::c_double = 0.;
    if X > 33.0f64 {
        *weights.offset(0 as libc::c_int as isize) = sqrt(0.78539816339744827900f64 / X);
        *roots.offset(0 as libc::c_int as isize) = 0.5E+00f64 / (X - 0.5E+00f64);
        return 0 as libc::c_int;
    } else if X < 3.0e-7f64 {
        *weights.offset(0 as libc::c_int as isize) = 1.0E+00f64 - X / 3.0E+00f64;
        *roots.offset(0 as libc::c_int as isize) = 0.5E+00f64 - X / 5.0E+00f64;
        return 0 as libc::c_int;
    }
    let mut E: libc::c_double = exp(-X);
    if X > 15.0f64 {
        Y = 1.0f64 / X;
        F1 = (((1.9623264149430E-01f64 * Y - 4.9695241464490E-01f64) * Y
            - 6.0156581186481E-05f64) * E + sqrt(0.78539816339744827900f64 / X) - E) * Y;
        F1 *= 0.5f64;
    } else if X > 10.0f64 {
        Y = 1.0f64 / X;
        F1 = ((((-1.8784686463512E-01f64 * Y + 2.2991849164985E-01f64) * Y
            - 4.9893752514047E-01f64) * Y - 2.1916512131607E-05f64) * E
            + sqrt(0.78539816339744827900f64 / X) - E) * Y;
        F1 *= 0.5f64;
    } else if X > 5.0f64 {
        Y = 1.0f64 / X;
        F1 = (((((((4.6897511375022E-01f64 * Y - 6.9955602298985E-01f64) * Y
            + 5.3689283271887E-01f64) * Y - 3.2883030418398E-01f64) * Y
            + 2.4645596956002E-01f64) * Y - 4.9984072848436E-01f64) * Y
            - 3.1501078774085E-06f64) * E + sqrt(0.78539816339744827900f64 / X) - E) * Y;
        F1 *= 0.5f64;
    } else if X > 3.0f64 {
        Y = X - 4.0E+00f64;
        F1 = ((((((((((-2.62453564772299E-11f64 * Y + 3.24031041623823E-10f64) * Y
            - 3.614965656163E-09f64) * Y + 3.760256799971E-08f64) * Y
            - 3.553558319675E-07f64) * Y + 3.022556449731E-06f64) * Y
            - 2.290098979647E-05f64) * Y + 1.526537461148E-04f64) * Y
            - 8.81947375894379E-04f64) * Y + 4.33207949514611E-03f64) * Y
            - 1.75257821619926E-02f64) * Y + 5.28406320615584E-02f64;
    } else if X > 1.0f64 {
        Y = X - 2.0E+00f64;
        F1 = ((((((((((-1.61702782425558E-10f64 * Y + 1.96215250865776E-09f64) * Y
            - 2.14234468198419E-08f64) * Y + 2.17216556336318E-07f64) * Y
            - 1.98850171329371E-06f64) * Y + 1.62429321438911E-05f64) * Y
            - 1.16740298039895E-04f64) * Y + 7.24888732052332E-04f64) * Y
            - 3.79490003707156E-03f64) * Y + 1.61723488664661E-02f64) * Y
            - 5.29428148329736E-02f64) * Y + 1.15702180856167E-01f64;
    } else {
        F1 = ((((((((-8.36313918003957E-08f64 * X + 1.21222603512827E-06f64) * X
            - 1.15662609053481E-05f64) * X + 9.25197374512647E-05f64) * X
            - 6.40994113129432E-04f64) * X + 3.78787044215009E-03f64) * X
            - 1.85185172458485E-02f64) * X + 7.14285713298222E-02f64) * X
            - 1.99999999997023E-01f64) * X + 3.33333333333318E-01f64;
    }
    let mut WW1: libc::c_double = 2.0f64 * X * F1 + E;
    *weights.offset(0 as libc::c_int as isize) = WW1;
    *roots.offset(0 as libc::c_int as isize) = F1 / (WW1 - F1);
    return 0 as libc::c_int;
}
unsafe extern "C" fn rys_root2(
    mut X: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut R12: libc::c_double = 0.;
    let mut R22: libc::c_double = 0.;
    let mut W22: libc::c_double = 0.;
    let mut RT1: libc::c_double = 0.;
    let mut RT2: libc::c_double = 0.;
    let mut WW1: libc::c_double = 0.;
    let mut WW2: libc::c_double = 0.;
    let mut F1: libc::c_double = 0.;
    let mut E: libc::c_double = 0.;
    let mut Y: libc::c_double = 0.;
    R12 = 2.75255128608411E-01f64;
    R22 = 2.72474487139158E+00f64;
    W22 = 9.17517095361369E-02f64;
    if X < 3.0e-7f64 {
        RT1 = 1.30693606237085E-01f64 - 2.90430236082028E-02f64 * X;
        RT2 = 2.86930639376291E+00f64 - 6.37623643058102E-01f64 * X;
        WW1 = 6.52145154862545E-01f64 - 1.22713621927067E-01f64 * X;
        WW2 = 3.47854845137453E-01f64 - 2.10619711404725E-01f64 * X;
    } else if X < 1.0f64 {
        F1 = ((((((((-8.36313918003957E-08f64 * X + 1.21222603512827E-06f64) * X
            - 1.15662609053481E-05f64) * X + 9.25197374512647E-05f64) * X
            - 6.40994113129432E-04f64) * X + 3.78787044215009E-03f64) * X
            - 1.85185172458485E-02f64) * X + 7.14285713298222E-02f64) * X
            - 1.99999999997023E-01f64) * X + 3.33333333333318E-01f64;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = (((((((-2.35234358048491E-09f64 * X + 2.49173650389842E-08f64) * X
            - 4.558315364581E-08f64) * X - 2.447252174587E-06f64) * X
            + 4.743292959463E-05f64) * X - 5.33184749432408E-04f64) * X
            + 4.44654947116579E-03f64) * X - 2.90430236084697E-02f64) * X
            + 1.30693606237085E-01f64;
        RT2 = (((((((-2.47404902329170E-08f64 * X + 2.36809910635906E-07f64) * X
            + 1.835367736310E-06f64) * X - 2.066168802076E-05f64) * X
            - 1.345693393936E-04f64) * X - 5.88154362858038E-05f64) * X
            + 5.32735082098139E-02f64) * X - 6.37623643056745E-01f64) * X
            + 2.86930639376289E+00f64;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 3.0f64 {
        Y = X - 2.0E+00f64;
        F1 = ((((((((((-1.61702782425558E-10f64 * Y + 1.96215250865776E-09f64) * Y
            - 2.14234468198419E-08f64) * Y + 2.17216556336318E-07f64) * Y
            - 1.98850171329371E-06f64) * Y + 1.62429321438911E-05f64) * Y
            - 1.16740298039895E-04f64) * Y + 7.24888732052332E-04f64) * Y
            - 3.79490003707156E-03f64) * Y + 1.61723488664661E-02f64) * Y
            - 5.29428148329736E-02f64) * Y + 1.15702180856167E-01f64;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = (((((((((-6.36859636616415E-12f64 * Y + 8.47417064776270E-11f64) * Y
            - 5.152207846962E-10f64) * Y - 3.846389873308E-10f64) * Y
            + 8.472253388380E-08f64) * Y - 1.85306035634293E-06f64) * Y
            + 2.47191693238413E-05f64) * Y - 2.49018321709815E-04f64) * Y
            + 2.19173220020161E-03f64) * Y - 1.63329339286794E-02f64) * Y
            + 8.68085688285261E-02f64;
        RT2 = (((((((((1.45331350488343E-10f64 * Y + 2.07111465297976E-09f64) * Y
            - 1.878920917404E-08f64) * Y - 1.725838516261E-07f64) * Y
            + 2.247389642339E-06f64) * Y + 9.76783813082564E-06f64) * Y
            - 1.93160765581969E-04f64) * Y - 1.58064140671893E-03f64) * Y
            + 4.85928174507904E-02f64) * Y - 4.30761584997596E-01f64) * Y
            + 1.80400974537950E+00f64;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 5.0f64 {
        Y = X - 4.0E+00f64;
        F1 = ((((((((((-2.62453564772299E-11f64 * Y + 3.24031041623823E-10f64) * Y
            - 3.614965656163E-09f64) * Y + 3.760256799971E-08f64) * Y
            - 3.553558319675E-07f64) * Y + 3.022556449731E-06f64) * Y
            - 2.290098979647E-05f64) * Y + 1.526537461148E-04f64) * Y
            - 8.81947375894379E-04f64) * Y + 4.33207949514611E-03f64) * Y
            - 1.75257821619926E-02f64) * Y + 5.28406320615584E-02f64;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = ((((((((-4.11560117487296E-12f64 * Y + 7.10910223886747E-11f64) * Y
            - 1.73508862390291E-09f64) * Y + 5.93066856324744E-08f64) * Y
            - 9.76085576741771E-07f64) * Y + 1.08484384385679E-05f64) * Y
            - 1.12608004981982E-04f64) * Y + 1.16210907653515E-03f64) * Y
            - 9.89572595720351E-03f64) * Y + 6.12589701086408E-02f64;
        RT2 = (((((((((-1.80555625241001E-10f64 * Y + 5.44072475994123E-10f64) * Y
            + 1.603498045240E-08f64) * Y - 1.497986283037E-07f64) * Y
            - 7.017002532106E-07f64) * Y + 1.85882653064034E-05f64) * Y
            - 2.04685420150802E-05f64) * Y - 2.49327728643089E-03f64) * Y
            + 3.56550690684281E-02f64) * Y - 2.60417417692375E-01f64) * Y
            + 1.12155283108289E+00f64;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 10 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = ((((((4.6897511375022E-01f64 / X - 6.9955602298985E-01f64) / X
            + 5.3689283271887E-01f64) / X - 3.2883030418398E-01f64) / X
            + 2.4645596956002E-01f64) / X - 4.9984072848436E-01f64) / X
            - 3.1501078774085E-06f64) * E + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        Y = X - 7.5E+00f64;
        RT1 = (((((((((((((-1.43632730148572E-16f64 * Y + 2.38198922570405E-16f64) * Y
            + 1.358319618800E-14f64) * Y - 7.064522786879E-14f64) * Y
            - 7.719300212748E-13f64) * Y + 7.802544789997E-12f64) * Y
            + 6.628721099436E-11f64) * Y - 1.775564159743E-09f64) * Y
            + 1.713828823990E-08f64) * Y - 1.497500187053E-07f64) * Y
            + 2.283485114279E-06f64) * Y - 3.76953869614706E-05f64) * Y
            + 4.74791204651451E-04f64) * Y - 4.60448960876139E-03f64) * Y
            + 3.72458587837249E-02f64;
        RT2 = ((((((((((((2.48791622798900E-14f64 * Y - 1.36113510175724E-13f64) * Y
            - 2.224334349799E-12f64) * Y + 4.190559455515E-11f64) * Y
            - 2.222722579924E-10f64) * Y - 2.624183464275E-09f64) * Y
            + 6.128153450169E-08f64) * Y - 4.383376014528E-07f64) * Y
            - 2.49952200232910E-06f64) * Y + 1.03236647888320E-04f64) * Y
            - 1.44614664924989E-03f64) * Y + 1.35094294917224E-02f64) * Y
            - 9.53478510453887E-02f64) * Y + 5.44765245686790E-01f64;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 15 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = (((-1.8784686463512E-01f64 / X + 2.2991849164985E-01f64) / X
            - 4.9893752514047E-01f64) / X - 2.1916512131607E-05f64) * E
            + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        RT1 = ((((-1.01041157064226E-05f64 * X + 1.19483054115173E-03f64) * X
            - 6.73760231824074E-02f64) * X + 1.25705571069895E+00f64) * X
            + (((-8.57609422987199E+03f64 / X + 5.91005939591842E+03f64) / X
                - 1.70807677109425E+03f64) / X + 2.64536689959503E+02f64) / X
            - 2.38570496490846E+01f64) * E + R12 / (X - R12);
        RT2 = (((3.39024225137123E-04f64 * X - 9.34976436343509E-02f64) * X
            - 4.22216483306320E+00f64) * X
            + (((-2.08457050986847E+03f64 / X - 1.04999071905664E+03f64) / X
                + 3.39891508992661E+02f64) / X - 1.56184800325063E+02f64) / X
            + 8.00839033297501E+00f64) * E + R22 / (X - R22);
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 33 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = ((1.9623264149430E-01f64 / X - 4.9695241464490E-01f64) / X
            - 6.0156581186481E-05f64) * E + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        RT1 = ((((-1.14906395546354E-06f64 * X + 1.76003409708332E-04f64) * X
            - 1.71984023644904E-02f64) * X - 1.37292644149838E-01f64) * X
            + (-4.75742064274859E+01f64 / X + 9.21005186542857E+00f64) / X
            - 2.31080873898939E-02f64) * E + R12 / (X - R12);
        RT2 = (((3.64921633404158E-04f64 * X - 9.71850973831558E-02f64) * X
            - 4.02886174850252E+00f64) * X
            + (-1.35831002139173E+02f64 / X - 8.66891724287962E+01f64) / X
            + 2.98011277766958E+00f64) * E + R22 / (X - R22);
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00f64 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    } else if X < 40 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        E = exp(-X);
        RT1 = (-8.78947307498880E-01f64 * X + 1.09243702330261E+01f64) * E
            + R12 / (X - R12);
        RT2 = (-9.28903924275977E+00f64 * X + 8.10642367843811E+01f64) * E
            + R22 / (X - R22);
        WW2 = (4.46857389308400E+00f64 * X - 7.79250653461045E+01f64) * E + W22 * WW1;
        WW1 = WW1 - WW2;
    } else {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        RT1 = R12 / (X - R12);
        RT2 = R22 / (X - R22);
        WW2 = W22 * WW1;
        WW1 = WW1 - WW2;
    }
    *roots.offset(0 as libc::c_int as isize) = RT1;
    *roots.offset(1 as libc::c_int as isize) = RT2;
    *weights.offset(0 as libc::c_int as isize) = WW1;
    *weights.offset(1 as libc::c_int as isize) = WW2;
    return 0 as libc::c_int;
}
unsafe extern "C" fn rys_root3(
    mut X: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut R13: libc::c_double = 0.;
    let mut R23: libc::c_double = 0.;
    let mut W23: libc::c_double = 0.;
    let mut R33: libc::c_double = 0.;
    let mut W33: libc::c_double = 0.;
    let mut RT1: libc::c_double = 0.;
    let mut RT2: libc::c_double = 0.;
    let mut RT3: libc::c_double = 0.;
    let mut WW1: libc::c_double = 0.;
    let mut WW2: libc::c_double = 0.;
    let mut WW3: libc::c_double = 0.;
    let mut F1: libc::c_double = 0.;
    let mut F2: libc::c_double = 0.;
    let mut E: libc::c_double = 0.;
    let mut T1: libc::c_double = 0.;
    let mut T2: libc::c_double = 0.;
    let mut T3: libc::c_double = 0.;
    let mut A1: libc::c_double = 0.;
    let mut A2: libc::c_double = 0.;
    let mut Y: libc::c_double = 0.;
    R13 = 1.90163509193487E-01f64;
    R23 = 1.78449274854325E+00f64;
    W23 = 1.77231492083829E-01f64;
    R33 = 5.52534374226326E+00f64;
    W33 = 5.11156880411248E-03f64;
    if X < 3.0e-7f64 {
        RT1 = 6.03769246832797E-02f64 - 9.28875764357368E-03f64 * X;
        RT2 = 7.76823355931043E-01f64 - 1.19511285527878E-01f64 * X;
        RT3 = 6.66279971938567E+00f64 - 1.02504611068957E+00f64 * X;
        WW1 = 4.67913934572691E-01f64 - 5.64876917232519E-02f64 * X;
        WW2 = 3.60761573048137E-01f64 - 1.49077186455208E-01f64 * X;
        WW3 = 1.71324492379169E-01f64 - 1.27768455150979E-01f64 * X;
    } else if X < 1.0f64 {
        RT1 = ((((((-5.10186691538870E-10f64 * X + 2.40134415703450E-08f64) * X
            - 5.01081057744427E-07f64) * X + 7.58291285499256E-06f64) * X
            - 9.55085533670919E-05f64) * X + 1.02893039315878E-03f64) * X
            - 9.28875764374337E-03f64) * X + 6.03769246832810E-02f64;
        RT2 = ((((((-1.29646524960555E-08f64 * X + 7.74602292865683E-08f64) * X
            + 1.56022811158727E-06f64) * X - 1.58051990661661E-05f64) * X
            - 3.30447806384059E-04f64) * X + 9.74266885190267E-03f64) * X
            - 1.19511285526388E-01f64) * X + 7.76823355931033E-01f64;
        RT3 = ((((((-9.28536484109606E-09f64 * X - 3.02786290067014E-07f64) * X
            - 2.50734477064200E-06f64) * X - 7.32728109752881E-06f64) * X
            + 2.44217481700129E-04f64) * X + 4.94758452357327E-02f64) * X
            - 1.02504611065774E+00f64) * X + 6.66279971938553E+00f64;
        F2 = ((((((((-7.60911486098850E-08f64 * X + 1.09552870123182E-06f64) * X
            - 1.03463270693454E-05f64) * X + 8.16324851790106E-05f64) * X
            - 5.55526624875562E-04f64) * X + 3.20512054753924E-03f64) * X
            - 1.51515139838540E-02f64) * X + 5.55555554649585E-02f64) * X
            - 1.42857142854412E-01f64) * X + 1.99999999999986E-01f64;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00f64;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 3.0f64 {
        Y = X - 2.0E+00f64;
        RT1 = ((((((((1.44687969563318E-12f64 * Y + 4.85300143926755E-12f64) * Y
            - 6.55098264095516E-10f64) * Y + 1.56592951656828E-08f64) * Y
            - 2.60122498274734E-07f64) * Y + 3.86118485517386E-06f64) * Y
            - 5.13430986707889E-05f64) * Y + 6.03194524398109E-04f64) * Y
            - 6.11219349825090E-03f64) * Y + 4.52578254679079E-02f64;
        RT2 = (((((((6.95964248788138E-10f64 * Y - 5.35281831445517E-09f64) * Y
            - 6.745205954533E-08f64) * Y + 1.502366784525E-06f64) * Y
            + 9.923326947376E-07f64) * Y - 3.89147469249594E-04f64) * Y
            + 7.51549330892401E-03f64) * Y - 8.48778120363400E-02f64) * Y
            + 5.73928229597613E-01f64;
        RT3 = ((((((((-2.81496588401439E-10f64 * Y + 3.61058041895031E-09f64) * Y
            + 4.53631789436255E-08f64) * Y - 1.40971837780847E-07f64) * Y
            - 6.05865557561067E-06f64) * Y - 5.15964042227127E-05f64) * Y
            + 3.34761560498171E-05f64) * Y + 5.04871005319119E-02f64) * Y
            - 8.24708946991557E-01f64) * Y + 4.81234667357205E+00f64;
        F2 = ((((((((((-1.48044231072140E-10f64 * Y + 1.78157031325097E-09f64) * Y
            - 1.92514145088973E-08f64) * Y + 1.92804632038796E-07f64) * Y
            - 1.73806555021045E-06f64) * Y + 1.39195169625425E-05f64) * Y
            - 9.74574633246452E-05f64) * Y + 5.83701488646511E-04f64) * Y
            - 2.89955494844975E-03f64) * Y + 1.13847001113810E-02f64) * Y
            - 3.23446977320647E-02f64) * Y + 5.29428148329709E-02f64;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00f64;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 5.0f64 {
        Y = X - 4.0E+00f64;
        RT1 = (((((((1.44265709189601E-11f64 * Y - 4.66622033006074E-10f64) * Y
            + 7.649155832025E-09f64) * Y - 1.229940017368E-07f64) * Y
            + 2.026002142457E-06f64) * Y - 2.87048671521677E-05f64) * Y
            + 3.70326938096287E-04f64) * Y - 4.21006346373634E-03f64) * Y
            + 3.50898470729044E-02f64;
        RT2 = ((((((((-2.65526039155651E-11f64 * Y + 1.97549041402552E-10f64) * Y
            + 2.15971131403034E-09f64) * Y - 7.95045680685193E-08f64) * Y
            + 5.15021914287057E-07f64) * Y + 1.11788717230514E-05f64) * Y
            - 3.33739312603632E-04f64) * Y + 5.30601428208358E-03f64) * Y
            - 5.93483267268959E-02f64) * Y + 4.31180523260239E-01f64;
        RT3 = ((((((((-3.92833750584041E-10f64 * Y - 4.16423229782280E-09f64) * Y
            + 4.42413039572867E-08f64) * Y + 6.40574545989551E-07f64) * Y
            - 3.05512456576552E-06f64) * Y - 1.05296443527943E-04f64) * Y
            - 6.14120969315617E-04f64) * Y + 4.89665802767005E-02f64) * Y
            - 6.24498381002855E-01f64) * Y + 3.36412312243724E+00f64;
        F2 = ((((((((((-2.36788772599074E-11f64 * Y + 2.89147476459092E-10f64) * Y
            - 3.18111322308846E-09f64) * Y + 3.25336816562485E-08f64) * Y
            - 3.00873821471489E-07f64) * Y + 2.48749160874431E-06f64) * Y
            - 1.81353179793672E-05f64) * Y + 1.14504948737066E-04f64) * Y
            - 6.10614987696677E-04f64) * Y + 2.64584212770942E-03f64) * Y
            - 8.66415899015349E-03f64) * Y + 1.75257821619922E-02f64;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00f64;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 10 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = ((((((4.6897511375022E-01f64 / X - 6.9955602298985E-01f64) / X
            + 5.3689283271887E-01f64) / X - 3.2883030418398E-01f64) / X
            + 2.4645596956002E-01f64) / X - 4.9984072848436E-01f64) / X
            - 3.1501078774085E-06f64) * E + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        Y = X - 7.5E+00f64;
        RT1 = (((((((((((5.74429401360115E-16f64 * Y + 7.11884203790984E-16f64) * Y
            - 6.736701449826E-14f64) * Y - 6.264613873998E-13f64) * Y
            + 1.315418927040E-11f64) * Y - 4.23879635610964E-11f64) * Y
            + 1.39032379769474E-09f64) * Y - 4.65449552856856E-08f64) * Y
            + 7.34609900170759E-07f64) * Y - 1.08656008854077E-05f64) * Y
            + 1.77930381549953E-04f64) * Y - 2.39864911618015E-03f64) * Y
            + 2.39112249488821E-02f64;
        RT2 = (((((((((((1.13464096209120E-14f64 * Y + 6.99375313934242E-15f64) * Y
            - 8.595618132088E-13f64) * Y - 5.293620408757E-12f64) * Y
            - 2.492175211635E-11f64) * Y + 2.73681574882729E-09f64) * Y
            - 1.06656985608482E-08f64) * Y - 4.40252529648056E-07f64) * Y
            + 9.68100917793911E-06f64) * Y - 1.68211091755327E-04f64) * Y
            + 2.69443611274173E-03f64) * Y - 3.23845035189063E-02f64) * Y
            + 2.75969447451882E-01f64;
        RT3 = ((((((((((((6.66339416996191E-15f64 * Y + 1.84955640200794E-13f64) * Y
            - 1.985141104444E-12f64) * Y - 2.309293727603E-11f64) * Y
            + 3.917984522103E-10f64) * Y + 1.663165279876E-09f64) * Y
            - 6.205591993923E-08f64) * Y + 8.769581622041E-09f64) * Y
            + 8.97224398620038E-06f64) * Y - 3.14232666170796E-05f64) * Y
            - 1.83917335649633E-03f64) * Y + 3.51246831672571E-02f64) * Y
            - 3.22335051270860E-01f64) * Y + 1.73582831755430E+00f64;
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 15 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = (((-1.8784686463512E-01f64 / X + 2.2991849164985E-01f64) / X
            - 4.9893752514047E-01f64) / X - 2.1916512131607E-05f64) * E
            + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        Y = X - 12.5E+00f64;
        RT1 = (((((((((((4.42133001283090E-16f64 * Y - 2.77189767070441E-15f64) * Y
            - 4.084026087887E-14f64) * Y + 5.379885121517E-13f64) * Y
            + 1.882093066702E-12f64) * Y - 8.67286219861085E-11f64) * Y
            + 7.11372337079797E-10f64) * Y - 3.55578027040563E-09f64) * Y
            + 1.29454702851936E-07f64) * Y - 4.14222202791434E-06f64) * Y
            + 8.04427643593792E-05f64) * Y - 1.18587782909876E-03f64) * Y
            + 1.53435577063174E-02f64;
        RT2 = (((((((((((6.85146742119357E-15f64 * Y - 1.08257654410279E-14f64) * Y
            - 8.579165965128E-13f64) * Y + 6.642452485783E-12f64) * Y
            + 4.798806828724E-11f64) * Y - 1.13413908163831E-09f64) * Y
            + 7.08558457182751E-09f64) * Y - 5.59678576054633E-08f64) * Y
            + 2.51020389884249E-06f64) * Y - 6.63678914608681E-05f64) * Y
            + 1.11888323089714E-03f64) * Y - 1.45361636398178E-02f64) * Y
            + 1.65077877454402E-01f64;
        RT3 = ((((((((((((3.20622388697743E-15f64 * Y - 2.73458804864628E-14f64) * Y
            - 3.157134329361E-13f64) * Y + 8.654129268056E-12f64) * Y
            - 5.625235879301E-11f64) * Y - 7.718080513708E-10f64) * Y
            + 2.064664199164E-08f64) * Y - 1.567725007761E-07f64) * Y
            - 1.57938204115055E-06f64) * Y + 6.27436306915967E-05f64) * Y
            - 1.01308723606946E-03f64) * Y + 1.13901881430697E-02f64) * Y
            - 1.01449652899450E-01f64) * Y + 7.77203937334739E-01f64;
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 33 as libc::c_int as libc::c_double {
        E = exp(-X);
        WW1 = ((1.9623264149430E-01f64 / X - 4.9695241464490E-01f64) / X
            - 6.0156581186481E-05f64) * E + sqrt(0.78539816339744827900f64 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        if X < 20 as libc::c_int as libc::c_double {
            RT1 = ((((((-2.43270989903742E-06f64 * X + 3.57901398988359E-04f64) * X
                - 2.34112415981143E-02f64) * X + 7.81425144913975E-01f64) * X
                - 1.73209218219175E+01f64) * X + 2.43517435690398E+02f64) * X
                + (-1.97611541576986E+04f64 / X + 9.82441363463929E+03f64) / X
                - 2.07970687843258E+03f64) * E + R13 / (X - R13);
            RT2 = (((((-2.62627010965435E-04f64 * X + 3.49187925428138E-02f64) * X
                - 3.09337618731880E+00f64) * X + 1.07037141010778E+02f64) * X
                - 2.36659637247087E+03f64) * X
                + ((-2.91669113681020E+06f64 / X + 1.41129505262758E+06f64) / X
                    - 2.91532335433779E+05f64) / X + 3.35202872835409E+04f64) * E
                + R23 / (X - R23);
            RT3 = (((((9.31856404738601E-05f64 * X - 2.87029400759565E-02f64) * X
                - 7.83503697918455E-01f64) * X - 1.84338896480695E+01f64) * X
                + 4.04996712650414E+02f64) * X
                + (-1.89829509315154E+05f64 / X + 5.11498390849158E+04f64) / X
                - 6.88145821789955E+03f64) * E + R33 / (X - R33);
        } else {
            RT1 = ((((-4.97561537069643E-04f64 * X - 5.00929599665316E-02f64) * X
                + 1.31099142238996E+00f64) * X - 1.88336409225481E+01f64) * X
                - 6.60344754467191E+02f64 / X + 1.64931462413877E+02f64) * E
                + R13 / (X - R13);
            RT2 = ((((-4.48218898474906E-03f64 * X - 5.17373211334924E-01f64) * X
                + 1.13691058739678E+01f64) * X - 1.65426392885291E+02f64) * X
                - 6.30909125686731E+03f64 / X + 1.52231757709236E+03f64) * E
                + R23 / (X - R23);
            RT3 = ((((-1.38368602394293E-02f64 * X - 1.77293428863008E+00f64) * X
                + 1.73639054044562E+01f64) * X - 3.57615122086961E+02f64) * X
                - 1.45734701095912E+04f64 / X + 2.69831813951849E+03f64) * E
                + R33 / (X - R33);
        }
        T1 = RT1 / (RT1 + 1.0E+00f64);
        T2 = RT2 / (RT2 + 1.0E+00f64);
        T3 = RT3 / (RT3 + 1.0E+00f64);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    } else if X < 47 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        E = exp(-X);
        RT1 = ((-7.39058467995275E+00f64 * X + 3.21318352526305E+02f64) * X
            - 3.99433696473658E+03f64) * E + R13 / (X - R13);
        RT2 = ((-7.38726243906513E+01f64 * X + 3.13569966333873E+03f64) * X
            - 3.86862867311321E+04f64) * E + R23 / (X - R23);
        RT3 = ((-2.63750565461336E+02f64 * X + 1.04412168692352E+04f64) * X
            - 1.28094577915394E+05f64) * E + R33 / (X - R33);
        WW3 = (((1.52258947224714E-01f64 * X - 8.30661900042651E+00f64) * X
            + 1.92977367967984E+02f64) * X - 1.67787926005344E+03f64) * E + W33 * WW1;
        WW2 = ((6.15072615497811E+01f64 * X - 2.91980647450269E+03f64) * X
            + 3.80794303087338E+04f64) * E + W23 * WW1;
        WW1 = WW1 - WW2 - WW3;
    } else {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        RT1 = R13 / (X - R13);
        RT2 = R23 / (X - R23);
        RT3 = R33 / (X - R33);
        WW2 = W23 * WW1;
        WW3 = W33 * WW1;
        WW1 = WW1 - WW2 - WW3;
    }
    *roots.offset(0 as libc::c_int as isize) = RT1;
    *roots.offset(1 as libc::c_int as isize) = RT2;
    *roots.offset(2 as libc::c_int as isize) = RT3;
    *weights.offset(0 as libc::c_int as isize) = WW1;
    *weights.offset(1 as libc::c_int as isize) = WW2;
    *weights.offset(2 as libc::c_int as isize) = WW3;
    return 0 as libc::c_int;
}
unsafe extern "C" fn rys_root4(
    mut X: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut R14: libc::c_double = 0.;
    let mut R24: libc::c_double = 0.;
    let mut W24: libc::c_double = 0.;
    let mut R34: libc::c_double = 0.;
    let mut W34: libc::c_double = 0.;
    let mut R44: libc::c_double = 0.;
    let mut W44: libc::c_double = 0.;
    let mut RT1: libc::c_double = 0.;
    let mut RT2: libc::c_double = 0.;
    let mut RT3: libc::c_double = 0.;
    let mut RT4: libc::c_double = 0.;
    let mut WW1: libc::c_double = 0.;
    let mut WW2: libc::c_double = 0.;
    let mut WW3: libc::c_double = 0.;
    let mut WW4: libc::c_double = 0.;
    let mut Y: libc::c_double = 0.;
    let mut E: libc::c_double = 0.;
    R14 = 1.45303521503316E-01f64;
    R24 = 1.33909728812636E+00f64;
    W24 = 2.34479815323517E-01f64;
    R34 = 3.92696350135829E+00f64;
    W34 = 1.92704402415764E-02f64;
    R44 = 8.58863568901199E+00f64;
    W44 = 2.25229076750736E-04f64;
    if X <= 3.0E-7f64 {
        RT1 = 3.48198973061471E-02f64 - 4.09645850660395E-03f64 * X;
        RT2 = 3.81567185080042E-01f64 - 4.48902570656719E-02f64 * X;
        RT3 = 1.73730726945891E+00f64 - 2.04389090547327E-01f64 * X;
        RT4 = 1.18463056481549E+01f64 - 1.39368301742312E+00f64 * X;
        WW1 = 3.62683783378362E-01f64 - 3.13844305713928E-02f64 * X;
        WW2 = 3.13706645877886E-01f64 - 8.98046242557724E-02f64 * X;
        WW3 = 2.22381034453372E-01f64 - 1.29314370958973E-01f64 * X;
        WW4 = 1.01228536290376E-01f64 - 8.28299075414321E-02f64 * X;
    } else if X <= 1.0f64 {
        RT1 = ((((((-1.95309614628539E-10f64 * X + 5.19765728707592E-09f64) * X
            - 1.01756452250573E-07f64) * X + 1.72365935872131E-06f64) * X
            - 2.61203523522184E-05f64) * X + 3.52921308769880E-04f64) * X
            - 4.09645850658433E-03f64) * X + 3.48198973061469E-02f64;
        RT2 = (((((-1.89554881382342E-08f64 * X + 3.07583114342365E-07f64) * X
            + 1.270981734393E-06f64) * X - 1.417298563884E-04f64) * X
            + 3.226979163176E-03f64) * X - 4.48902570678178E-02f64) * X
            + 3.81567185080039E-01f64;
        RT3 = ((((((1.77280535300416E-09f64 * X + 3.36524958870615E-08f64) * X
            - 2.58341529013893E-07f64) * X - 1.13644895662320E-05f64) * X
            - 7.91549618884063E-05f64) * X + 1.03825827346828E-02f64) * X
            - 2.04389090525137E-01f64) * X + 1.73730726945889E+00f64;
        RT4 = (((((-5.61188882415248E-08f64 * X - 2.49480733072460E-07f64) * X
            + 3.428685057114E-06f64) * X + 1.679007454539E-04f64) * X
            + 4.722855585715E-02f64) * X - 1.39368301737828E+00f64) * X
            + 1.18463056481543E+01f64;
        WW1 = ((((((-1.14649303201279E-08f64 * X + 1.88015570196787E-07f64) * X
            - 2.33305875372323E-06f64) * X + 2.68880044371597E-05f64) * X
            - 2.94268428977387E-04f64) * X + 3.06548909776613E-03f64) * X
            - 3.13844305680096E-02f64) * X + 3.62683783378335E-01f64;
        WW2 = ((((((((-4.11720483772634E-09f64 * X + 6.54963481852134E-08f64) * X
            - 7.20045285129626E-07f64) * X + 6.93779646721723E-06f64) * X
            - 6.05367572016373E-05f64) * X + 4.74241566251899E-04f64) * X
            - 3.26956188125316E-03f64) * X + 1.91883866626681E-02f64) * X
            - 8.98046242565811E-02f64) * X + 3.13706645877886E-01f64;
        WW3 = ((((((((-3.41688436990215E-08f64 * X + 5.07238960340773E-07f64) * X
            - 5.01675628408220E-06f64) * X + 4.20363420922845E-05f64) * X
            - 3.08040221166823E-04f64) * X + 1.94431864731239E-03f64) * X
            - 1.02477820460278E-02f64) * X + 4.28670143840073E-02f64) * X
            - 1.29314370962569E-01f64) * X + 2.22381034453369E-01f64;
        WW4 = (((((((((4.99660550769508E-09f64 * X - 7.94585963310120E-08f64) * X
            + 8.359072409485E-07f64) * X - 7.422369210610E-06f64) * X
            + 5.763374308160E-05f64) * X - 3.86645606718233E-04f64) * X
            + 2.18417516259781E-03f64) * X - 9.99791027771119E-03f64) * X
            + 3.48791097377370E-02f64) * X - 8.28299075413889E-02f64) * X
            + 1.01228536290376E-01f64;
    } else if X <= 5 as libc::c_int as libc::c_double {
        Y = X - 3.0E+00f64;
        RT1 = (((((((((-1.48570633747284E-15f64 * Y - 1.33273068108777E-13f64) * Y
            + 4.068543696670E-12f64) * Y - 9.163164161821E-11f64) * Y
            + 2.046819017845E-09f64) * Y - 4.03076426299031E-08f64) * Y
            + 7.29407420660149E-07f64) * Y - 1.23118059980833E-05f64) * Y
            + 1.88796581246938E-04f64) * Y - 2.53262912046853E-03f64) * Y
            + 2.51198234505021E-02f64;
        RT2 = (((((((((1.35830583483312E-13f64 * Y - 2.29772605964836E-12f64) * Y
            - 3.821500128045E-12f64) * Y + 6.844424214735E-10f64) * Y
            - 1.048063352259E-08f64) * Y + 1.50083186233363E-08f64) * Y
            + 3.48848942324454E-06f64) * Y - 1.08694174399193E-04f64) * Y
            + 2.08048885251999E-03f64) * Y - 2.91205805373793E-02f64) * Y
            + 2.72276489515713E-01f64;
        RT3 = (((((((((5.02799392850289E-13f64 * Y + 1.07461812944084E-11f64) * Y
            - 1.482277886411E-10f64) * Y - 2.153585661215E-09f64) * Y
            + 3.654087802817E-08f64) * Y + 5.15929575830120E-07f64) * Y
            - 9.52388379435709E-06f64) * Y - 2.16552440036426E-04f64) * Y
            + 9.03551469568320E-03f64) * Y - 1.45505469175613E-01f64) * Y
            + 1.21449092319186E+00f64;
        RT4 = (((((((((-1.08510370291979E-12f64 * Y + 6.41492397277798E-11f64) * Y
            + 7.542387436125E-10f64) * Y - 2.213111836647E-09f64) * Y
            - 1.448228963549E-07f64) * Y - 1.95670833237101E-06f64) * Y
            - 1.07481314670844E-05f64) * Y + 1.49335941252765E-04f64) * Y
            + 4.87791531990593E-02f64) * Y - 1.10559909038653E+00f64) * Y
            + 8.09502028611780E+00f64;
        WW1 = ((((((((((-4.65801912689961E-14f64 * Y + 7.58669507106800E-13f64) * Y
            - 1.186387548048E-11f64) * Y + 1.862334710665E-10f64) * Y
            - 2.799399389539E-09f64) * Y + 4.148972684255E-08f64) * Y
            - 5.933568079600E-07f64) * Y + 8.168349266115E-06f64) * Y
            - 1.08989176177409E-04f64) * Y + 1.41357961729531E-03f64) * Y
            - 1.87588361833659E-02f64) * Y + 2.89898651436026E-01f64;
        WW2 = ((((((((((((-1.46345073267549E-14f64 * Y + 2.25644205432182E-13f64) * Y
            - 3.116258693847E-12f64) * Y + 4.321908756610E-11f64) * Y
            - 5.673270062669E-10f64) * Y + 7.006295962960E-09f64) * Y
            - 8.120186517000E-08f64) * Y + 8.775294645770E-07f64) * Y
            - 8.77829235749024E-06f64) * Y + 8.04372147732379E-05f64) * Y
            - 6.64149238804153E-04f64) * Y + 4.81181506827225E-03f64) * Y
            - 2.88982669486183E-02f64) * Y + 1.56247249979288E-01f64;
        WW3 = (((((((((((((9.06812118895365E-15f64 * Y - 1.40541322766087E-13f64) * Y
            + 1.919270015269E-12f64) * Y - 2.605135739010E-11f64) * Y
            + 3.299685839012E-10f64) * Y - 3.86354139348735E-09f64) * Y
            + 4.16265847927498E-08f64) * Y - 4.09462835471470E-07f64) * Y
            + 3.64018881086111E-06f64) * Y - 2.88665153269386E-05f64) * Y
            + 2.00515819789028E-04f64) * Y - 1.18791896897934E-03f64) * Y
            + 5.75223633388589E-03f64) * Y - 2.09400418772687E-02f64) * Y
            + 4.85368861938873E-02f64;
        WW4 = ((((((((((((((-9.74835552342257E-16f64 * Y + 1.57857099317175E-14f64) * Y
            - 2.249993780112E-13f64) * Y + 3.173422008953E-12f64) * Y
            - 4.161159459680E-11f64) * Y + 5.021343560166E-10f64) * Y
            - 5.545047534808E-09f64) * Y + 5.554146993491E-08f64) * Y
            - 4.99048696190133E-07f64) * Y + 3.96650392371311E-06f64) * Y
            - 2.73816413291214E-05f64) * Y + 1.60106988333186E-04f64) * Y
            - 7.64560567879592E-04f64) * Y + 2.81330044426892E-03f64) * Y
            - 7.16227030134947E-03f64) * Y + 9.66077262223353E-03f64;
    } else if X <= 10.0f64 {
        Y = X - 7.5E+00f64;
        RT1 = (((((((((4.64217329776215E-15f64 * Y - 6.27892383644164E-15f64) * Y
            + 3.462236347446E-13f64) * Y - 2.927229355350E-11f64) * Y
            + 5.090355371676E-10f64) * Y - 9.97272656345253E-09f64) * Y
            + 2.37835295639281E-07f64) * Y - 4.60301761310921E-06f64) * Y
            + 8.42824204233222E-05f64) * Y - 1.37983082233081E-03f64) * Y
            + 1.66630865869375E-02f64;
        RT2 = (((((((((2.93981127919047E-14f64 * Y + 8.47635639065744E-13f64) * Y
            - 1.446314544774E-11f64) * Y - 6.149155555753E-12f64) * Y
            + 8.484275604612E-10f64) * Y - 6.10898827887652E-08f64) * Y
            + 2.39156093611106E-06f64) * Y - 5.35837089462592E-05f64) * Y
            + 1.00967602595557E-03f64) * Y - 1.57769317127372E-02f64) * Y
            + 1.74853819464285E-01f64;
        RT3 = ((((((((((2.93523563363000E-14f64 * Y - 6.40041776667020E-14f64) * Y
            - 2.695740446312E-12f64) * Y + 1.027082960169E-10f64) * Y
            - 5.822038656780E-10f64) * Y - 3.159991002539E-08f64) * Y
            + 4.327249251331E-07f64) * Y + 4.856768455119E-06f64) * Y
            - 2.54617989427762E-04f64) * Y + 5.54843378106589E-03f64) * Y
            - 7.95013029486684E-02f64) * Y + 7.20206142703162E-01f64;
        RT4 = (((((((((((-1.62212382394553E-14f64 * Y + 7.68943641360593E-13f64) * Y
            + 5.764015756615E-12f64) * Y - 1.380635298784E-10f64) * Y
            - 1.476849808675E-09f64) * Y + 1.84347052385605E-08f64) * Y
            + 3.34382940759405E-07f64) * Y - 1.39428366421645E-06f64) * Y
            - 7.50249313713996E-05f64) * Y - 6.26495899187507E-04f64) * Y
            + 4.69716410901162E-02f64) * Y - 6.66871297428209E-01f64) * Y
            + 4.11207530217806E+00f64;
        WW1 = ((((((((((-1.65995045235997E-15f64 * Y + 6.91838935879598E-14f64) * Y
            - 9.131223418888E-13f64) * Y + 1.403341829454E-11f64) * Y
            - 3.672235069444E-10f64) * Y + 6.366962546990E-09f64) * Y
            - 1.039220021671E-07f64) * Y + 1.959098751715E-06f64) * Y
            - 3.33474893152939E-05f64) * Y + 5.72164211151013E-04f64) * Y
            - 1.05583210553392E-02f64) * Y + 2.26696066029591E-01f64;
        WW2 = ((((((((((((-3.57248951192047E-16f64 * Y + 6.25708409149331E-15f64) * Y
            - 9.657033089714E-14f64) * Y + 1.507864898748E-12f64) * Y
            - 2.332522256110E-11f64) * Y + 3.428545616603E-10f64) * Y
            - 4.698730937661E-09f64) * Y + 6.219977635130E-08f64) * Y
            - 7.83008889613661E-07f64) * Y + 9.08621687041567E-06f64) * Y
            - 9.86368311253873E-05f64) * Y + 9.69632496710088E-04f64) * Y
            - 8.14594214284187E-03f64) * Y + 8.50218447733457E-02f64;
        WW3 = (((((((((((((1.64742458534277E-16f64 * Y - 2.68512265928410E-15f64) * Y
            + 3.788890667676E-14f64) * Y - 5.508918529823E-13f64) * Y
            + 7.555896810069E-12f64) * Y - 9.69039768312637E-11f64) * Y
            + 1.16034263529672E-09f64) * Y - 1.28771698573873E-08f64) * Y
            + 1.31949431805798E-07f64) * Y - 1.23673915616005E-06f64) * Y
            + 1.04189803544936E-05f64) * Y - 7.79566003744742E-05f64) * Y
            + 5.03162624754434E-04f64) * Y - 2.55138844587555E-03f64) * Y
            + 1.13250730954014E-02f64;
        WW4 = ((((((((((((((-1.55714130075679E-17f64 * Y + 2.57193722698891E-16f64) * Y
            - 3.626606654097E-15f64) * Y + 5.234734676175E-14f64) * Y
            - 7.067105402134E-13f64) * Y + 8.793512664890E-12f64) * Y
            - 1.006088923498E-10f64) * Y + 1.050565098393E-09f64) * Y
            - 9.91517881772662E-09f64) * Y + 8.35835975882941E-08f64) * Y
            - 6.19785782240693E-07f64) * Y + 3.95841149373135E-06f64) * Y
            - 2.11366761402403E-05f64) * Y + 9.00474771229507E-05f64) * Y
            - 2.78777909813289E-04f64) * Y + 5.26543779837487E-04f64;
    } else if X <= 15 as libc::c_int as libc::c_double {
        Y = X - 12.5E+00f64;
        RT1 = (((((((((((4.94869622744119E-17f64 * Y + 8.03568805739160E-16f64) * Y
            - 5.599125915431E-15f64) * Y - 1.378685560217E-13f64) * Y
            + 7.006511663249E-13f64) * Y + 1.30391406991118E-11f64) * Y
            + 8.06987313467541E-11f64) * Y - 5.20644072732933E-09f64) * Y
            + 7.72794187755457E-08f64) * Y - 1.61512612564194E-06f64) * Y
            + 4.15083811185831E-05f64) * Y - 7.87855975560199E-04f64) * Y
            + 1.14189319050009E-02f64;
        RT2 = (((((((((((4.89224285522336E-16f64 * Y + 1.06390248099712E-14f64) * Y
            - 5.446260182933E-14f64) * Y - 1.613630106295E-12f64) * Y
            + 3.910179118937E-12f64) * Y + 1.90712434258806E-10f64) * Y
            + 8.78470199094761E-10f64) * Y - 5.97332993206797E-08f64) * Y
            + 9.25750831481589E-07f64) * Y - 2.02362185197088E-05f64) * Y
            + 4.92341968336776E-04f64) * Y - 8.68438439874703E-03f64) * Y
            + 1.15825965127958E-01f64;
        RT3 = ((((((((((6.12419396208408E-14f64 * Y + 1.12328861406073E-13f64) * Y
            - 9.051094103059E-12f64) * Y - 4.781797525341E-11f64) * Y
            + 1.660828868694E-09f64) * Y + 4.499058798868E-10f64) * Y
            - 2.519549641933E-07f64) * Y + 4.977444040180E-06f64) * Y
            - 1.25858350034589E-04f64) * Y + 2.70279176970044E-03f64) * Y
            - 3.99327850801083E-02f64) * Y + 4.33467200855434E-01f64;
        RT4 = (((((((((((4.63414725924048E-14f64 * Y - 4.72757262693062E-14f64) * Y
            - 1.001926833832E-11f64) * Y + 6.074107718414E-11f64) * Y
            + 1.576976911942E-09f64) * Y - 2.01186401974027E-08f64) * Y
            - 1.84530195217118E-07f64) * Y + 5.02333087806827E-06f64) * Y
            + 9.66961790843006E-06f64) * Y - 1.58522208889528E-03f64) * Y
            + 2.80539673938339E-02f64) * Y - 2.78953904330072E-01f64) * Y
            + 1.82835655238235E+00f64;
        WW4 = (((((((((((((2.90401781000996E-18f64 * Y - 4.63389683098251E-17f64) * Y
            + 6.274018198326E-16f64) * Y - 8.936002188168E-15f64) * Y
            + 1.194719074934E-13f64) * Y - 1.45501321259466E-12f64) * Y
            + 1.64090830181013E-11f64) * Y - 1.71987745310181E-10f64) * Y
            + 1.63738403295718E-09f64) * Y - 1.39237504892842E-08f64) * Y
            + 1.06527318142151E-07f64) * Y - 7.27634957230524E-07f64) * Y
            + 4.12159381310339E-06f64) * Y - 1.74648169719173E-05f64) * Y
            + 8.50290130067818E-05f64;
        WW3 = ((((((((((((-4.19569145459480E-17f64 * Y + 5.94344180261644E-16f64) * Y
            - 1.148797566469E-14f64) * Y + 1.881303962576E-13f64) * Y
            - 2.413554618391E-12f64) * Y + 3.372127423047E-11f64) * Y
            - 4.933988617784E-10f64) * Y + 6.116545396281E-09f64) * Y
            - 6.69965691739299E-08f64) * Y + 7.52380085447161E-07f64) * Y
            - 8.08708393262321E-06f64) * Y + 6.88603417296672E-05f64) * Y
            - 4.67067112993427E-04f64) * Y + 5.42313365864597E-03f64;
        WW2 = ((((((((((-6.22272689880615E-15f64 * Y + 1.04126809657554E-13f64) * Y
            - 6.842418230913E-13f64) * Y + 1.576841731919E-11f64) * Y
            - 4.203948834175E-10f64) * Y + 6.287255934781E-09f64) * Y
            - 8.307159819228E-08f64) * Y + 1.356478091922E-06f64) * Y
            - 2.08065576105639E-05f64) * Y + 2.52396730332340E-04f64) * Y
            - 2.94484050194539E-03f64) * Y + 6.01396183129168E-02f64;
        WW1 = (((-1.8784686463512E-01f64 / X + 2.2991849164985E-01f64) / X
            - 4.9893752514047E-01f64) / X - 2.1916512131607E-05f64) * exp(-X)
            + sqrt(0.78539816339744827900f64 / X) - WW4 - WW3 - WW2;
    } else if X <= 20 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        Y = X - 17.5E+00f64;
        RT1 = (((((((((((4.36701759531398E-17f64 * Y - 1.12860600219889E-16f64) * Y
            - 6.149849164164E-15f64) * Y + 5.820231579541E-14f64) * Y
            + 4.396602872143E-13f64) * Y - 1.24330365320172E-11f64) * Y
            + 6.71083474044549E-11f64) * Y + 2.43865205376067E-10f64) * Y
            + 1.67559587099969E-08f64) * Y - 9.32738632357572E-07f64) * Y
            + 2.39030487004977E-05f64) * Y - 4.68648206591515E-04f64) * Y
            + 8.34977776583956E-03f64;
        RT2 = (((((((((((4.98913142288158E-16f64 * Y - 2.60732537093612E-16f64) * Y
            - 7.775156445127E-14f64) * Y + 5.766105220086E-13f64) * Y
            + 6.432696729600E-12f64) * Y - 1.39571683725792E-10f64) * Y
            + 5.95451479522191E-10f64) * Y + 2.42471442836205E-09f64) * Y
            + 2.47485710143120E-07f64) * Y - 1.14710398652091E-05f64) * Y
            + 2.71252453754519E-04f64) * Y - 4.96812745851408E-03f64) * Y
            + 8.26020602026780E-02f64;
        RT3 = (((((((((((1.91498302509009E-15f64 * Y + 1.48840394311115E-14f64) * Y
            - 4.316925145767E-13f64) * Y + 1.186495793471E-12f64) * Y
            + 4.615806713055E-11f64) * Y - 5.54336148667141E-10f64) * Y
            + 3.48789978951367E-10f64) * Y - 2.79188977451042E-09f64) * Y
            + 2.09563208958551E-06f64) * Y - 6.76512715080324E-05f64) * Y
            + 1.32129867629062E-03f64) * Y - 2.05062147771513E-02f64) * Y
            + 2.88068671894324E-01f64;
        RT4 = (((((((((((-5.43697691672942E-15f64 * Y - 1.12483395714468E-13f64) * Y
            + 2.826607936174E-12f64) * Y - 1.266734493280E-11f64) * Y
            - 4.258722866437E-10f64) * Y + 9.45486578503261E-09f64) * Y
            - 5.86635622821309E-08f64) * Y - 1.28835028104639E-06f64) * Y
            + 4.41413815691885E-05f64) * Y - 7.61738385590776E-04f64) * Y
            + 9.66090902985550E-03f64) * Y - 1.01410568057649E-01f64) * Y
            + 9.54714798156712E-01f64;
        WW4 = ((((((((((((-7.56882223582704E-19f64 * Y + 7.53541779268175E-18f64) * Y
            - 1.157318032236E-16f64) * Y + 2.411195002314E-15f64) * Y
            - 3.601794386996E-14f64) * Y + 4.082150659615E-13f64) * Y
            - 4.289542980767E-12f64) * Y + 5.086829642731E-11f64) * Y
            - 6.35435561050807E-10f64) * Y + 6.82309323251123E-09f64) * Y
            - 5.63374555753167E-08f64) * Y + 3.57005361100431E-07f64) * Y
            - 2.40050045173721E-06f64) * Y + 4.94171300536397E-05f64;
        WW3 = (((((((((((-5.54451040921657E-17f64 * Y + 2.68748367250999E-16f64) * Y
            + 1.349020069254E-14f64) * Y - 2.507452792892E-13f64) * Y
            + 1.944339743818E-12f64) * Y - 1.29816917658823E-11f64) * Y
            + 3.49977768819641E-10f64) * Y - 8.67270669346398E-09f64) * Y
            + 1.31381116840118E-07f64) * Y - 1.36790720600822E-06f64) * Y
            + 1.19210697673160E-05f64) * Y - 1.42181943986587E-04f64) * Y
            + 4.12615396191829E-03f64;
        WW2 = (((((((((((-1.86506057729700E-16f64 * Y + 1.16661114435809E-15f64) * Y
            + 2.563712856363E-14f64) * Y - 4.498350984631E-13f64) * Y
            + 1.765194089338E-12f64) * Y + 9.04483676345625E-12f64) * Y
            + 4.98930345609785E-10f64) * Y - 2.11964170928181E-08f64) * Y
            + 3.98295476005614E-07f64) * Y - 5.49390160829409E-06f64) * Y
            + 7.74065155353262E-05f64) * Y - 1.48201933009105E-03f64) * Y
            + 4.97836392625268E-02f64;
        WW1 = ((1.9623264149430E-01f64 / X - 4.9695241464490E-01f64) / X
            - 6.0156581186481E-05f64) * exp(-X) + WW1 - WW2 - WW3 - WW4;
    } else if X <= 35 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        E = exp(-X);
        RT1 = ((((((-4.45711399441838E-05f64 * X + 1.27267770241379E-03f64) * X
            - 2.36954961381262E-01f64) * X + 1.54330657903756E+01f64) * X
            - 5.22799159267808E+02f64) * X + 1.05951216669313E+04f64) * X
            + (-2.51177235556236E+06f64 / X + 8.72975373557709E+05f64) / X
            - 1.29194382386499E+05f64) * E + R14 / (X - R14);
        RT2 = (((((-7.85617372254488E-02f64 * X + 6.35653573484868E+00f64) * X
            - 3.38296938763990E+02f64) * X + 1.25120495802096E+04f64) * X
            - 3.16847570511637E+05f64) * X
            + ((-1.02427466127427E+09f64 / X + 3.70104713293016E+08f64) / X
                - 5.87119005093822E+07f64) / X + 5.38614211391604E+06f64) * E
            + R24 / (X - R24);
        RT3 = (((((-2.37900485051067E-01f64 * X + 1.84122184400896E+01f64) * X
            - 1.00200731304146E+03f64) * X + 3.75151841595736E+04f64) * X
            - 9.50626663390130E+05f64) * X
            + ((-2.88139014651985E+09f64 / X + 1.06625915044526E+09f64) / X
                - 1.72465289687396E+08f64) / X + 1.60419390230055E+07f64) * E
            + R34 / (X - R34);
        RT4 = ((((((-6.00691586407385E-04f64 * X - 3.64479545338439E-01f64) * X
            + 1.57496131755179E+01f64) * X - 6.54944248734901E+02f64) * X
            + 1.70830039597097E+04f64) * X - 2.90517939780207E+05f64) * X
            + (3.49059698304732E+07f64 / X - 1.64944522586065E+07f64) / X
            + 2.96817940164703E+06f64) * E + R44 / (X - R44);
        if X <= 25 as libc::c_int as libc::c_double {
            WW4 = (((((((2.33766206773151E-07f64 * X - 3.81542906607063E-05f64) * X
                + 3.51416601267000E-03f64) * X - 1.66538571864728E-01f64) * X
                + 4.80006136831847E+00f64) * X - 8.73165934223603E+01f64) * X
                + 9.77683627474638E+02f64) * X + 1.66000945117640E+04f64 / X
                - 6.14479071209961E+03f64) * E + W44 * WW1;
        } else {
            WW4 = ((((((5.74245945342286E-06f64 * X - 7.58735928102351E-05f64) * X
                + 2.35072857922892E-04f64) * X - 3.78812134013125E-03f64) * X
                + 3.09871652785805E-01f64) * X - 7.11108633061306E+00f64) * X
                + 5.55297573149528E+01f64) * E + W44 * WW1;
        }
        WW3 = ((((((2.36392855180768E-04f64 * X - 9.16785337967013E-03f64) * X
            + 4.62186525041313E-01f64) * X - 1.96943786006540E+01f64) * X
            + 4.99169195295559E+02f64) * X - 6.21419845845090E+03f64) * X
            + ((5.21445053212414E+07f64 / X - 1.34113464389309E+07f64) / X
                + 1.13673298305631E+06f64) / X - 2.81501182042707E+03f64) * E
            + W34 * WW1;
        WW2 = ((((((7.29841848989391E-04f64 * X - 3.53899555749875E-02f64) * X
            + 2.07797425718513E+00f64) * X - 1.00464709786287E+02f64) * X
            + 3.15206108877819E+03f64) * X - 6.27054715090012E+04f64) * X
            + (1.54721246264919E+07f64 / X - 5.26074391316381E+06f64) / X
            + 7.67135400969617E+05f64) * E + W24 * WW1;
        WW1 = ((1.9623264149430E-01f64 / X - 4.9695241464490E-01f64) / X
            - 6.0156581186481E-05f64) * E + WW1 - WW2 - WW3 - WW4;
    } else if X <= 53 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        E = exp(-X) * pow(X, 4 as libc::c_int as libc::c_double);
        RT4 = ((-2.19135070169653E-03f64 * X - 1.19108256987623E-01f64) * X
            - 7.50238795695573E-01f64) * E + R44 / (X - R44);
        RT3 = ((-9.65842534508637E-04f64 * X - 4.49822013469279E-02f64) * X
            + 6.08784033347757E-01f64) * E + R34 / (X - R34);
        RT2 = ((-3.62569791162153E-04f64 * X - 9.09231717268466E-03f64) * X
            + 1.84336760556262E-01f64) * E + R24 / (X - R24);
        RT1 = ((-4.07557525914600E-05f64 * X - 6.88846864931685E-04f64) * X
            + 1.74725309199384E-02f64) * E + R14 / (X - R14);
        WW4 = ((5.76631982000990E-06f64 * X - 7.89187283804890E-05f64) * X
            + 3.28297971853126E-04f64) * E + W44 * WW1;
        WW3 = ((2.08294969857230E-04f64 * X - 3.77489954837361E-03f64) * X
            + 2.09857151617436E-02f64) * E + W34 * WW1;
        WW2 = ((6.16374517326469E-04f64 * X - 1.26711744680092E-02f64) * X
            + 8.14504890732155E-02f64) * E + W24 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4;
    } else {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        RT1 = R14 / (X - R14);
        RT2 = R24 / (X - R24);
        RT3 = R34 / (X - R34);
        RT4 = R44 / (X - R44);
        WW4 = W44 * WW1;
        WW3 = W34 * WW1;
        WW2 = W24 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4;
    }
    *roots.offset(0 as libc::c_int as isize) = RT1;
    *roots.offset(1 as libc::c_int as isize) = RT2;
    *roots.offset(2 as libc::c_int as isize) = RT3;
    *roots.offset(3 as libc::c_int as isize) = RT4;
    *weights.offset(0 as libc::c_int as isize) = WW1;
    *weights.offset(1 as libc::c_int as isize) = WW2;
    *weights.offset(2 as libc::c_int as isize) = WW3;
    *weights.offset(3 as libc::c_int as isize) = WW4;
    return 0 as libc::c_int;
}
unsafe extern "C" fn rys_root5(
    mut X: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut R15: libc::c_double = 0.;
    let mut R25: libc::c_double = 0.;
    let mut W25: libc::c_double = 0.;
    let mut R35: libc::c_double = 0.;
    let mut W35: libc::c_double = 0.;
    let mut R45: libc::c_double = 0.;
    let mut W45: libc::c_double = 0.;
    let mut R55: libc::c_double = 0.;
    let mut W55: libc::c_double = 0.;
    let mut RT1: libc::c_double = 0.;
    let mut RT2: libc::c_double = 0.;
    let mut RT3: libc::c_double = 0.;
    let mut RT4: libc::c_double = 0.;
    let mut RT5: libc::c_double = 0.;
    let mut WW1: libc::c_double = 0.;
    let mut WW2: libc::c_double = 0.;
    let mut WW3: libc::c_double = 0.;
    let mut WW4: libc::c_double = 0.;
    let mut WW5: libc::c_double = 0.;
    let mut Y: libc::c_double = 0.;
    let mut E: libc::c_double = 0.;
    let mut XXX: libc::c_double = 0.;
    R15 = 1.17581320211778E-01f64;
    R25 = 1.07456201243690E+00f64;
    W25 = 2.70967405960535E-01f64;
    R35 = 3.08593744371754E+00f64;
    W35 = 3.82231610015404E-02f64;
    R45 = 6.41472973366203E+00f64;
    W45 = 1.51614186862443E-03f64;
    R55 = 1.18071894899717E+01f64;
    W55 = 8.62130526143657E-06f64;
    if X < 3.0e-7f64 {
        RT1 = 2.26659266316985E-02f64 - 2.15865967920897E-03f64 * X;
        RT2 = 2.31271692140903E-01f64 - 2.20258754389745E-02f64 * X;
        RT3 = 8.57346024118836E-01f64 - 8.16520023025515E-02f64 * X;
        RT4 = 2.97353038120346E+00f64 - 2.83193369647137E-01f64 * X;
        RT5 = 1.84151859759051E+01f64 - 1.75382723579439E+00f64 * X;
        WW1 = 2.95524224714752E-01f64 - 1.96867576909777E-02f64 * X;
        WW2 = 2.69266719309995E-01f64 - 5.61737590184721E-02f64 * X;
        WW3 = 2.19086362515981E-01f64 - 9.71152726793658E-02f64 * X;
        WW4 = 1.49451349150580E-01f64 - 1.02979262193565E-01f64 * X;
        WW5 = 6.66713443086877E-02f64 - 5.73782817488315E-02f64 * X;
    } else if X < 1.0f64 {
        RT1 = ((((((-4.46679165328413E-11f64 * X + 1.21879111988031E-09f64) * X
            - 2.62975022612104E-08f64) * X + 5.15106194905897E-07f64) * X
            - 9.27933625824749E-06f64) * X + 1.51794097682482E-04f64) * X
            - 2.15865967920301E-03f64) * X + 2.26659266316985E-02f64;
        RT2 = ((((((1.93117331714174E-10f64 * X - 4.57267589660699E-09f64) * X
            + 2.48339908218932E-08f64) * X + 1.50716729438474E-06f64) * X
            - 6.07268757707381E-05f64) * X + 1.37506939145643E-03f64) * X
            - 2.20258754419939E-02f64) * X + 2.31271692140905E-01f64;
        RT3 = (((((4.84989776180094E-09f64 * X + 1.31538893944284E-07f64) * X
            - 2.766753852879E-06f64) * X - 7.651163510626E-05f64) * X
            + 4.033058545972E-03f64) * X - 8.16520022916145E-02f64) * X
            + 8.57346024118779E-01f64;
        RT4 = ((((-2.48581772214623E-07f64 * X - 4.34482635782585E-06f64) * X
            - 7.46018257987630E-07f64) * X + 1.01210776517279E-02f64) * X
            - 2.83193369640005E-01f64) * X + 2.97353038120345E+00f64;
        RT5 = (((((-8.92432153868554E-09f64 * X + 1.77288899268988E-08f64) * X
            + 3.040754680666E-06f64) * X + 1.058229325071E-04f64) * X
            + 4.596379534985E-02f64) * X - 1.75382723579114E+00f64) * X
            + 1.84151859759049E+01f64;
        WW1 = ((((((-2.03822632771791E-09f64 * X + 3.89110229133810E-08f64) * X
            - 5.84914787904823E-07f64) * X + 8.30316168666696E-06f64) * X
            - 1.13218402310546E-04f64) * X + 1.49128888586790E-03f64) * X
            - 1.96867576904816E-02f64) * X + 2.95524224714749E-01f64;
        WW2 = (((((((8.62848118397570E-09f64 * X - 1.38975551148989E-07f64) * X
            + 1.602894068228E-06f64) * X - 1.646364300836E-05f64) * X
            + 1.538445806778E-04f64) * X - 1.28848868034502E-03f64) * X
            + 9.38866933338584E-03f64) * X - 5.61737590178812E-02f64) * X
            + 2.69266719309991E-01f64;
        WW3 = ((((((((-9.41953204205665E-09f64 * X + 1.47452251067755E-07f64) * X
            - 1.57456991199322E-06f64) * X + 1.45098401798393E-05f64) * X
            - 1.18858834181513E-04f64) * X + 8.53697675984210E-04f64) * X
            - 5.22877807397165E-03f64) * X + 2.60854524809786E-02f64) * X
            - 9.71152726809059E-02f64) * X + 2.19086362515979E-01f64;
        WW4 = ((((((((-3.84961617022042E-08f64 * X + 5.66595396544470E-07f64) * X
            - 5.52351805403748E-06f64) * X + 4.53160377546073E-05f64) * X
            - 3.22542784865557E-04f64) * X + 1.95682017370967E-03f64) * X
            - 9.77232537679229E-03f64) * X + 3.79455945268632E-02f64) * X
            - 1.02979262192227E-01f64) * X + 1.49451349150573E-01f64;
        WW5 = (((((((((4.09594812521430E-09f64 * X - 6.47097874264417E-08f64) * X
            + 6.743541482689E-07f64) * X - 5.917993920224E-06f64) * X
            + 4.531969237381E-05f64) * X - 2.99102856679638E-04f64) * X
            + 1.65695765202643E-03f64) * X - 7.40671222520653E-03f64) * X
            + 2.50889946832192E-02f64) * X - 5.73782817487958E-02f64) * X
            + 6.66713443086877E-02f64;
    } else if X < 5.0f64 {
        Y = X - 3.0E+00f64;
        RT1 = ((((((((-2.58163897135138E-14f64 * Y + 8.14127461488273E-13f64) * Y
            - 2.11414838976129E-11f64) * Y + 5.09822003260014E-10f64) * Y
            - 1.16002134438663E-08f64) * Y + 2.46810694414540E-07f64) * Y
            - 4.92556826124502E-06f64) * Y + 9.02580687971053E-05f64) * Y
            - 1.45190025120726E-03f64) * Y + 1.73416786387475E-02f64;
        RT2 = (((((((((1.04525287289788E-14f64 * Y + 5.44611782010773E-14f64) * Y
            - 4.831059411392E-12f64) * Y + 1.136643908832E-10f64) * Y
            - 1.104373076913E-09f64) * Y - 2.35346740649916E-08f64) * Y
            + 1.43772622028764E-06f64) * Y - 4.23405023015273E-05f64) * Y
            + 9.12034574793379E-04f64) * Y - 1.52479441718739E-02f64) * Y
            + 1.76055265928744E-01f64;
        RT3 = (((((((((-6.89693150857911E-14f64 * Y + 5.92064260918861E-13f64) * Y
            + 1.847170956043E-11f64) * Y - 3.390752744265E-10f64) * Y
            - 2.995532064116E-09f64) * Y + 1.57456141058535E-07f64) * Y
            - 3.95859409711346E-07f64) * Y - 9.58924580919747E-05f64) * Y
            + 3.23551502557785E-03f64) * Y - 5.97587007636479E-02f64) * Y
            + 6.46432853383057E-01f64;
        RT4 = ((((((((-3.61293809667763E-12f64 * Y - 2.70803518291085E-11f64) * Y
            + 8.83758848468769E-10f64) * Y + 1.59166632851267E-08f64) * Y
            - 1.32581997983422E-07f64) * Y - 7.60223407443995E-06f64) * Y
            - 7.41019244900952E-05f64) * Y + 9.81432631743423E-03f64) * Y
            - 2.23055570487771E-01f64) * Y + 2.21460798080643E+00f64;
        RT5 = (((((((((7.12332088345321E-13f64 * Y + 3.16578501501894E-12f64) * Y
            - 8.776668218053E-11f64) * Y - 2.342817613343E-09f64) * Y
            - 3.496962018025E-08f64) * Y - 3.03172870136802E-07f64) * Y
            + 1.50511293969805E-06f64) * Y + 1.37704919387696E-04f64) * Y
            + 4.70723869619745E-02f64) * Y - 1.47486623003693E+00f64) * Y
            + 1.35704792175847E+01f64;
        WW1 = (((((((((1.04348658616398E-13f64 * Y - 1.94147461891055E-12f64) * Y
            + 3.485512360993E-11f64) * Y - 6.277497362235E-10f64) * Y
            + 1.100758247388E-08f64) * Y - 1.88329804969573E-07f64) * Y
            + 3.12338120839468E-06f64) * Y - 5.04404167403568E-05f64) * Y
            + 8.00338056610995E-04f64) * Y - 1.30892406559521E-02f64) * Y
            + 2.47383140241103E-01f64;
        WW2 = (((((((((((3.23496149760478E-14f64 * Y - 5.24314473469311E-13f64) * Y
            + 7.743219385056E-12f64) * Y - 1.146022750992E-10f64) * Y
            + 1.615238462197E-09f64) * Y - 2.15479017572233E-08f64) * Y
            + 2.70933462557631E-07f64) * Y - 3.18750295288531E-06f64) * Y
            + 3.47425221210099E-05f64) * Y - 3.45558237388223E-04f64) * Y
            + 3.05779768191621E-03f64) * Y - 2.29118251223003E-02f64) * Y
            + 1.59834227924213E-01f64;
        WW3 = ((((((((((((-3.42790561802876E-14f64 * Y + 5.26475736681542E-13f64) * Y
            - 7.184330797139E-12f64) * Y + 9.763932908544E-11f64) * Y
            - 1.244014559219E-09f64) * Y + 1.472744068942E-08f64) * Y
            - 1.611749975234E-07f64) * Y + 1.616487851917E-06f64) * Y
            - 1.46852359124154E-05f64) * Y + 1.18900349101069E-04f64) * Y
            - 8.37562373221756E-04f64) * Y + 4.93752683045845E-03f64) * Y
            - 2.25514728915673E-02f64) * Y + 6.95211812453929E-02f64;
        WW4 = (((((((((((((1.04072340345039E-14f64 * Y - 1.60808044529211E-13f64) * Y
            + 2.183534866798E-12f64) * Y - 2.939403008391E-11f64) * Y
            + 3.679254029085E-10f64) * Y - 4.23775673047899E-09f64) * Y
            + 4.46559231067006E-08f64) * Y - 4.26488836563267E-07f64) * Y
            + 3.64721335274973E-06f64) * Y - 2.74868382777722E-05f64) * Y
            + 1.78586118867488E-04f64) * Y - 9.68428981886534E-04f64) * Y
            + 4.16002324339929E-03f64) * Y - 1.28290192663141E-02f64) * Y
            + 2.22353727685016E-02f64;
        WW5 = ((((((((((((((-8.16770412525963E-16f64 * Y + 1.31376515047977E-14f64) * Y
            - 1.856950818865E-13f64) * Y + 2.596836515749E-12f64) * Y
            - 3.372639523006E-11f64) * Y + 4.025371849467E-10f64) * Y
            - 4.389453269417E-09f64) * Y + 4.332753856271E-08f64) * Y
            - 3.82673275931962E-07f64) * Y + 2.98006900751543E-06f64) * Y
            - 2.00718990300052E-05f64) * Y + 1.13876001386361E-04f64) * Y
            - 5.23627942443563E-04f64) * Y + 1.83524565118203E-03f64) * Y
            - 4.37785737450783E-03f64) * Y + 5.36963805223095E-03f64;
    } else if X < 10.0f64 {
        Y = X - 7.5E+00f64;
        RT1 = ((((((((-1.13825201010775E-14f64 * Y + 1.89737681670375E-13f64) * Y
            - 4.81561201185876E-12f64) * Y + 1.56666512163407E-10f64) * Y
            - 3.73782213255083E-09f64) * Y + 9.15858355075147E-08f64) * Y
            - 2.13775073585629E-06f64) * Y + 4.56547356365536E-05f64) * Y
            - 8.68003909323740E-04f64) * Y + 1.22703754069176E-02f64;
        RT2 = (((((((((-3.67160504428358E-15f64 * Y + 1.27876280158297E-14f64) * Y
            - 1.296476623788E-12f64) * Y + 1.477175434354E-11f64) * Y
            + 5.464102147892E-10f64) * Y - 2.42538340602723E-08f64) * Y
            + 8.20460740637617E-07f64) * Y - 2.20379304598661E-05f64) * Y
            + 4.90295372978785E-04f64) * Y - 9.14294111576119E-03f64) * Y
            + 1.22590403403690E-01f64;
        RT3 = (((((((((1.39017367502123E-14f64 * Y - 6.96391385426890E-13f64) * Y
            + 1.176946020731E-12f64) * Y + 1.725627235645E-10f64) * Y
            - 3.686383856300E-09f64) * Y + 2.87495324207095E-08f64) * Y
            + 1.71307311000282E-06f64) * Y - 7.94273603184629E-05f64) * Y
            + 2.00938064965897E-03f64) * Y - 3.63329491677178E-02f64) * Y
            + 4.34393683888443E-01f64;
        RT4 = ((((((((((-1.27815158195209E-14f64 * Y + 1.99910415869821E-14f64) * Y
            + 3.753542914426E-12f64) * Y - 2.708018219579E-11f64) * Y
            - 1.190574776587E-09f64) * Y + 1.106696436509E-08f64) * Y
            + 3.954955671326E-07f64) * Y - 4.398596059588E-06f64) * Y
            - 2.01087998907735E-04f64) * Y + 7.89092425542937E-03f64) * Y
            - 1.42056749162695E-01f64) * Y + 1.39964149420683E+00f64;
        RT5 = ((((((((((-1.19442341030461E-13f64 * Y - 2.34074833275956E-12f64) * Y
            + 6.861649627426E-12f64) * Y + 6.082671496226E-10f64) * Y
            + 5.381160105420E-09f64) * Y - 6.253297138700E-08f64) * Y
            - 2.135966835050E-06f64) * Y - 2.373394341886E-05f64) * Y
            + 2.88711171412814E-06f64) * Y + 4.85221195290753E-02f64) * Y
            - 1.04346091985269E+00f64) * Y + 7.89901551676692E+00f64;
        WW1 = (((((((((7.95526040108997E-15f64 * Y - 2.48593096128045E-13f64) * Y
            + 4.761246208720E-12f64) * Y - 9.535763686605E-11f64) * Y
            + 2.225273630974E-09f64) * Y - 4.49796778054865E-08f64) * Y
            + 9.17812870287386E-07f64) * Y - 1.86764236490502E-05f64) * Y
            + 3.76807779068053E-04f64) * Y - 8.10456360143408E-03f64) * Y
            + 2.01097936411496E-01f64;
        WW2 = (((((((((((1.25678686624734E-15f64 * Y - 2.34266248891173E-14f64) * Y
            + 3.973252415832E-13f64) * Y - 6.830539401049E-12f64) * Y
            + 1.140771033372E-10f64) * Y - 1.82546185762009E-09f64) * Y
            + 2.77209637550134E-08f64) * Y - 4.01726946190383E-07f64) * Y
            + 5.48227244014763E-06f64) * Y - 6.95676245982121E-05f64) * Y
            + 8.05193921815776E-04f64) * Y - 8.15528438784469E-03f64) * Y
            + 9.71769901268114E-02f64;
        WW3 = ((((((((((((-8.20929494859896E-16f64 * Y + 1.37356038393016E-14f64) * Y
            - 2.022863065220E-13f64) * Y + 3.058055403795E-12f64) * Y
            - 4.387890955243E-11f64) * Y + 5.923946274445E-10f64) * Y
            - 7.503659964159E-09f64) * Y + 8.851599803902E-08f64) * Y
            - 9.65561998415038E-07f64) * Y + 9.60884622778092E-06f64) * Y
            - 8.56551787594404E-05f64) * Y + 6.66057194311179E-04f64) * Y
            - 4.17753183902198E-03f64) * Y + 2.25443826852447E-02f64;
        WW4 = ((((((((((((((-1.08764612488790E-17f64 * Y + 1.85299909689937E-16f64) * Y
            - 2.730195628655E-15f64) * Y + 4.127368817265E-14f64) * Y
            - 5.881379088074E-13f64) * Y + 7.805245193391E-12f64) * Y
            - 9.632707991704E-11f64) * Y + 1.099047050624E-09f64) * Y
            - 1.15042731790748E-08f64) * Y + 1.09415155268932E-07f64) * Y
            - 9.33687124875935E-07f64) * Y + 7.02338477986218E-06f64) * Y
            - 4.53759748787756E-05f64) * Y + 2.41722511389146E-04f64) * Y
            - 9.75935943447037E-04f64) * Y + 2.57520532789644E-03f64;
        WW5 = (((((((((((((((7.28996979748849E-19f64 * Y - 1.26518146195173E-17f64) * Y
            + 1.886145834486E-16f64) * Y - 2.876728287383E-15f64) * Y
            + 4.114588668138E-14f64) * Y - 5.44436631413933E-13f64) * Y
            + 6.64976446790959E-12f64) * Y - 7.44560069974940E-11f64) * Y
            + 7.57553198166848E-10f64) * Y - 6.92956101109829E-09f64) * Y
            + 5.62222859033624E-08f64) * Y - 3.97500114084351E-07f64) * Y
            + 2.39039126138140E-06f64) * Y - 1.18023950002105E-05f64) * Y
            + 4.52254031046244E-05f64) * Y - 1.21113782150370E-04f64) * Y
            + 1.75013126731224E-04f64;
    } else if X < 15.0f64 {
        Y = X - 12.5E+00f64;
        RT1 = ((((((((((-4.16387977337393E-17f64 * Y + 7.20872997373860E-16f64) * Y
            + 1.395993802064E-14f64) * Y + 3.660484641252E-14f64) * Y
            - 4.154857548139E-12f64) * Y + 2.301379846544E-11f64) * Y
            - 1.033307012866E-09f64) * Y + 3.997777641049E-08f64) * Y
            - 9.35118186333939E-07f64) * Y + 2.38589932752937E-05f64) * Y
            - 5.35185183652937E-04f64) * Y + 8.85218988709735E-03f64;
        RT2 = ((((((((((-4.56279214732217E-16f64 * Y + 6.24941647247927E-15f64) * Y
            + 1.737896339191E-13f64) * Y + 8.964205979517E-14f64) * Y
            - 3.538906780633E-11f64) * Y + 9.561341254948E-11f64) * Y
            - 9.772831891310E-09f64) * Y + 4.240340194620E-07f64) * Y
            - 1.02384302866534E-05f64) * Y + 2.57987709704822E-04f64) * Y
            - 5.54735977651677E-03f64) * Y + 8.68245143991948E-02f64;
        RT3 = ((((((((((-2.52879337929239E-15f64 * Y + 2.13925810087833E-14f64) * Y
            + 7.884307667104E-13f64) * Y - 9.023398159510E-13f64) * Y
            - 5.814101544957E-11f64) * Y - 1.333480437968E-09f64) * Y
            - 2.217064940373E-08f64) * Y + 1.643290788086E-06f64) * Y
            - 4.39602147345028E-05f64) * Y + 1.08648982748911E-03f64) * Y
            - 2.13014521653498E-02f64) * Y + 2.94150684465425E-01f64;
        RT4 = ((((((((((-6.42391438038888E-15f64 * Y + 5.37848223438815E-15f64) * Y
            + 8.960828117859E-13f64) * Y + 5.214153461337E-11f64) * Y
            - 1.106601744067E-10f64) * Y - 2.007890743962E-08f64) * Y
            + 1.543764346501E-07f64) * Y + 4.520749076914E-06f64) * Y
            - 1.88893338587047E-04f64) * Y + 4.73264487389288E-03f64) * Y
            - 7.91197893350253E-02f64) * Y + 8.60057928514554E-01f64;
        RT5 = (((((((((((-2.24366166957225E-14f64 * Y + 4.87224967526081E-14f64) * Y
            + 5.587369053655E-12f64) * Y - 3.045253104617E-12f64) * Y
            - 1.223983883080E-09f64) * Y - 2.05603889396319E-09f64) * Y
            + 2.58604071603561E-07f64) * Y + 1.34240904266268E-06f64) * Y
            - 5.72877569731162E-05f64) * Y - 9.56275105032191E-04f64) * Y
            + 4.23367010370921E-02f64) * Y - 5.76800927133412E-01f64) * Y
            + 3.87328263873381E+00f64;
        WW1 = (((((((((8.98007931950169E-15f64 * Y + 7.25673623859497E-14f64) * Y
            + 5.851494250405E-14f64) * Y - 4.234204823846E-11f64) * Y
            + 3.911507312679E-10f64) * Y - 9.65094802088511E-09f64) * Y
            + 3.42197444235714E-07f64) * Y - 7.51821178144509E-06f64) * Y
            + 1.94218051498662E-04f64) * Y - 5.38533819142287E-03f64) * Y
            + 1.68122596736809E-01f64;
        WW2 = ((((((((((-1.05490525395105E-15f64 * Y + 1.96855386549388E-14f64) * Y
            - 5.500330153548E-13f64) * Y + 1.003849567976E-11f64) * Y
            - 1.720997242621E-10f64) * Y + 3.533277061402E-09f64) * Y
            - 6.389171736029E-08f64) * Y + 1.046236652393E-06f64) * Y
            - 1.73148206795827E-05f64) * Y + 2.57820531617185E-04f64) * Y
            - 3.46188265338350E-03f64) * Y + 7.03302497508176E-02f64;
        WW3 = (((((((((((3.60020423754545E-16f64 * Y - 6.24245825017148E-15f64) * Y
            + 9.945311467434E-14f64) * Y - 1.749051512721E-12f64) * Y
            + 2.768503957853E-11f64) * Y - 4.08688551136506E-10f64) * Y
            + 6.04189063303610E-09f64) * Y - 8.23540111024147E-08f64) * Y
            + 1.01503783870262E-06f64) * Y - 1.20490761741576E-05f64) * Y
            + 1.26928442448148E-04f64) * Y - 1.05539461930597E-03f64) * Y
            + 1.15543698537013E-02f64;
        WW4 = (((((((((((((2.51163533058925E-18f64 * Y - 4.31723745510697E-17f64) * Y
            + 6.557620865832E-16f64) * Y - 1.016528519495E-14f64) * Y
            + 1.491302084832E-13f64) * Y - 2.06638666222265E-12f64) * Y
            + 2.67958697789258E-11f64) * Y - 3.23322654638336E-10f64) * Y
            + 3.63722952167779E-09f64) * Y - 3.75484943783021E-08f64) * Y
            + 3.49164261987184E-07f64) * Y - 2.92658670674908E-06f64) * Y
            + 2.12937256719543E-05f64) * Y - 1.19434130620929E-04f64) * Y
            + 6.45524336158384E-04f64;
        WW5 = ((((((((((((((-1.29043630202811E-19f64 * Y + 2.16234952241296E-18f64) * Y
            - 3.107631557965E-17f64) * Y + 4.570804313173E-16f64) * Y
            - 6.301348858104E-15f64) * Y + 8.031304476153E-14f64) * Y
            - 9.446196472547E-13f64) * Y + 1.018245804339E-11f64) * Y
            - 9.96995451348129E-11f64) * Y + 8.77489010276305E-10f64) * Y
            - 6.84655877575364E-09f64) * Y + 4.64460857084983E-08f64) * Y
            - 2.66924538268397E-07f64) * Y + 1.24621276265907E-06f64) * Y
            - 4.30868944351523E-06f64) * Y + 9.94307982432868E-06f64;
    } else if X < 20.0f64 {
        Y = X - 17.5E+00f64;
        RT1 = ((((((((((1.91875764545740E-16f64 * Y + 7.8357401095707E-16f64) * Y
            - 3.260875931644E-14f64) * Y - 1.186752035569E-13f64) * Y
            + 4.275180095653E-12f64) * Y + 3.357056136731E-11f64) * Y
            - 1.123776903884E-09f64) * Y + 1.231203269887E-08f64) * Y
            - 3.99851421361031E-07f64) * Y + 1.45418822817771E-05f64) * Y
            - 3.49912254976317E-04f64) * Y + 6.67768703938812E-03f64;
        RT2 = ((((((((((2.02778478673555E-15f64 * Y + 1.01640716785099E-14f64) * Y
            - 3.385363492036E-13f64) * Y - 1.615655871159E-12f64) * Y
            + 4.527419140333E-11f64) * Y + 3.853670706486E-10f64) * Y
            - 1.184607130107E-08f64) * Y + 1.347873288827E-07f64) * Y
            - 4.47788241748377E-06f64) * Y + 1.54942754358273E-04f64) * Y
            - 3.55524254280266E-03f64) * Y + 6.44912219301603E-02f64;
        RT3 = ((((((((((7.79850771456444E-15f64 * Y + 6.00464406395001E-14f64) * Y
            - 1.249779730869E-12f64) * Y - 1.020720636353E-11f64) * Y
            + 1.814709816693E-10f64) * Y + 1.766397336977E-09f64) * Y
            - 4.603559449010E-08f64) * Y + 5.863956443581E-07f64) * Y
            - 2.03797212506691E-05f64) * Y + 6.31405161185185E-04f64) * Y
            - 1.30102750145071E-02f64) * Y + 2.10244289044705E-01f64;
        RT4 = (((((((((((-2.92397030777912E-15f64 * Y + 1.94152129078465E-14f64) * Y
            + 4.859447665850E-13f64) * Y - 3.217227223463E-12f64) * Y
            - 7.484522135512E-11f64) * Y + 7.19101516047753E-10f64) * Y
            + 6.88409355245582E-09f64) * Y - 1.44374545515769E-07f64) * Y
            + 2.74941013315834E-06f64) * Y - 1.02790452049013E-04f64) * Y
            + 2.59924221372643E-03f64) * Y - 4.35712368303551E-02f64) * Y
            + 5.62170709585029E-01f64;
        RT5 = (((((((((((1.17976126840060E-14f64 * Y + 1.24156229350669E-13f64) * Y
            - 3.892741622280E-12f64) * Y - 7.755793199043E-12f64) * Y
            + 9.492190032313E-10f64) * Y - 4.98680128123353E-09f64) * Y
            - 1.81502268782664E-07f64) * Y + 2.69463269394888E-06f64) * Y
            + 2.50032154421640E-05f64) * Y - 1.33684303917681E-03f64) * Y
            + 2.29121951862538E-02f64) * Y - 2.45653725061323E-01f64) * Y
            + 1.89999883453047E+00f64;
        WW1 = ((((((((((1.74841995087592E-15f64 * Y - 6.95671892641256E-16f64) * Y
            - 3.000659497257E-13f64) * Y + 2.021279817961E-13f64) * Y
            + 3.853596935400E-11f64) * Y + 1.461418533652E-10f64) * Y
            - 1.014517563435E-08f64) * Y + 1.132736008979E-07f64) * Y
            - 2.86605475073259E-06f64) * Y + 1.21958354908768E-04f64) * Y
            - 3.86293751153466E-03f64) * Y + 1.45298342081522E-01f64;
        WW2 = ((((((((((-1.11199320525573E-15f64 * Y + 1.85007587796671E-15f64) * Y
            + 1.220613939709E-13f64) * Y + 1.275068098526E-12f64) * Y
            - 5.341838883262E-11f64) * Y + 6.161037256669E-10f64) * Y
            - 1.009147879750E-08f64) * Y + 2.907862965346E-07f64) * Y
            - 6.12300038720919E-06f64) * Y + 1.00104454489518E-04f64) * Y
            - 1.80677298502757E-03f64) * Y + 5.78009914536630E-02f64;
        WW3 = ((((((((((-9.49816486853687E-16f64 * Y + 6.67922080354234E-15f64) * Y
            + 2.606163540537E-15f64) * Y + 1.983799950150E-12f64) * Y
            - 5.400548574357E-11f64) * Y + 6.638043374114E-10f64) * Y
            - 8.799518866802E-09f64) * Y + 1.791418482685E-07f64) * Y
            - 2.96075397351101E-06f64) * Y + 3.38028206156144E-05f64) * Y
            - 3.58426847857878E-04f64) * Y + 8.39213709428516E-03f64;
        WW4 = (((((((((((1.33829971060180E-17f64 * Y - 3.44841877844140E-16f64) * Y
            + 4.745009557656E-15f64) * Y - 6.033814209875E-14f64) * Y
            + 1.049256040808E-12f64) * Y - 1.70859789556117E-11f64) * Y
            + 2.15219425727959E-10f64) * Y - 2.52746574206884E-09f64) * Y
            + 3.27761714422960E-08f64) * Y - 3.90387662925193E-07f64) * Y
            + 3.46340204593870E-06f64) * Y - 2.43236345136782E-05f64) * Y
            + 3.54846978585226E-04f64;
        WW5 = (((((((((((((2.69412277020887E-20f64 * Y - 4.24837886165685E-19f64) * Y
            + 6.030500065438E-18f64) * Y - 9.069722758289E-17f64) * Y
            + 1.246599177672E-15f64) * Y - 1.56872999797549E-14f64) * Y
            + 1.87305099552692E-13f64) * Y - 2.09498886675861E-12f64) * Y
            + 2.11630022068394E-11f64) * Y - 1.92566242323525E-10f64) * Y
            + 1.62012436344069E-09f64) * Y - 1.23621614171556E-08f64) * Y
            + 7.72165684563049E-08f64) * Y - 3.59858901591047E-07f64) * Y
            + 2.43682618601000E-06f64;
    } else if X < 25.0f64 {
        Y = X - 22.5E+00f64;
        RT1 = (((((((((-1.13927848238726E-15f64 * Y + 7.39404133595713E-15f64) * Y
            + 1.445982921243E-13f64) * Y - 2.676703245252E-12f64) * Y
            + 5.823521627177E-12f64) * Y + 2.17264723874381E-10f64) * Y
            + 3.56242145897468E-09f64) * Y - 3.03763737404491E-07f64) * Y
            + 9.46859114120901E-06f64) * Y - 2.30896753853196E-04f64) * Y
            + 5.24663913001114E-03f64;
        RT2 = ((((((((((2.89872355524581E-16f64 * Y - 1.22296292045864E-14f64) * Y
            + 6.184065097200E-14f64) * Y + 1.649846591230E-12f64) * Y
            - 2.729713905266E-11f64) * Y + 3.709913790650E-11f64) * Y
            + 2.216486288382E-09f64) * Y + 4.616160236414E-08f64) * Y
            - 3.32380270861364E-06f64) * Y + 9.84635072633776E-05f64) * Y
            - 2.30092118015697E-03f64) * Y + 5.00845183695073E-02f64;
        RT3 = ((((((((((1.97068646590923E-15f64 * Y - 4.89419270626800E-14f64) * Y
            + 1.136466605916E-13f64) * Y + 7.546203883874E-12f64) * Y
            - 9.635646767455E-11f64) * Y - 8.295965491209E-11f64) * Y
            + 7.534109114453E-09f64) * Y + 2.699970652707E-07f64) * Y
            - 1.42982334217081E-05f64) * Y + 3.78290946669264E-04f64) * Y
            - 8.03133015084373E-03f64) * Y + 1.58689469640791E-01f64;
        RT4 = ((((((((((1.33642069941389E-14f64 * Y - 1.55850612605745E-13f64) * Y
            - 7.522712577474E-13f64) * Y + 3.209520801187E-11f64) * Y
            - 2.075594313618E-10f64) * Y - 2.070575894402E-09f64) * Y
            + 7.323046997451E-09f64) * Y + 1.851491550417E-06f64) * Y
            - 6.37524802411383E-05f64) * Y + 1.36795464918785E-03f64) * Y
            - 2.42051126993146E-02f64) * Y + 3.97847167557815E-01f64;
        RT5 = ((((((((((-6.07053986130526E-14f64 * Y + 1.04447493138843E-12f64) * Y
            - 4.286617818951E-13f64) * Y - 2.632066100073E-10f64) * Y
            + 4.804518986559E-09f64) * Y - 1.835675889421E-08f64) * Y
            - 1.068175391334E-06f64) * Y + 3.292234974141E-05f64) * Y
            - 5.94805357558251E-04f64) * Y + 8.29382168612791E-03f64) * Y
            - 9.93122509049447E-02f64) * Y + 1.09857804755042E+00f64;
        WW1 = (((((((((-9.10338640266542E-15f64 * Y + 1.00438927627833E-13f64) * Y
            + 7.817349237071E-13f64) * Y - 2.547619474232E-11f64) * Y
            + 1.479321506529E-10f64) * Y + 1.52314028857627E-09f64) * Y
            + 9.20072040917242E-09f64) * Y - 2.19427111221848E-06f64) * Y
            + 8.65797782880311E-05f64) * Y - 2.82718629312875E-03f64) * Y
            + 1.28718310443295E-01f64;
        WW2 = (((((((((5.52380927618760E-15f64 * Y - 6.43424400204124E-14f64) * Y
            - 2.358734508092E-13f64) * Y + 8.261326648131E-12f64) * Y
            + 9.229645304956E-11f64) * Y - 5.68108973828949E-09f64) * Y
            + 1.22477891136278E-07f64) * Y - 2.11919643127927E-06f64) * Y
            + 4.23605032368922E-05f64) * Y - 1.14423444576221E-03f64) * Y
            + 5.06607252890186E-02f64;
        WW3 = (((((((((3.99457454087556E-15f64 * Y - 5.11826702824182E-14f64) * Y
            - 4.157593182747E-14f64) * Y + 4.214670817758E-12f64) * Y
            + 6.705582751532E-11f64) * Y - 3.36086411698418E-09f64) * Y
            + 6.07453633298986E-08f64) * Y - 7.40736211041247E-07f64) * Y
            + 8.84176371665149E-06f64) * Y - 1.72559275066834E-04f64) * Y
            + 7.16639814253567E-03f64;
        WW4 = (((((((((((-2.14649508112234E-18f64 * Y - 2.45525846412281E-18f64) * Y
            + 6.126212599772E-16f64) * Y - 8.526651626939E-15f64) * Y
            + 4.826636065733E-14f64) * Y - 3.39554163649740E-13f64) * Y
            + 1.67070784862985E-11f64) * Y - 4.42671979311163E-10f64) * Y
            + 6.77368055908400E-09f64) * Y - 7.03520999708859E-08f64) * Y
            + 6.04993294708874E-07f64) * Y - 7.80555094280483E-06f64) * Y
            + 2.85954806605017E-04f64;
        WW5 = ((((((((((((-5.63938733073804E-21f64 * Y + 6.92182516324628E-20f64) * Y
            - 1.586937691507E-18f64) * Y + 3.357639744582E-17f64) * Y
            - 4.810285046442E-16f64) * Y + 5.386312669975E-15f64) * Y
            - 6.117895297439E-14f64) * Y + 8.441808227634E-13f64) * Y
            - 1.18527596836592E-11f64) * Y + 1.36296870441445E-10f64) * Y
            - 1.17842611094141E-09f64) * Y + 7.80430641995926E-09f64) * Y
            - 5.97767417400540E-08f64) * Y + 1.65186146094969E-06f64;
    } else if X < 40 as libc::c_int as libc::c_double {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        E = exp(-X);
        RT1 = ((((((((-1.73363958895356E-06f64 * X + 1.19921331441483E-04f64) * X
            - 1.59437614121125E-02f64) * X + 1.13467897349442E+00f64) * X
            - 4.47216460864586E+01f64) * X + 1.06251216612604E+03f64) * X
            - 1.52073917378512E+04f64) * X + 1.20662887111273E+05f64) * X
            - 4.07186366852475E+05f64) * E + R15 / (X - R15);
        RT2 = ((((((((-1.60102542621710E-05f64 * X + 1.10331262112395E-03f64) * X
            - 1.50043662589017E-01f64) * X + 1.05563640866077E+01f64) * X
            - 4.10468817024806E+02f64) * X + 9.62604416506819E+03f64) * X
            - 1.35888069838270E+05f64) * X + 1.06107577038340E+06f64) * X
            - 3.51190792816119E+06f64) * E + R25 / (X - R25);
        RT3 = ((((((((-4.48880032128422E-05f64 * X + 2.69025112122177E-03f64) * X
            - 4.01048115525954E-01f64) * X + 2.78360021977405E+01f64) * X
            - 1.04891729356965E+03f64) * X + 2.36985942687423E+04f64) * X
            - 3.19504627257548E+05f64) * X + 2.34879693563358E+06f64) * X
            - 7.16341568174085E+06f64) * E + R35 / (X - R35);
        RT4 = ((((((((-6.38526371092582E-05f64 * X - 2.29263585792626E-03f64) * X
            - 7.65735935499627E-02f64) * X + 9.12692349152792E+00f64) * X
            - 2.32077034386717E+02f64) * X + 2.81839578728845E+02f64) * X
            + 9.59529683876419E+04f64) * X - 1.77638956809518E+06f64) * X
            + 1.02489759645410E+07f64) * E + R45 / (X - R45);
        RT5 = ((((((((-3.59049364231569E-05f64 * X - 2.25963977930044E-02f64) * X
            + 1.12594870794668E+00f64) * X - 4.56752462103909E+01f64) * X
            + 1.05804526830637E+03f64) * X - 1.16003199605875E+04f64) * X
            - 4.07297627297272E+04f64) * X + 2.22215528319857E+06f64) * X
            - 1.61196455032613E+07f64) * E + R55 / (X - R55);
        WW5 = (((((((((-4.61100906133970E-10f64 * X + 1.43069932644286E-07f64) * X
            - 1.63960915431080E-05f64) * X + 1.15791154612838E-03f64) * X
            - 5.30573476742071E-02f64) * X + 1.61156533367153E+00f64) * X
            - 3.23248143316007E+01f64) * X + 4.12007318109157E+02f64) * X
            - 3.02260070158372E+03f64) * X + 9.71575094154768E+03f64) * E + W55 * WW1;
        WW4 = (((((((((-2.40799435809950E-08f64 * X + 8.12621667601546E-06f64) * X
            - 9.04491430884113E-04f64) * X + 6.37686375770059E-02f64) * X
            - 2.96135703135647E+00f64) * X + 9.15142356996330E+01f64) * X
            - 1.86971865249111E+03f64) * X + 2.42945528916947E+04f64) * X
            - 1.81852473229081E+05f64) * X + 5.96854758661427E+05f64) * E + W45 * WW1;
        WW3 = ((((((((1.83574464457207E-05f64 * X - 1.54837969489927E-03f64) * X
            + 1.18520453711586E-01f64) * X - 6.69649981309161E+00f64) * X
            + 2.44789386487321E+02f64) * X - 5.68832664556359E+03f64) * X
            + 8.14507604229357E+04f64) * X - 6.55181056671474E+05f64) * X
            + 2.26410896607237E+06f64) * E + W35 * WW1;
        WW2 = ((((((((2.77778345870650E-05f64 * X - 2.22835017655890E-03f64) * X
            + 1.61077633475573E-01f64) * X - 8.96743743396132E+00f64) * X
            + 3.28062687293374E+02f64) * X - 7.65722701219557E+03f64) * X
            + 1.10255055017664E+05f64) * X - 8.92528122219324E+05f64) * X
            + 3.10638627744347E+06f64) * E + W25 * WW1;
        WW1 = WW1 - 0.01962E+00f64 * E - WW2 - WW3 - WW4 - WW5;
    } else if X < 59.0f64 {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        XXX = X * X * X;
        E = XXX * exp(-X);
        RT1 = (((-2.43758528330205E-02f64 * X + 2.07301567989771E+00f64) * X
            - 6.45964225381113E+01f64) * X + 7.14160088655470E+02f64) * E
            + R15 / (X - R15);
        RT2 = (((-2.28861955413636E-01f64 * X + 1.93190784733691E+01f64) * X
            - 5.99774730340912E+02f64) * X + 6.61844165304871E+03f64) * E
            + R25 / (X - R25);
        RT3 = (((-6.95053039285586E-01f64 * X + 5.76874090316016E+01f64) * X
            - 1.77704143225520E+03f64) * X + 1.95366082947811E+04f64) * E
            + R35 / (X - R35);
        RT4 = (((-1.58072809087018E+00f64 * X + 1.27050801091948E+02f64) * X
            - 3.86687350914280E+03f64) * X + 4.23024828121420E+04f64) * E
            + R45 / (X - R45);
        RT5 = (((-3.33963830405396E+00f64 * X + 2.51830424600204E+02f64) * X
            - 7.57728527654961E+03f64) * X + 8.21966816595690E+04f64) * E
            + R55 / (X - R55);
        E = XXX * E;
        WW5 = ((1.35482430510942E-08f64 * X - 3.27722199212781E-07f64) * X
            + 2.41522703684296E-06f64) * E + W55 * WW1;
        WW4 = ((1.23464092261605E-06f64 * X - 3.55224564275590E-05f64) * X
            + 3.03274662192286E-04f64) * E + W45 * WW1;
        WW3 = ((1.34547929260279E-05f64 * X - 4.19389884772726E-04f64) * X
            + 3.87706687610809E-03f64) * E + W35 * WW1;
        WW2 = ((2.09539509123135E-05f64 * X - 6.87646614786982E-04f64) * X
            + 6.68743788585688E-03f64) * E + W25 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4 - WW5;
    } else {
        WW1 = sqrt(0.78539816339744827900f64 / X);
        RT1 = R15 / (X - R15);
        RT2 = R25 / (X - R25);
        RT3 = R35 / (X - R35);
        RT4 = R45 / (X - R45);
        RT5 = R55 / (X - R55);
        WW2 = W25 * WW1;
        WW3 = W35 * WW1;
        WW4 = W45 * WW1;
        WW5 = W55 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4 - WW5;
    }
    *roots.offset(0 as libc::c_int as isize) = RT1;
    *roots.offset(1 as libc::c_int as isize) = RT2;
    *roots.offset(2 as libc::c_int as isize) = RT3;
    *roots.offset(3 as libc::c_int as isize) = RT4;
    *roots.offset(4 as libc::c_int as isize) = RT5;
    *weights.offset(0 as libc::c_int as isize) = WW1;
    *weights.offset(1 as libc::c_int as isize) = WW2;
    *weights.offset(2 as libc::c_int as isize) = WW3;
    *weights.offset(3 as libc::c_int as isize) = WW4;
    *weights.offset(4 as libc::c_int as isize) = WW5;
    return 0 as libc::c_int;
}
unsafe extern "C" fn R_dsmit(
    mut cs: *mut libc::c_double,
    mut fmt_ints: *mut libc::c_double,
    mut n: libc::c_int,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut fac: libc::c_double = 0.;
    let mut dot: libc::c_double = 0.;
    let mut tmp: libc::c_double = 0.;
    let mut v: [libc::c_double; 32] = [0.; 32];
    fac = -*fmt_ints.offset(1 as libc::c_int as isize)
        / *fmt_ints.offset(0 as libc::c_int as isize);
    tmp = *fmt_ints.offset(2 as libc::c_int as isize)
        + fac * *fmt_ints.offset(1 as libc::c_int as isize);
    if tmp <= 0 as libc::c_int as libc::c_double {
        fprintf(
            stderr,
            b"libcint::rys_roots negative value in sqrt for roots %d (j=1)\n\0"
                as *const u8 as *const libc::c_char,
            n - 1 as libc::c_int,
        );
        k = 1 as libc::c_int;
        while k < n {
            i = 0 as libc::c_int;
            while i < n {
                *cs.offset((i + k * n) as isize) = 0 as libc::c_int as libc::c_double;
                i += 1;
                i;
            }
            k += 1;
            k;
        }
        return 1 as libc::c_int;
    }
    tmp = 1 as libc::c_int as libc::c_double / sqrt(tmp);
    *cs
        .offset(
            (0 as libc::c_int + 0 as libc::c_int * n) as isize,
        ) = 1 as libc::c_int as libc::c_double
        / sqrt(*fmt_ints.offset(0 as libc::c_int as isize));
    *cs.offset((0 as libc::c_int + 1 as libc::c_int * n) as isize) = fac * tmp;
    *cs.offset((1 as libc::c_int + 1 as libc::c_int * n) as isize) = tmp;
    j = 2 as libc::c_int;
    while j < n {
        k = 0 as libc::c_int;
        while k < j {
            v[k as usize] = 0 as libc::c_int as libc::c_double;
            k += 1;
            k;
        }
        fac = *fmt_ints.offset((j + j) as isize);
        k = 0 as libc::c_int;
        while k < j {
            dot = 0 as libc::c_int as libc::c_double;
            i = 0 as libc::c_int;
            while i <= k {
                dot
                    += *cs.offset((i + k * n) as isize)
                        * *fmt_ints.offset((i + j) as isize);
                i += 1;
                i;
            }
            i = 0 as libc::c_int;
            while i <= k {
                v[i as usize] -= dot * *cs.offset((i + k * n) as isize);
                i += 1;
                i;
            }
            fac -= dot * dot;
            k += 1;
            k;
        }
        if fac <= 0 as libc::c_int as libc::c_double {
            k = j;
            while k < n {
                i = 0 as libc::c_int;
                while i < n {
                    *cs
                        .offset(
                            (i + k * n) as isize,
                        ) = 0 as libc::c_int as libc::c_double;
                    i += 1;
                    i;
                }
                k += 1;
                k;
            }
            if fac == 0 as libc::c_int as libc::c_double {
                return 0 as libc::c_int;
            }
            fprintf(
                stderr,
                b"libcint::rys_roots negative value in sqrt for roots %d (j=%d)\n\0"
                    as *const u8 as *const libc::c_char,
                n - 1 as libc::c_int,
                j,
            );
            return j;
        }
        fac = 1 as libc::c_int as libc::c_double / sqrt(fac);
        *cs.offset((j + j * n) as isize) = fac;
        k = 0 as libc::c_int;
        while k < j {
            *cs.offset((k + j * n) as isize) = fac * v[k as usize];
            k += 1;
            k;
        }
        j += 1;
        j;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn _rdk_rys_roots(
    mut nroots: libc::c_int,
    mut fmt_ints: *mut libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut order: libc::c_int = 0;
    let mut nroots1: libc::c_int = nroots + 1 as libc::c_int;
    let mut rt: [libc::c_double; 1056] = [0.; 1056];
    let mut cs: *mut libc::c_double = rt.as_mut_ptr().offset(nroots1 as isize);
    let mut a: *mut libc::c_double = 0 as *mut libc::c_double;
    let mut root: libc::c_double = 0.;
    let mut poly: libc::c_double = 0.;
    let mut dum: libc::c_double = 0.;
    if *fmt_ints.offset(0 as libc::c_int as isize) == 0 as libc::c_int as libc::c_double
    {
        k = 0 as libc::c_int;
        while k < nroots {
            *roots.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            *weights.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            k += 1;
            k;
        }
        return 0 as libc::c_int;
    }
    if nroots == 1 as libc::c_int {
        *roots
            .offset(
                0 as libc::c_int as isize,
            ) = *fmt_ints.offset(1 as libc::c_int as isize)
            / (*fmt_ints.offset(0 as libc::c_int as isize)
                - *fmt_ints.offset(1 as libc::c_int as isize));
        *weights
            .offset(
                0 as libc::c_int as isize,
            ) = *fmt_ints.offset(0 as libc::c_int as isize);
        return 0 as libc::c_int;
    }
    let mut error: libc::c_int = R_dsmit(cs, fmt_ints, nroots1);
    if error != 0 {
        return 1 as libc::c_int;
    }
    error = _CINT_polynomial_roots(rt.as_mut_ptr(), cs, nroots);
    if error != 0 {
        return error;
    }
    k = 0 as libc::c_int;
    while k < nroots {
        root = rt[k as usize];
        if root == 1 as libc::c_int as libc::c_double {
            *roots.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            *weights.offset(k as isize) = 0 as libc::c_int as libc::c_double;
        } else {
            dum = 1 as libc::c_int as libc::c_double
                / *fmt_ints.offset(0 as libc::c_int as isize);
            j = 1 as libc::c_int;
            while j < nroots {
                order = j;
                a = cs.offset((j * nroots1) as isize);
                poly = *a.offset(order as isize);
                i = 1 as libc::c_int;
                while i <= order {
                    poly = poly * root + *a.offset((order - i) as isize);
                    i += 1;
                    i;
                }
                dum += poly * poly;
                j += 1;
                j;
            }
            *roots
                .offset(k as isize) = root / (1 as libc::c_int as libc::c_double - root);
            *weights.offset(k as isize) = 1 as libc::c_int as libc::c_double / dum;
        }
        k += 1;
        k;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn CINTrys_schmidt(
    mut nroots: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut fmt_ints: [libc::c_double; 64] = [0.; 64];
    if lower == 0 as libc::c_int as libc::c_double {
        gamma_inc_like(fmt_ints.as_mut_ptr(), x, nroots * 2 as libc::c_int);
    } else {
        fmt_erfc_like(fmt_ints.as_mut_ptr(), x, lower, nroots * 2 as libc::c_int);
    }
    return _rdk_rys_roots(nroots, fmt_ints.as_mut_ptr(), roots, weights);
}
unsafe extern "C" fn R_lsmit(
    mut cs: *mut f128::f128,
    mut fmt_ints: *mut f128::f128,
    mut n: libc::c_int,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut fac: f128::f128 = f128::f128::ZERO;
    let mut dot: f128::f128 = f128::f128::ZERO;
    let mut tmp: f128::f128 = f128::f128::ZERO;
    let mut v: [f128::f128; 32] = [f128::f128::ZERO; 32];
    fac = -*fmt_ints.offset(1 as libc::c_int as isize)
        / *fmt_ints.offset(0 as libc::c_int as isize);
    tmp = *fmt_ints.offset(2 as libc::c_int as isize)
        + fac * *fmt_ints.offset(1 as libc::c_int as isize);
    if tmp <= f128::f128::new(0 as libc::c_int) {
        fprintf(
            stderr,
            b"libcint::rys_roots negative value in sqrtl for roots %d (j=1)\n\0"
                as *const u8 as *const libc::c_char,
            n - 1 as libc::c_int,
        );
        k = 1 as libc::c_int;
        while k < n {
            i = 0 as libc::c_int;
            while i < n {
                *cs.offset((i + k * n) as isize) = f128::f128::new(0 as libc::c_int);
                i += 1;
                i;
            }
            k += 1;
            k;
        }
        return 1 as libc::c_int;
    }
    tmp = f128::f128::new(1 as libc::c_int) / sqrtl(tmp);
    *cs
        .offset(
            (0 as libc::c_int + 0 as libc::c_int * n) as isize,
        ) = f128::f128::new(1 as libc::c_int)
        / sqrtl(*fmt_ints.offset(0 as libc::c_int as isize));
    *cs.offset((0 as libc::c_int + 1 as libc::c_int * n) as isize) = fac * tmp;
    *cs.offset((1 as libc::c_int + 1 as libc::c_int * n) as isize) = tmp;
    j = 2 as libc::c_int;
    while j < n {
        k = 0 as libc::c_int;
        while k < j {
            v[k as usize] = f128::f128::new(0 as libc::c_int);
            k += 1;
            k;
        }
        fac = *fmt_ints.offset((j + j) as isize);
        k = 0 as libc::c_int;
        while k < j {
            dot = f128::f128::new(0 as libc::c_int);
            i = 0 as libc::c_int;
            while i <= k {
                dot
                    += *cs.offset((i + k * n) as isize)
                        * *fmt_ints.offset((i + j) as isize);
                i += 1;
                i;
            }
            i = 0 as libc::c_int;
            while i <= k {
                v[i as usize] -= dot * *cs.offset((i + k * n) as isize);
                i += 1;
                i;
            }
            fac -= dot * dot;
            k += 1;
            k;
        }
        if fac <= f128::f128::new(0 as libc::c_int) {
            k = j;
            while k < n {
                i = 0 as libc::c_int;
                while i < n {
                    *cs.offset((i + k * n) as isize) = f128::f128::new(0 as libc::c_int);
                    i += 1;
                    i;
                }
                k += 1;
                k;
            }
            if fac == f128::f128::new(0 as libc::c_int) {
                return 0 as libc::c_int;
            }
            fprintf(
                stderr,
                b"libcint::rys_roots negative value in sqrtl for roots %d (j=%d)\n\0"
                    as *const u8 as *const libc::c_char,
                n - 1 as libc::c_int,
                j,
            );
            return j;
        }
        fac = f128::f128::new(1 as libc::c_int) / sqrtl(fac);
        *cs.offset((j + j * n) as isize) = fac;
        k = 0 as libc::c_int;
        while k < j {
            *cs.offset((k + j * n) as isize) = fac * v[k as usize];
            k += 1;
            k;
        }
        j += 1;
        j;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn CINTlrys_schmidt(
    mut nroots: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut order: libc::c_int = 0;
    let mut error: libc::c_int = 0;
    let mut nroots1: libc::c_int = nroots + 1 as libc::c_int;
    let mut fmt_ints: [f128::f128; 1088] = [f128::f128::ZERO; 1088];
    let mut qcs: *mut f128::f128 = fmt_ints
        .as_mut_ptr()
        .offset((nroots1 * 2 as libc::c_int) as isize);
    let mut rt: [libc::c_double; 1056] = [0.; 1056];
    let mut cs: *mut libc::c_double = rt.as_mut_ptr().offset(nroots as isize);
    let mut a: *mut libc::c_double = 0 as *mut libc::c_double;
    let mut root: libc::c_double = 0.;
    let mut poly: libc::c_double = 0.;
    let mut dum: libc::c_double = 0.;
    let mut dum0: libc::c_double = 0.;
    if lower == 0 as libc::c_int as libc::c_double {
        lgamma_inc_like(
            fmt_ints.as_mut_ptr(),
            f128::f128::new(x),
            nroots * 2 as libc::c_int,
        );
    } else {
        fmt_lerfc_like(
            fmt_ints.as_mut_ptr(),
            f128::f128::new(x),
            f128::f128::new(lower),
            nroots * 2 as libc::c_int,
        );
    }
    if fmt_ints[0 as libc::c_int as usize] == f128::f128::new(0 as libc::c_int) {
        k = 0 as libc::c_int;
        while k < nroots {
            *roots.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            *weights.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            k += 1;
            k;
        }
        return 0 as libc::c_int;
    }
    if nroots == 1 as libc::c_int {
        rt[0 as libc::c_int
            as usize] = (fmt_ints[1 as libc::c_int as usize]
            / fmt_ints[0 as libc::c_int as usize])
            .to_f64()
            .unwrap();
    } else {
        error = R_lsmit(qcs, fmt_ints.as_mut_ptr(), nroots1);
        if error != 0 {
            return error;
        }
        k = 1 as libc::c_int;
        while k < nroots1 {
            i = 0 as libc::c_int;
            while i <= k {
                *cs
                    .offset(
                        (k * nroots1 + i) as isize,
                    ) = (*qcs.offset((k * nroots1 + i) as isize)).to_f64().unwrap();
                i += 1;
                i;
            }
            k += 1;
            k;
        }
        error = _CINT_polynomial_roots(rt.as_mut_ptr(), cs, nroots);
        if error != 0 {
            return error;
        }
    }
    dum0 = (f128::f128::new(1 as libc::c_int) / fmt_ints[0 as libc::c_int as usize])
        .to_f64()
        .unwrap();
    k = 0 as libc::c_int;
    while k < nroots {
        root = rt[k as usize];
        if root == 1 as libc::c_int as libc::c_double {
            *roots.offset(k as isize) = 0 as libc::c_int as libc::c_double;
            *weights.offset(k as isize) = 0 as libc::c_int as libc::c_double;
        } else {
            dum = dum0;
            j = 1 as libc::c_int;
            while j < nroots {
                order = j;
                a = cs.offset((j * nroots1) as isize);
                poly = *a.offset(order as isize);
                i = 1 as libc::c_int;
                while i <= order {
                    poly = poly * root + *a.offset((order - i) as isize);
                    i += 1;
                    i;
                }
                dum += poly * poly;
                j += 1;
                j;
            }
            *roots
                .offset(k as isize) = root / (1 as libc::c_int as libc::c_double - root);
            *weights.offset(k as isize) = 1 as libc::c_int as libc::c_double / dum;
        }
        k += 1;
        k;
    }
    return 0 as libc::c_int;
}
