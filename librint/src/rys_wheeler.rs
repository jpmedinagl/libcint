#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
#![feature(extern_types)]
use num_traits::ToPrimitive;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn expl(_: f128::f128) -> f128::f128;
    fn exp(_: libc::c_double) -> libc::c_double;
    fn sqrtl(_: f128::f128) -> f128::f128;
    fn sqrt(_: libc::c_double) -> libc::c_double;
    fn erfl(_: f128::f128) -> f128::f128;
    fn erf(_: libc::c_double) -> libc::c_double;
    fn erfcl(_: f128::f128) -> f128::f128;
    fn erfc(_: libc::c_double) -> libc::c_double;
    fn fmt_erfc_like(
        f: *mut libc::c_double,
        t: libc::c_double,
        lower: libc::c_double,
        m: libc::c_int,
    );
    fn fmt_lerfc_like(
        f: *mut f128::f128,
        t: f128::f128,
        lower: f128::f128,
        m: libc::c_int,
    );
    fn _CINTdiagonalize(
        n: libc::c_int,
        diag: *mut libc::c_double,
        diag_off1: *mut libc::c_double,
        eig: *mut libc::c_double,
        vec: *mut libc::c_double,
    ) -> libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
static mut JACOBI_ALPHA: [libc::c_double; 48] = [
    0.333333333333333333333333333333333333f64,
    0.523809523809523809523809523809523810f64,
    0.506493506493506493506493506493506494f64,
    0.503030303030303030303030303030303030f64,
    0.501754385964912280701754385964912281f64,
    0.501144164759725400457665903890160183f64,
    0.500805152979066022544283413848631240f64,
    0.500597371565113500597371565113500597f64,
    0.500460829493087557603686635944700461f64,
    0.500366300366300366300366300366300366f64,
    0.500298151460942158616577221228384019f64,
    0.500247402276100940128649183572488867f64,
    0.500208594075928243637880684188569045f64,
    0.500178253119429590017825311942959002f64,
    0.500154083204930662557781201848998459f64,
    0.500134517083669626042507398439601829f64,
    0.500118455342335939350864723999052357f64,
    0.500105108261509354635274332562539416f64,
    0.500093896713615023474178403755868545f64,
    0.500084388185654008438818565400843882f64,
    0.500076254384627116059173402470642062f64,
    0.500069242487190139869824124082537045f64,
    0.500063155235569028672476948339017305f64,
    0.500057836899942163100057836899942163f64,
    0.500053163211057947900053163211057948f64,
    0.500049034029616553888398548592723350f64,
    0.500045367933944288177116414118501043f64,
    0.500042098172939294434621537425275743f64,
    0.500039169604386995691343517430473952f64,
    0.500036536353671903544026306174643771f64,
    0.500034160005465600874496139919382387f64,
    0.500032008194097689008386146853594520f64,
    0.500030053495221494259782412694596382f64,
    0.500028272547356516822165677127509189f64,
    0.500026645350386357580602184918731681f64,
    0.500025154701413694219449615133068370f64,
    0.500023785738071452357166642880928595f64,
    0.500022525566517997927647880344190656f64,
    0.500021362956633198034607989745780816f64,
    0.500020288090890647190099411645364171f64,
    0.500019292356368406837211096963383108f64,
    0.500018368171632195731236912677712061f64,
    0.500017508841965192422173197464719683f64,
    0.500016708437761069340016708437761069f64,
    0.500015961691939345570630486831604150f64,
    0.500015263913056751228745001068473914f64,
    0.500014610911428654919493878028111394f64,
    0.500013998936080857854803034969342330f64,
];
static mut JACOBI_BETA: [libc::c_double; 48] = [
    0 as libc::c_int as libc::c_double,
    0.0888888888888888888888888888888888889f64,
    0.0653061224489795918367346938775510204f64,
    0.0635727908455181182453909726636999364f64,
    0.0630668677727501256913021618903971845f64,
    0.0628506250145487557904048045811122233f64,
    0.0627383202808533621388063732109100729f64,
    0.0626725320467338347287261718934771297f64,
    0.0626306844685688562397450409219758676f64,
    0.0626024168881311738454595597452740310f64,
    0.0625824265599124886179295184923702747f64,
    0.0625677689984038834439182682794918809f64,
    0.0625567021738527914561025858962869892f64,
    0.0625481417132150677511108031817980614f64,
    0.0625413838666524411762292054790023554f64,
    0.0625359556958903491628039209027981060f64,
    0.0625315298227085892971919513683760366f64,
    0.0625278737843751839315875074783323933f64,
    0.0625248188203958038426770641549301682f64,
    0.0625222400126509715550811441222400127f64,
    0.0625200432923554218218534834461769248f64,
    0.0625181567280224133007342386318247239f64,
    0.0625165245548401282337764651568207433f64,
    0.0625151030019811111861504383082116693f64,
    0.0625138573245990196466785257298989339f64,
    0.0625127596587629188827452983765522236f64,
    0.0625117874484888667690678686386608579f64,
    0.0625109222768887769076079260615228261f64,
    0.0625101489869806127933216619694767892f64,
    0.0625094550129262476820902302274736489f64,
    0.0625088298660401298247880731141415094f64,
    0.0625082647359430659414435305409292754f64,
    0.0625077521782950542645271337054302016f64,
    0.0625072858682741100226250759358014808f64,
    0.0625068604044429658749318401286927631f64,
    0.0625064711515671281343432808324685505f64,
    0.0625061141137874382619366175795073383f64,
    0.0625057858316275578773529320825966201f64,
    0.0625054832978509385509978861892195425f64,
    0.0625052038883250828781839823557093059f64,
    0.0625049453049100895427815298756695634f64,
    0.0625047055280393577559120272350957998f64,
    0.0625044827771571428430901562023013271f64,
    0.0625042754775595923421139265505510973f64,
    0.0625040822324815102880576155219607192f64,
    0.0625039017995013815508333080556297147f64,
    0.0625037330705176781129155364679885059f64,
    0.0625035750546917580575963715315712799f64,
];
static mut JACOBI_RN_PART2: [libc::c_double; 88] = [
    0.142857142857142857142857142857142857f64,
    0.0649350649350649350649350649350649351f64,
    0.0424242424242424242424242424242424242f64,
    0.0315789473684210526315789473684210526f64,
    0.0251716247139588100686498855835240275f64,
    0.0209339774557165861513687600644122383f64,
    0.0179211469534050179211469534050179211f64,
    0.0156682027649769585253456221198156682f64,
    0.0139194139194139194139194139194139194f64,
    0.0125223613595706618962432915921288014f64,
    0.0113805047006432459178624443344878773f64,
    0.0104297037964121818940342094284522320f64,
    0.00962566844919786096256684491978609626f64,
    0.00893682588597842835130970724191063174f64,
    0.00834005918751681463545870325531342480f64,
    0.00781805259417199715707178393745557925f64,
    0.00735757830565482446920327937775909186f64,
    0.00694835680751173708920187793427230047f64,
    0.00658227848101265822784810126582278481f64,
    0.00625285953942351685221900259264907732f64,
    0.00595485389835202880487467109818584684f64,
    0.00568397120121258052292535051155740811f64,
    0.00543666859456333140543666859456333141f64,
    0.00520999468367889420520999468367889421f64,
    0.00500147102088849661665195645778170050f64,
    0.00480900099809454677433989656111060702f64,
    0.00463079902332238780836911678033173360f64,
    0.00446533490011750881316098707403055229f64,
    0.00431128973328461819510412860796492510f64,
    0.00416752066680330668852907016465122634f64,
    0.00403303245630881505665450355290954484f64,
    0.00390695437879425377171365029752960269f64,
    0.00378852134577325417020073508623126944f64,
    0.00367705835331734612310151878497202238f64,
    0.00357196760074457916184534889570860794f64,
    0.00347271775843204414632986061557490129f64,
    0.00337883497769968914718205162859845925f64,
    0.00328989532151249732963042085024567400f64,
    0.00320551836072225603570703996753905457f64,
    0.00312536173168190762819770806806343327f64,
    0.00304911649094449138532750450020204989f64,
    0.00297650313408271176944356900234618482f64,
    0.00290726817042606516290726817042606516f64,
    0.00284118116520351157222665602553870710f64,
    0.00277803217632872363159019446225234301f64,
    0.00271762952572981502586131322871920750f64,
    0.00265979785536299241257664417504269676f64,
    0.00260437642636595516176668009128742113f64,
    0.00255121762659451101662156938538848087f64,
    0.00250018565735079337574572369235339258f64,
    0.00245115537469360557816329930272958759f64,
    0.00240401126450992513222061954804588227f64,
    0.00235864653367133252507439656122561446f64,
    0.00231496230221939046405436975682276734f64,
    0.00227286688371521592235395294551262363f64,
    0.00223227514272732660358349301673218625f64,
    0.00219310791998016667620191849266739135f64,
    0.00215529151699364465321912130422768721f64,
    0.00211875723315231905991275705510549274f64,
    0.00208344094908483564922430566317130706f64,
    0.00204928275103713700204928275103713700f64,
    0.00201622659160927141635885607368098456f64,
    0.00198421998281384266854152019373486446f64,
    0.00195321371791960027254144901203724733f64,
    0.00192316161897910947340605135281941366f64,
    0.00189402030731547542757864456501616326f64,
    0.00186574899456859737136697209668725901f64,
    0.00183830929218383092921838309292183831f64,
    0.00181166503747148908439231019876181167f64,
    0.00178578213457958129108248793647175045f64,
    0.00176062840890902599081518326541165462f64,
    0.00173617347366404444604092579953781865f64,
    0.00171238860737375502358902673423029879f64,
    0.00168924664134686242276514936794966272f64,
    0.00166672185613210150446482775367837787f64,
    0.00164478988615473925242687135163027703f64,
    0.00162342763178566565769766540632822565f64,
    0.00160261317817587914050936558975144184f64,
    0.00158232572025675473951336020301537543f64,
    0.00156254549336646059182623717693644031f64,
    0.00154325370901619943003758722223800191f64,
    0.00152443249535741012777516006541201253f64,
    0.00150606484195337511836587455471885287f64,
    0.00148813454849645577422621406243120680f64,
    0.00147062617714595319796692381124384014f64,
    0.00145352500819183169356668150998563279f64,
    0.00143681699877665295532730691232132154f64,
    0.00142048874443240640423739015288311063f64,
];
static mut JACOBI_SN: [libc::c_double; 88] = [
    0.133333333333333333333333333333333333f64,
    0.0816326530612244897959183673469387755f64,
    0.0741682559864378046196228014409832592f64,
    0.0709502262443438914027149321266968326f64,
    0.0691356875160036313694452850392234456f64,
    0.0679665136375911423170402376451525790f64,
    0.0671491414786433943522066127430112104f64,
    0.0665451022478544097547291059795993593f64,
    0.0660803289374717946146517575089003660f64,
    0.0657115478879081130488259944169887885f64,
    0.0654117584983313326913690986558324210f64,
    0.0651632314310966577667735269752989471f64,
    0.0649538394714156472799996802272518330f64,
    0.0647750047190328855039516771032524395f64,
    0.0646204875524200274682307182662247096f64,
    0.0644856401296682327127291998486377877f64,
    0.0643669288956803364001636106394598167f64,
    0.0642616193431845761716403159370115618f64,
    0.0641675621182470497538990689675621182f64,
    0.0640830443746643073673998205323313479f64,
    0.0640066842691658040936088633611538840f64,
    0.0639373546583592220572713848194757602f64,
    0.0638741269802850483858493608801293143f64,
    0.0638162293521948325559843283492718283f64,
    0.0637630148519381772604002043440832681f64,
    0.0637139372071136526684730199586351051f64,
    0.0636685319486830135170080728404399155f64,
    0.0636264016474624094503452630760745891f64,
    0.0635872042372870450559193721279473325f64,
    0.0635506436971407986552012076660438679f64,
    0.0635164625542647282953377810335249089f64,
    0.0634844358060809144874103701695775485f64,
    0.0634543659571873541138769710257378668f64,
    0.0634260789398024212554455436599970685f64,
    0.0633994207394466585362624705586466726f64,
    0.0633742545875900415711301817125560514f64,
    0.0633504586131360383892090527864154933f64,
    0.0633279238675595035319320689022355891f64,
    0.0633065526561241224022632641807825021f64,
    0.0632862571212214656620662989991154329f64,
    0.0632669580344788621187890031769872120f64,
    0.0632485837625994897816983723475668191f64,
    0.0632310693784614480670222280220691334f64,
    0.0632143558942142547231491793347102729f64,
    0.0631983895972736191236203448118033782f64,
    0.0631831214734580876576211401252492506f64,
    0.0631685067042097554837410137819071446f64,
    0.0631545042270307306418800612740449121f64,
    0.0631410763500519566499298347892141201f64,
    0.0631281884131127460009319915165060210f64,
    0.0631158084889316866582675155969963302f64,
    0.0631039071189426329431813657385193769f64,
    0.0630924570791929844168441760812401272f64,
    0.0630814331723869622592583712817914834f64,
    0.0630708120427293346371691454965353148f64,
    0.0630605720107052623408921603962253696f64,
    0.0630506929253359486693139231697881124f64,
    0.0630411560317907882669526183723252281f64,
    0.0630319438525254492239910205987482423f64,
    0.0630230400803605451462935505127575629f64,
    0.0630144294821244268441141487100133182f64,
    0.0630060978116620368437903104284681857f64,
    0.0629980317311645809853106304095146108f64,
    0.0629902187399059982519710116900037282f64,
    0.0629826471095851879522211025629876426f64,
    0.0629753058255704593910133559737027347f64,
    0.0629681845334270223004317456018676823f64,
    0.0629612734901814788868752070834879740f64,
    0.0629545635198408417968641138972612553f64,
    0.0629480459727389605947825152324343429f64,
    0.0629417126883315527433774503501116480f64,
    0.0629355559611032858765030867631851152f64,
    0.0629295685092873800533889095865830818f64,
    0.0629237434461307009797940084537341416f64,
    0.0629180742534659027450976347026882854f64,
    0.0629125547573773684532637358197768559f64,
    0.0629071791057699320890454947020834937f64,
    0.0629019417476690252459380084028850472f64,
    0.0628968374140983050099351803916073865f64,
    0.0628918611003962662746221735204718309f64,
    0.0628870080498470665701343133259403169f64,
    0.0628822737385130048545800855496113614f64,
    0.0628776538611669803523093451739050315f64,
    0.0628731443182329721334066277492113016f64,
    0.0628687412036512628117090270546644992f64,
    0.0628644407935929008720508221776268525f64,
    0.0628602395359548608299450549157781435f64,
    0.0628561340405736106069856843147540300f64,
];
static mut JACOBI_COEF: [libc::c_double; 1176] = [
    1.0f64,
    -0.333333333333333333333333333333333333f64,
    1.0f64,
    0.0857142857142857142857142857142857143f64,
    -0.857142857142857142857142857142857143f64,
    1.0f64,
    -0.021645021645021645021645021645021645f64,
    0.454545454545454545454545454545454545f64,
    -1.36363636363636363636363636363636364f64,
    1.0f64,
    0.00543900543900543900543900543900543901f64,
    -0.195804195804195804195804195804195804f64,
    1.07692307692307692307692307692307692f64,
    -1.86666666666666666666666666666666667f64,
    1.0f64,
    -0.0013639611162830977072463140574595683f64,
    0.0750178613955703738985472731602762563f64,
    -0.650154798761609907120743034055727554f64,
    1.95046439628482972136222910216718266f64,
    -2.36842105263157894736842105263157895f64,
    1.0f64,
    0.000341696263085413711339138718328380463f64,
    -0.0266523085206622694844528200296136761f64,
    0.333153856508278368555660250370170952f64,
    -1.51029748283752860411899313501144165f64,
    3.07453416149068322981366459627329193f64,
    -2.86956521739130434782608695652173913f64,
    1.0f64,
    -0.0000855506199428665440241695457740685901f64,
    0.00898281509400098712253780230627720196f64,
    -0.152707856598016781083142639206712433f64,
    0.967149758454106280193236714975845411f64,
    -2.90144927536231884057971014492753623f64,
    4.44888888888888888888888888888888889f64,
    -3.37037037037037037037037037037037037f64,
    1.0f64,
    0.0000214114454806951862129456593984042634f64,
    -0.00291195658537454532496060967818297982f64,
    0.0645483709758024213699601811997227193f64,
    -0.542206316196740339507665522077670842f64,
    2.22691879866518353726362625139043382f64,
    -4.94870844147818563836361389197874181f64,
    6.07341490545050055617352614015572859f64,
    -3.87096774193548387096774193548387097f64,
    1.0f64,
    -0.00000535749588218260503510068880185180269f64,
    0.000916131795853225461002217785116658261f64,
    -0.0256516902838903129080620979832664313f64,
    0.275328142380422691879866518353726363f64,
    -1.4749721913236929922135706340378198f64,
    4.4249165739710789766407119021134594f64,
    -7.77712609970674486803519061583577713f64,
    7.94805194805194805194805194805194805f64,
    -4.37142857142857142857142857142857143f64,
    1.0f64,
    0.00000134030215763542648487272949235516339f64,
    -0.000281463453103439561823273193394584312f64,
    0.00971048913206866488290292517211315876f64,
    -0.129473188427582198438705668961508784f64,
    0.873944021886179839461263265490184289f64,
    -3.37925021795989537925021795989537925f64,
    7.93611793611793611793611793611793612f64,
    -11.5117315117315117315117315117315117f64,
    10.0727650727650727650727650727650728f64,
    -4.87179487179487179487179487179487179f64,
    1.0f64,
    -0.000000335265599272389721967597110679879215f64,
    0.0000848221966159145996578020690020094413f64,
    -0.00353425819232977498574175287508372672f64,
    0.0572549827157423547690163965763563729f64,
    -0.474398428216150939514707285918381375f64,
    2.28765464273121675277092180098419463f64,
    -6.86296392819365025831276540295258389f64,
    13.1980075542185581890630103902934306f64,
    -16.277542650202888433177712814695231f64,
    12.4475326148610323312535450935904708f64,
    -5.37209302325581395348837209302325581f64,
    1.0f64,
    0.0000000838560293215575238396495846570478035f64,
    -0.0000251568087964672571518948753971143411f64,
    0.00124526203542512922901879633215715988f64,
    -0.0240750660182191650943633957550384244f64,
    0.239890836395826680761692407701990015f64,
    -1.40735957352218319380192879185167475f64,
    5.22428932595355882547685687884333809f64,
    -12.744969564414176475339145352782649f64,
    20.7105755421730367724261111982718046f64,
    -22.199571169388091703777008081807686f64,
    15.0723404255319148936170212765957447f64,
    -5.87234042553191489361702127659574468f64,
    1.0f64,
    -0.0000000209723962889049429370872310566846247f64,
    0.00000736131109740563497091761810089630328f64,
    -0.00042695604364952682831322184985198559f64,
    0.00970613405896590989698724338663513909f64,
    -0.114393722837812509500206797056771282f64,
    0.800756059864687566501447579397398975f64,
    -3.59126960181738666188528005305500146f64,
    10.7738088054521599856558401591650044f64,
    -22.086308051176927970594472326288259f64,
    31.0363152353139837495281800663527822f64,
    -29.4028249597711424995530126944394779f64,
    17.9471788715486194477791116446578631f64,
    -6.37254901960784313725490196078431373f64,
    1.0f64,
    0.00000000524489773400058435716521147180895075f64,
    -0.000002129428480004237249009075857554434f64,
    0.000143026612906951268558442928432406151f64,
    -0.00377590258074351348994289331061552238f64,
    0.0519186604852233104867147830209634327f64,
    -0.426886763989613886224099327061254891f64,
    2.27026142667203748582816460300758283f64,
    -8.18292030712558566320481307457678206f64,
    20.5254917703733440385387394620634283f64,
    -36.2214560653647247738918931683472265f64,
    44.8002219755826859045504994450610433f64,
    -38.0123095550398547068913328624760367f64,
    21.0720411663807890222984562607204117f64,
    -6.87272727272727272727272727272727273f64,
    1.0f64,
    -0.00000000131161433074471943038237967522787023f64,
    0.000000609900663796294535127806548980959656f64,
    -0.0000469623511123146792048411042715338935f64,
    0.00142452465040687860254684682956986144f64,
    -0.0225888908850233606975285711546078028f64,
    0.215347426437222705316439045007261053f64,
    -1.33776431574638347242030315837843988f64,
    5.68917351861374070139183870651050805f64,
    -17.0675205558412221041755161195315241f64,
    36.7007468161553076619199006753324931f64,
    -56.7895766523666339610760568344618577f64,
    62.6897924084566738531359068951851676f64,
    -48.1530289514232422350174357310842592f64,
    24.4469223907225691347011596788581624f64,
    -7.37288135593220338983050847457627119f64,
    1.0f64,
    0.00000000032798890758409455440995755084412784f64,
    -0.0000001731781432044019247284575868456995f64,
    0.0000151530875303851684137400388489987062f64,
    -0.000523286622715967815887822674918755321f64,
    0.009475225632749845809111646292278891f64,
    -0.103595800251398314179620666128915875f64,
    0.742436568468354584953948107257230437f64,
    -3.67138962429406113438765547544784282f64,
    12.9416484256365654987164855509536459f64,
    -33.1576874696047952646853747449269883f64,
    62.3015496139416416289088357049417622f64,
    -85.7657695984131689956407348665432051f64,
    85.4550240563899328760913119141281935f64,
    -59.9499861072520144484579049736037788f64,
    28.0718188914910226385636221701795472f64,
    -7.87301587301587301587301587301587302f64,
    1.0f64,
    -0.0000000000820160551915221514930984553086693956f64,
    0.0000000487995528389556801383935809086582904f64,
    -0.00000481488921344362710698816664965428465f64,
    0.000187780679324301457172538499336517101f64,
    -0.00384950392614817987203703923639860058f64,
    0.0478193932159296121881934429588181717f64,
    -0.391249580857605917903400896935785041f64,
    2.22281355278442043468195894193187765f64,
    -9.07648867386971677495133234622183373f64,
    27.2294660216091503248539970386655012f64,
    -60.7647031219067354617794460231272237f64,
    101.27450520317789243629907670521204f64,
    -125.492321664807388453674942873849701f64,
    113.90841504959439875025879430087896f64,
    -73.5281832595265431086326608714668416f64,
    31.9467278989667049368541905855338691f64,
    -8.37313432835820895522388059701492537f64,
    1.0f64,
    0.0000000000205081991446447510877823245056378873f64,
    -0.0000000136584606303334042244630281207548329f64,
    0.00000150925989965184116680316460734340904f64,
    -0.0000660049662781071870281917321611517552f64,
    0.00152047154462068341547084525871224579f64,
    -0.0212866016246895678165918336219714411f64,
    0.197062327161898877817236520348856826f64,
    -1.27332580627688505666522059302338256f64,
    5.95279814434443763990990627238431349f64,
    -20.6208040294284441121062112703508899f64,
    53.7226210240372622920661819938088973f64,
    -106.049849294203426862260515104661719f64,
    158.690535356905852514904321515309022f64,
    -178.709956740392436986015328229548006f64,
    148.924963950327030821679440191290005f64,
    -89.0126221312299494566359872407710376f64,
    36.0716472749540722596448254745866503f64,
    -8.87323943661971830985915492957746479f64,
    1.0f64,
    -5.12798623361071492952949812752845071e-12f64,
    0.00000000379983779910553976278135811249858198f64,
    -0.000000467380049289981390822107047837325583f64,
    0.0000227769877353984264460640167979390001f64,
    -0.000585693970338816680041646146232717145f64,
    0.00917587220197479465398578962431256861f64,
    -0.0953734595538592292823371467011882131f64,
    0.694863776749545813342742068822942696f64,
    -3.68277801677259281071653296476159629f64,
    14.5626189552118866044673362332076193f64,
    -43.6878568656356598134020086996228579f64,
    100.425333314513140090547474543288907f64,
    -177.563632816965262189083940496829662f64,
    240.940190991635940385803131566467326f64,
    -248.589085943751367064717516695561527f64,
    191.442169634843006819954869179340486f64,
    -106.528304071001350569168435269149141f64,
    40.4465753424657534246575342465753425f64,
    -9.37333333333333333333333333333333333f64,
    1.0f64,
    1.2822073091109481189897035429838523e-12f64,
    -0.00000000105140999347097745757155690524675889f64,
    0.000000143166994110964763805993665264433668f64,
    -0.00000773101768199209724552365792427941808f64,
    0.000220610111711131632113335810053544823f64,
    -0.00384351839070060443504122833515509203f64,
    0.0445498722558479150425233284302067485f64,
    -0.363252804547682999577497908738608873f64,
    2.1643812937632778724825917062342112f64,
    -9.67605754858877166521629233375294418f64,
    33.0513755212321726880282827610824251f64,
    -87.2785241036866897822391882435509928f64,
    179.300446256486786617860941065555844f64,
    -286.88071401037885858857750570488935f64,
    355.944589605470065285827645967177527f64,
    -338.761057693481855237546311334279302f64,
    242.460031212068666551066412346107161f64,
    -126.200230149597238204833141542002301f64,
    45.0715107677132993588689791221436791f64,
    -9.87341772151898734177215189873417722f64,
    1.0f64,
    -3.20599507156850184147209825339261597e-13f64,
    0.000000000289501354962635716284930472281353222f64,
    -0.0000000434252032443953574427395708422029833f64,
    0.00000258524709981633694642442911747248427f64,
    -0.0000814352836442146138123695172003832545f64,
    0.0015689864648785348927849860313940507f64,
    -0.0201590988214696604406313356760932575f64,
    0.182761060744093075423306065195350961f64,
    -1.21536105394821895156498533354908389f64,
    6.09269234234172507091727941720357742f64,
    -23.4728989189165407995339396494369404f64,
    70.4186967567496223986018189483108211f64,
    -165.841133666258168692359356218847948f64,
    307.699088002319002219977513230662501f64,
    -449.33835073354520959107827328922143f64,
    513.381977734648204981071038677570231f64,
    -453.34940775761272939860708657414468f64,
    303.041047966318669384095646105711684f64,
    -148.153401227978016143335649207236824f64,
    49.9464524765729585006693440428380187f64,
    -10.3734939759036144578313253012048193f64,
    1.0f64,
    8.01607151768784300863003336108579705e-14f64,
    -0.0000000000793591080251096457854373302747493908f64,
    0.0000000130545732701305367317044408301962748f64,
    -0.000000852898786981861733138023467572823287f64,
    0.0000295163901637651435503837407170737773f64,
    -0.000625747471471821043268135303201964079f64,
    0.00886475584585079811296525012869449112f64,
    -0.0888423882573178887804869023886744604f64,
    0.655212613397719429756090905116474146f64,
    -3.65719981595851237262550086908149621f64,
    15.764456048789587543054132693567081f64,
    -53.2306308140947111843386298743823516f64,
    142.141213441984790372672355860216642f64,
    -301.776730076829247252750540133998408f64,
    510.146377034639917974887817845568738f64,
    -684.88617054765451056858502441795895f64,
    724.929918422416568646183745603686388f64,
    -597.001109289048938885092496379506437f64,
    374.310219316149731523192914396674671f64,
    -172.512818006305139421784501087514358f64,
    55.0713995943204868154158215010141988f64,
    -10.8735632183908045977011494252873563f64,
    1.0f64,
    -2.00426531958487246480748457293477454e-14f64,
    0.0000000000216661081047124713445689082334249128f64,
    -0.00000000389267742281334068490754717927200934f64,
    0.000000277937167988872524902398868600021467f64,
    -0.0000105219070738644598713051000255722412f64,
    0.000244342064270852457011418433927177602f64,
    -0.00379840845366507001354114110923157909f64,
    0.0418659744947919255338655443138381739f64,
    -0.340509925890974327675439760419217148f64,
    2.10314954226778261211301028494222356f64,
    -10.072979386650958826435996627881176f64,
    37.9808010639523166139642989735259926f64,
    -113.942403191856949841892896920577978f64,
    273.81235967027777792774877690760431f64,
    -528.791064971700470601207955403574461f64,
    820.537859438845557829460620453822439f64,
    -1019.055083496630773433362383466844f64,
    1004.5231036963223132061486596384398f64,
    -774.917822851448641616171823149653563f64,
    457.455044784283337511680379241971876f64,
    -199.403481059815813787142729413167228f64,
    60.4463514014075811828620817384862329f64,
    -11.3736263736263736263736263736263736f64,
    1.0f64,
    5.01123043685680053736246001314421841e-15f64,
    -5.89320699374359743193825297545760085e-12f64,
    0.00000000115212196727687329794392845670196097f64,
    -0.0000000895582809229889510268413720342990992f64,
    0.00000369427908807329422985720659641483784f64,
    -0.0000935884035645234538230492337758425586f64,
    0.00158958485448228472326724531913211376f64,
    -0.0191798260463906442433784105539237463f64,
    0.171179947464036499872152314193769435f64,
    -1.16357611348103241743162357360470727f64,
    6.15470523183388199746727206038279373f64,
    -25.7378582422144156257722286161462283f64,
    86.0726201361011073282165471474745245f64,
    -231.998816120690984675439062465192872f64,
    506.34662248563508560115668395180984f64,
    -896.291722560779346926185394581364545f64,
    1284.8052716546655557752375313454641f64,
    -1484.05314800752812859599629289101735f64,
    1368.62679205138705192741880344393822f64,
    -992.887146438417349193433271346242523f64,
    553.725523975271213973260862866173715f64,
    -228.950390865501222037724584413888319f64,
    66.0713073005093378607809847198641766f64,
    -11.8736842105263157894736842105263158f64,
    1.0f64,
    -1.25293806923806915445249052291567931e-15f64,
    1.59749603827853817192692541671749112e-12f64,
    -0.000000000338669160115050092448508188344108117f64,
    0.0000000285610991697025577964908572170197846f64,
    -0.00000127912922710025026702855481964795749f64,
    0.0000352186913861602240188528760343070964f64,
    -0.000651012174107810201560613769119009963f64,
    0.0085633139824950418820665349630269772f64,
    -0.0834923113293266583501487158895130277f64,
    0.621553873229431789939995996066374762f64,
    -3.61155513708048787417766094556461967f64,
    16.6506762813451064328970082555251946f64,
    -61.6557650707778941102200812940099597f64,
    184.967295212333682330660243882029879f64,
    -452.142277185704556808280596156073037f64,
    903.245146837648873256082386343971194f64,
    -1475.05759866632174866416680027946909f64,
    1964.11412870542307709827557898175296f64,
    -2119.99620241220268639178951382157462f64,
    1836.52587093745581225120883914272965f64,
    -1257.3138654879505176181352821823303f64,
    664.434156558673037765681246681719263f64,
    -261.278547822226606816948650915010112f64,
    71.9462667916276163698844111215245236f64,
    -12.3737373737373737373737373737373737f64,
    1.0f64,
    3.13264627327522625274529255993817349e-16f64,
    -4.31678656457326177628301314759480307e-13f64,
    0.0000000000989263587714705823731523846323809038f64,
    -0.00000000902208391995811711243149747847313842f64,
    0.000000437248852835113032913197931367430316f64,
    -0.0000130397324556604820037669249754464774f64,
    0.000261387364224830571075509723371449843f64,
    -0.0037341052032118653010787103338778549f64,
    0.0396126326974058710689433187918875774f64,
    -0.321561371308353541618481058428263863f64,
    2.04276092194306697228161388169954991f64,
    -10.3287651810800962061685065533553f64,
    42.100945031576479101230325625089538f64,
    -139.645596135505982988080895457989298f64,
    379.407479447525514626346771522103199f64,
    -847.779471317229425785767958435596114f64,
    1560.52955103352916480323819768487752f64,
    -2364.43871368716540121702757224981443f64,
    2938.65954415404842722687712551048365f64,
    -2976.28107459129798034926957804191232f64,
    2430.62954424956001728523682206756173f64,
    -1575.25120289344307740436950837828042f64,
    790.955942256221418358430778519749683f64,
    -296.512952266100396447411731464408577f64,
    78.0712294530423916178025569547245987f64,
    -12.8737864077669902912621359223300971f64,
    1.0f64,
    -7.83231275623507836578685073508351521e-17f64,
    1.16309844430090913731934733415990201e-13f64,
    -0.0000000000287285315742324556917878791537495796f64,
    0.00000000282497227146619147635914145011870866f64,
    -0.00000014770569305094658290677796724906391f64,
    0.00000475612331624047996959825054541985791f64,
    -0.000103049338518543732674628761817430255f64,
    0.0015933013109405607898154139327156524f64,
    -0.0183229650758164490828772602262300026f64,
    0.161553463315531959560793621210354729f64,
    -1.11726974103478418348885693826529533f64,
    6.16674857064653607769823634756818853f64,
    -27.5269356486830885787109680442174213f64,
    100.367442288275261433146145022761982f64,
    -301.102326864825784299438435068285946f64,
    746.87220847620004887148062399696675f64,
    -1535.90655775347590695344805741311711f64,
    2620.07589263828242950882315676355271f64,
    -3701.37705467947835279817874526914589f64,
    4312.1305942851959757350048255696024f64,
    -4113.10918224126385377800460285100537f64,
    3176.79164482048834234886534366541065f64,
    -1954.43206901218204571568671248759936f64,
    934.728380831913152298806688581025782f64,
    -334.778604482351873695671899101714908f64,
    84.4461949265687583444592790387182911f64,
    -13.3738317757009345794392523364485981f64,
    1.0f64,
    1.95824002707753632998638097971961596e-17f64,
    -3.12535108321574798265826404363250707e-14f64,
    8.29780712593781089395769103584430628e-12f64,
    -0.000000000877354806782491205187793198856604651f64,
    0.0000000493512078815151302918133674356840116f64,
    -0.00000171084187322585785011619673777037907f64,
    0.0000399455655551673779852887753470326386f64,
    -0.0006663447089312536239743775931515994f64,
    0.00827933300847082627788164159490862254f64,
    -0.0790053999501137670961254688141607118f64,
    0.592540499625853253220941016106205339f64,
    -3.55524299775511951932564609663723203f64,
    17.2996063260330634581679083615355167f64,
    -68.985507072427231513186489958615476f64,
    227.214170119502389507717407403376369f64,
    -621.574396418868605779732677724179033f64,
    1417.34000473737982487273721472993243f64,
    -2698.25155982089421205718956387088741f64,
    4287.22192282653191471309008481707666f64,
    -5671.57380971361974492627849058304594f64,
    6216.91744526300625886149757621603113f64,
    -5603.16833626491621007726146242002341f64,
    4104.6465719149967585449706061914125f64,
    -2403.30031167196911659734510855265312f64,
    1097.25147208427668000676660541189393f64,
    -376.200504714609147430891407569792205f64,
    91.071162906025291346392263823456484f64,
    -13.8738738738738738738738738738738739f64,
    1.0f64,
    -4.89597679721040056646845079115739304e-18f64,
    8.3770163000269953692275193036702995e-15f64,
    -2.38465730674101801510676716177814526e-12f64,
    0.000000000270420138584431442913107396145641672f64,
    -0.0000000163217869359888978043982678387905152f64,
    0.000000607533180395142307163713302888313622f64,
    -0.00001524355979900538879792589741792496f64,
    0.000273546518151382416560582313005180875f64,
    -0.00366096423459266800830245995571933738f64,
    0.0376863965325715824384076760147578848f64,
    -0.305458161369264405027093795066984961f64,
    1.98481688404877000842280427011058193f64,
    -10.4850109309532850444943790790624219f64,
    45.521078226384877531635596555560238f64,
    -163.779540708686331859852939988259057f64,
    491.338622126058995579558819964777172f64,
    -1234.29016767957562195994010015345233f64,
    2602.7901396879464541508184286658362f64,
    -4610.65681887579086163859264506519555f64,
    6853.67905508563506459790798590772312f64,
    -8523.16497876034104187175736709037363f64,
    8820.13936826418567747704508022941103f64,
    -7533.48055978590066321506598818748849f64,
    5247.96085372525060693532616181949682f64,
    -2931.04196617633677515004918612259131f64,
    1280.08771584027769363696025679639702f64,
    -420.903653172218004845938666638935973f64,
    97.9461331281262023855328972681800693f64,
    -14.3739130434782608695652173913043478f64,
    1.0f64,
    1.22408211097388525259474805746023739e-18f64,
    -2.24007026308221001224838894515223442e-15f64,
    6.82101395108532948729634433798855382e-13f64,
    -0.000000000082761635939835331112528977967594453f64,
    0.00000000534699283625578978509160432654922734f64,
    -0.00000021316678107206415276565195915176253f64,
    0.00000573289449095324047210654890142997713f64,
    -0.000110373968660989860517919490937421098f64,
    0.00158662579950172924494509268222542829f64,
    -0.0175669549304309107250783464293455916f64,
    0.153387253839920425752131456454128087f64,
    -1.07570281913710428449546735695102814f64,
    6.14631647021454150959910152866583833f64,
    -28.9349667674715338759588471964884081f64,
    113.213798542567192070219933871974486f64,
    -370.61252672325444024826019731883142f64,
    1019.93165116379498173160316399234857f64,
    -2367.11409949244396829687579236726886f64,
    4640.29509979867984261371683106916991f64,
    -7683.21976694973447624803185115862558f64,
    10726.9568284721292879924444691176196f64,
    -12583.3059195782236711641915375247337f64,
    12330.5756738361663247031771197520382f64,
    -10007.4237352873233939619988218277412f64,
    6645.00033486720321106164638080583169f64,
    -3547.61650530869461227291161881388892f64,
    1484.86211195047172685630916172074536f64,
    -469.013050036067938881238113974686865f64,
    105.071105365223012281835811247575953f64,
    -14.8739495798319327731092436974789916f64,
    1.0f64,
    -3.06041089493638851367671673843280476e-19f64,
    5.9769824778107667672106277901592677e-16f64,
    -1.942519305288499199343454031801762e-13f64,
    0.0000000000251621000678370262954955412252721571f64,
    -0.00000000173618490468075481438919234454377884f64,
    0.0000000739614769394001550929795938775649787f64,
    -0.00000212695277622699233888598892696391408f64,
    0.0000438245764332484685210025190995311968f64,
    -0.000674898477072026415223438794132780431f64,
    0.00801497080287498036902606724796903296f64,
    -0.0751719893195958685137076412414779828f64,
    0.567206828502405189694339474822061143f64,
    -3.49366524802206095101585908404892733f64,
    17.7693189384014361600898925105626981f64,
    -75.3080659770346580118095444495276252f64,
    267.819719693040496423607736237745371f64,
    -803.459159079121489270823208713236112f64,
    2040.87219552183265991251884566196339f64,
    -4399.21339923595040025587395620467663f64,
    8053.75198409198885509147906349277215f64,
    -12514.2915445121672979113751601964613f64,
    16467.7030428946405906313450133595711f64,
    -18278.10591441794145894599605076908f64,
    17006.5855029801716183236658907155787f64,
    -13146.9348923747425985622665396311921f64,
    8338.91298887769387680235191942321326f64,
    -4263.78808933565343022020709002182397f64,
    1713.26216028511580878869257635398238f64,
    -520.65369546326896007344683489198945f64,
    112.446079419471880669219915339649264f64,
    -15.373983739837398373983739837398374f64,
    1.0f64,
    7.65150919181261480994197715580459975e-20f64,
    -1.59151391189702388046793124840735675e-16f64,
    5.50929065835019766621982200490346661e-14f64,
    -7.60282110852327277938335436676678392e-12f64,
    0.000000000559078880801764951883940237184743146f64,
    -0.0000000253946051635290569255727521067914442f64,
    0.000000779152658426459701125527621458373857f64,
    -0.0000171413584853821134247616076720842249f64,
    0.000282118191738580616782534792936386201f64,
    -0.00358456055385490666029573619260349526f64,
    0.036015400512152720076339791535158276f64,
    -0.291553242241236305379893550522709854f64,
    1.9299557013577490214821214376992424f64,
    -10.5702189182055177176559266433989276f64,
    48.3489643110511643752039607577691689f64,
    -186.060152314252067043888345536794457f64,
    605.82085884580058120137031863290937f64,
    -1675.99638668214349736992287792918956f64,
    3950.56291146505252951481821226166111f64,
    -7946.08244212174150317774246392317042f64,
    13640.7748589756562471217912297347759f64,
    -19962.1095497204725567635969215630867f64,
    24836.5781606987274834151729140377939f64,
    -26156.3963238276453690072835519818312f64,
    23165.1063187090582656367697415158239f64,
    -17094.902948663664222151542731698208f64,
    10378.1273557121038452729953989570569f64,
    -5091.15681600971132032260151646949961f64,
    1967.03786073102482830645967681776121f64,
    -575.950589590935279431534472825043211f64,
    120.07105511811023622047244094488189f64,
    -15.8740157480314960629921259842519685f64,
    1.0f64,
    -1.91299049265686120906591239027601834e-20f64,
    4.22962197926432013324473229490027655e-17f64,
    -1.55650088836926980903406148452330177e-14f64,
    2.2839056368671752331226462182905248e-12f64,
    -0.000000000178634048026396920019235543502008904f64,
    0.00000000863397898794251780092971793593043036f64,
    -0.000000282043313606122248163704119240394058f64,
    0.00000661097129584460170695803171801934644f64,
    -0.00011602254624207275995711345665123953f64,
    0.00157350838857713056804581975523739886f64,
    -0.0168945111194597176779656436878120719f64,
    0.146345959956878333651988108308709766f64,
    -1.03820793331727455540069824662483232f64,
    6.10466264790557438575610569015401407f64,
    -30.0388162039798104695935359356784819f64,
    124.643823559042661833600764054941747f64,
    -438.766362770339692664247850886952198f64,
    1316.29908831101907799274355266085659f64,
    -3376.41162969937592069249774777768929f64,
    7420.42100694955305472248793786135129f64,
    -13984.6395900203115262077657290463928f64,
    22593.0704642488424308420466075534639f64,
    -31238.6217412658413314391088400422101f64,
    36852.5189817252099185383110083976218f64,
    -36917.8603274374886595286271626678303f64,
    31191.8248480798373572343911129479219f64,
    -22017.7587162916498992242760797279449f64,
    12816.7666042424488931193724489261901f64,
    -6042.18997057144019247056129735091821f64,
    2248.00171318901132387743206162783708f64,
    -635.028732539268735558596627578485052f64,
    127.946032309604118586898633055210367f64,
    -16.3740458015267175572519083969465649f64,
    1.0f64,
    4.78274259066368697716339778331887849e-21f64,
    -1.12203141176970096484253311996660889e-17f64,
    4.38153266296068226771009183346960773e-15f64,
    -6.82350686711743585158051634865666911e-13f64,
    0.0000000000566594766644572798390167875379526988f64,
    -0.00000000290851980210880703173619509361490521f64,
    0.000000100960891918655710753145802416238603f64,
    -0.00000251625607551111156030917230637394673f64,
    0.0000469910822101700083887737928215334552f64,
    -0.000678760076369122343393399229644372131f64,
    0.00777001666369916366779285960250794413f64,
    -0.0718474268123870718372534550257877432f64,
    0.544842986660601961432505367278890386f64,
    -3.42999615602335880951047994293110686f64,
    18.1027574901232826057497552543586195f64,
    -80.7341368525038350693207475711625791f64,
    306.171192378144584204420012462412926f64,
    -992.191136797623625817532232899584134f64,
    2757.66139767085550604206180921773305f64,
    -6590.14388063589936010051755261136773f64,
    13560.4883697700236832837572717195451f64,
    -24034.0362976411801866330006929663483f64,
    36660.7974392137663946209513741547998f64,
    -48030.9578044191953923729565829506362f64,
    53864.5049845658529887870479409863075f64,
    -51446.0986383200391811272212987379427f64,
    41552.6181309508008770642941259037229f64,
    -28108.2699865551189720462870117923157f64,
    15715.0782197558165161895150111384311f64,
    -7130.25327575127791115676724643304494f64,
    2558.02871757178614326810576355083816f64,
    -698.013124414088656756394803803401634f64,
    136.071010860484544695071010860484545f64,
    -16.8740740740740740740740740740740741f64,
    1.0f64,
    -1.19574843638868947635745086627008247e-21f64,
    2.97143486442589334874826540268115494e-18f64,
    -1.22918355558417788193219912157577109e-15f64,
    2.02815286671389350518812855060002231e-13f64,
    -0.0000000000178477452270822628456555312452801963f64,
    0.000000000971313956913876926866897689326471127f64,
    -0.0000000357620138681927413982812331070200733f64,
    0.000000945924916271867346655636572402168313f64,
    -0.0000187608441727253690420034586859763382f64,
    0.000288034137004783607056641336296460251f64,
    -0.00350795259488983824594246343257899485f64,
    0.0345480179799756796948878974420658584f64,
    -0.279388319316325061880397779314097811f64,
    1.87834916217283156987282814708093451f64,
    -10.6042251642243983336206753065362811f64,
    50.6808830262586761737870895684802952f64,
    -206.401983292424447320665163161956041f64,
    720.01547469389419502057348361488052f64,
    -2160.04642408168258506172045084464156f64,
    5589.081714658009419953441678643532f64,
    -12496.6134748250877287164131891722049f64,
    24165.9250122924170363679767247058318f64,
    -40412.7836886327735217062782013579554f64,
    58374.0208835806728646868462908503801f64,
    -72657.0259933929651613655427237180263f64,
    77639.2220615113399152877513676301195f64,
    -70847.2539173670598020348259086217531f64,
    54806.3662379631972053476955142168278f64,
    -35588.5495051709072761998022819589791f64,
    19139.8793164530771739513758189119978f64,
    -8369.6421417710066286092456970835516f64,
    2899.05637380222598717030985277087588f64,
    -765.028765308920746614387322258981136f64,
    144.445990652733287822296906999947487f64,
    -17.3741007194244604316546762589928058f64,
    1.0f64,
    2.98951935120536807534489402215319434e-22f64,
    -7.85645685496770730200638149021859471e-19f64,
    3.43719987404837194462779190197063519e-16f64,
    -5.99905951350575850069037279957274861e-14f64,
    5.5855529113248258611785006744593413e-12f64,
    -0.000000000321727847692309969603881638848858059f64,
    0.0000000125425113956411144210725372236077543f64,
    -0.000000351465978669064195315768900221975533f64,
    0.00000738957220151707470651404112716703558f64,
    -0.000120358260955428432474725428032027795f64,
    0.00155642235351309293994947566670890681f64,
    -0.0162919015185915962285620439917841414f64,
    0.140192993140054496532010342320606289f64,
    -1.00421319393860574746621562129960443f64,
    6.04918900158255366926077505211428384f64,
    -30.8995355437159408117182578524090545f64,
    134.749385848906411241424580110404808f64,
    -504.409465744569453844904845333066127f64,
    1627.72133945826936455030404851130704f64,
    -4542.80123473275176848889977692629362f64,
    10990.0845255650033168442998449486103f64,
    -23077.9010711051405306091685478131097f64,
    42081.7963505881262318190441278833132f64,
    -66599.0168331046867320962263589109826f64,
    91337.4814191604169987170763982582359f64,
    -108262.875935200755495622199943078334f64,
    110467.323635238779928790977769973594f64,
    -96494.8669070918762480703858927092887f64,
    71619.2421264974120464574357632251409f64,
    -44713.2836506626311143037348503619755f64,
    23165.0175749478151027212004846225602f64,
    -9775.61291634497961500344684649857378f64,
    3273.08468181193513895204693521157604f64,
    -836.200655306732147387282853378062317f64,
    153.070971581609879482219907751822645f64,
    -17.8741258741258741258741258741258741f64,
    1.0f64,
    -7.47414901363988105724275873518853981e-23f64,
    2.0740763512850669933848655490148198e-19f64,
    -9.58223274293700950943807883644846747e-17f64,
    1.76632490228138875290641919885200084e-14f64,
    -1.73730670745819450910867088344228939e-12f64,
    0.000000000105744068260622105787747767772187348f64,
    -0.00000000435793735861957769307081709606590282f64,
    0.000000129157769848318692727604326462524614f64,
    -0.00000287376037912509091318919626379117267f64,
    0.0000495676708530138230059234571251300959f64,
    -0.000679337973164463132144340433441256683f64,
    0.00754329827344955815562871520249707096f64,
    -0.0689282545131876292336797816691942498f64,
    0.524915168985044253394946029634633133f64,
    -3.36612267095171235510409834876812358f64,
    18.3318266838726587798657677890383558f64,
    -85.3760476607779068175200072433036329f64,
    341.960747047714717680868906017296369f64,
    -1183.29274375240965800681621447254934f64,
    3549.87823125722897402044864341764802f64,
    -9256.99015689385093994563146245063599f64,
    21019.0659195441098578324152254250794f64,
    -41593.7541240872871605309527505240472f64,
    71734.1556632809735087417880769907481f64,
    -107728.421714182596740965061172360219f64,
    140618.568425288140562288271685391013f64,
    -159070.778761638168056887185164469471f64,
    155291.319308182055049246259730792349f64,
    -130081.689550360292865927061722546838f64,
    92780.5880096036208644452545498383072f64,
    -55773.1896283718941241637010401287903f64,
    27871.8478047654362492515586900696493f64,
    -11364.4141346811451373436414897010177f64,
    3682.17614154004469485027078570732276f64,
    -911.653794481380688277240001377932412f64,
    161.94595355383532723434201266713582f64,
    -18.3741496598639455782312925170068027f64,
    1.0f64,
    1.86862030320122365202855761969134346e-23f64,
    -5.46758300716678040583555959521687096e-20f64,
    2.66362418832474985437622344946981897e-17f64,
    -5.17808542210331371690737838576932807e-15f64,
    5.37226362543218798129140507523567788e-13f64,
    -0.0000000000345018708388867183687381348165135757f64,
    0.00000000150083138149157224904010886451834054f64,
    -0.000000046971074444923052365562967540090482f64,
    0.00000110421167507606608936044276192162708f64,
    -0.0000201356246631517933942198385997473174f64,
    0.000291966557615701004216187659696336102f64,
    -0.00343281891984521180714790339279328508f64,
    0.0332461049737183013061824122062914892f64,
    -0.268628528187643874553953890626835233f64,
    1.82994301609307665866780758826481673f64,
    -10.601049196677133746765230166499628f64,
    52.5991574052871494975589343543459363f64,
    -224.835614006913697852310739004851257f64,
    831.891771825580682053549734317949651f64,
    -2674.36046134539451129590668500507285f64,
    7491.63795902523975279686680350780022f64,
    -18324.494241239436607886412878266466f64,
    39186.5241543629812449833121064831509f64,
    -73299.6239254557794109059828387936041f64,
    119891.672112115171110923349590048049f64,
    -171273.81730302167301560478512864007f64,
    213252.694092977965421390271679777342f64,
    -230688.44895592584938666117439573398f64,
    215858.477237330616211804384613151082f64,
    -173679.234558771760170417320953110066f64,
    119220.49151915688621867629658645691f64,
    -69098.7089925943666291217456683007789f64,
    33349.7241318424200050275091940757231f64,
    -13153.317769481905512472388241579516f64,
    4128.45575293220475918250991779163912f64,
    -991.513182898831784814018945059689728f64,
    171.07093648606604737988355038001689f64,
    -18.8741721854304635761589403973509934f64,
    1.0f64,
    -4.67174774517396374989555898256376781e-24f64,
    1.43936548028809823134282172252789686e-20f64,
    -7.3839449138779439267886754365681109e-18f64,
    1.51173965536794438661120148438004457e-15f64,
    -1.65211548050925350822509876507247728e-13f64,
    0.0000000000111793147514459487389898349769904296f64,
    -0.000000000512554642998112740669443040005652121f64,
    0.00000001691430321893772044209162032018652f64,
    -0.000000419474719829655466963872183940625696f64,
    0.0000080742029405119957529974090307525665f64,
    -0.000123662792404683724427486633049947203f64,
    0.00153695184845821200359876243933505809f64,
    -0.0157481877805790708194829716610128416f64,
    0.134756031439355064458406597505466808f64,
    -0.973238004839786576644047648650593611f64,
    5.98485439757799791384558036813870784f64,
    -31.5652804517420212552823351674412494f64,
    143.647345799104064643022819398355632f64,
    -566.836986756464610638975760356050955f64,
    1947.24228025158184166874318813636281f64,
    -5841.72684075474552500622956440908844f64,
    15340.4696712502667038781475553181753f64,
    -35318.7557547389861321845722785232409f64,
    71354.1239450813719829931793569005765f64,
    -126514.404157945695005307055597341448f64,
    196742.808098682897130701992581988129f64,
    -267961.92415250476034543574555284356f64,
    318895.287792952904869515775455270848f64,
    -330491.480076333010501134530926371606f64,
    296902.509324473394188859515079045272f64,
    -229805.897047756242959738720710899448f64,
    152029.178850736678975480243050944056f64,
    -85063.9453093407608553282312308853644f64,
    39696.5078110256883991531745744131701f64,
    -15160.6504809448414869461202281560395f64,
    4614.11101593973436559229746074314245f64,
    -1075.90382061818532155438547989159347f64,
    180.445920303605313092979127134724858f64,
    -19.3741935483870967741935483870967742f64,
    1.0f64,
    1.16798372301529094111678017907224592e-24f64,
    -3.78426726256954264921836778019407678e-21f64,
    2.04161218815626825925330941741470442e-18f64,
    -4.39627157849649765159212627883299686e-16f64,
    5.0541422182786521215982337469869346e-14f64,
    -3.59854925941440031057794242785469744e-12f64,
    0.000000000173657263503558560442284039889654717f64,
    -0.00000000603411282635441942987364982561635402f64,
    0.000000157641197588509207605449101694227249f64,
    -0.00000319815867525969006802166020692079333f64,
    0.000051658678812484151677676185131789025f64,
    -0.000677600851955960950577310999780609288f64,
    0.00733331066953788173686386940704594183f64,
    -0.0663382565182811455580916186360463661f64,
    0.507013817675434469622557371004068655f64,
    -3.30316588343030180898925882626558751f64,
    18.480413964756224838599179925175414f64,
    -89.3384717868429264924794580340030709f64,
    375.079774406665937416838359523711306f64,
    -1373.33618680335437113931996787202404f64,
    4399.95786002766996599635974322075395f64,
    -12366.89665652376459664482064877378f64,
    30551.2024168034226874830294462836404f64,
    -66415.6574278335275814848466223557399f64,
    127120.039349904774865625694909278406f64,
    -214184.29487200282067155219125938827f64,
    317399.80348679151027119159564456859f64,
    -412996.809288892936495428896638844665f64,
    470655.454741563054252907606234527524f64,
    -468092.902356400279002891775347588173f64,
    404358.219041206794686678827404780969f64,
    -301504.541960920983875313139418689142f64,
    192478.345983980806670400798825323872f64,
    -104090.853772222720623620012418356966f64,
    47019.0906635720717830136052583359603f64,
    -17405.8248667633259519727383440796474f64,
    5141.39193051890105388866097409238412f64,
    -1164.95070769254625878558330845780788f64,
    190.070904939310179065016224011537075f64,
    -19.8742138364779874213836477987421384f64,
    1.0f64,
    -2.92007057375426737212483129020805757e-25f64,
    9.93700016248577186734080088057801991e-22f64,
    -5.63096675874193739149312049899421128e-19f64,
    1.27372468082742623795574385687249059e-16f64,
    -1.53847745377084126313083061569384399e-14f64,
    1.15112301929920500732477926289803838e-12f64,
    -0.0000000000583933313426323994624751662451914016f64,
    0.00000000213360249136541459574428492049737814f64,
    -0.0000000586385084710261444730387638983362758f64,
    0.00000125210462205779355551253360559388636f64,
    -0.0000212989586236357303758763611225233722f64,
    0.000294405086083415095628455502442498387f64,
    -0.0033600580476911505479334595387459055f64,
    0.0320808003753404312315000767653185993f64,
    -0.259022758586082000313593212401461283f64,
    1.78457748846548909181572151164868843f64,
    -10.5707432683701753059568342766609811f64,
    54.1727039154443030385488387618544038f64,
    -241.455480308837464971817681338551057f64,
    940.062090476939035032524884528612009f64,
    -3208.2631857046303990468990289938015f64,
    9624.7895571138911971406970869814045f64,
    -25435.490372922545446989157206610477f64,
    59300.3268307846397715795520188899333f64,
    -122070.353635710933997879184209097895f64,
    221918.920446308775521042402639723275f64,
    -356141.374592567929342970009666162239f64,
    503973.643291369711334391523112493734f64,
    -627676.264826524095025560351512833105f64,
    686153.061428632207931752906947180533f64,
    -655915.807874150110633065490708830204f64,
    545613.731245921800119414075560544638f64,
    -392430.511064775104252554766648209189f64,
    242044.552978413735629897415513091262f64,
    -126653.690583963640417400227959440204f64,
    55433.9341396478542116737229619578864f64,
    -19909.3707121270462309532385285905085f64,
    5712.61099663030760051416507206873161f64,
    -1258.77884416976602565715637377514507f64,
    199.945890332660137941546317113134931f64,
    -20.3742331288343558282208588957055215f64,
    1.0f64,
    7.30044136548472071368824632852234026e-26f64,
    -2.60625756747804529478670393928247547e-22f64,
    1.54942012386569792775069549190343167e-19f64,
    -3.67729042730792308186165063411747783e-17f64,
    4.66096561661279250625964217874390315e-15f64,
    -3.66041166424657971491590565770687861e-13f64,
    0.0000000000194944651512526177241354672527873914f64,
    -0.00000000074807332206784770431517639172234693f64,
    0.0000000216006171747091024621007183109827676f64,
    -0.00000048481385214347096637159389986872434f64,
    0.00000867306464966135691945814560870417911f64,
    -0.00012615366763143791882848211794478806f64,
    0.00151612940410681006070317096095239853f64,
    -0.0152545943120900581492288278225056714f64,
    0.129906188070417717413670890901179249f64,
    -0.944880871390348638843344135198462399f64,
    5.91503045497385589437214423345005191f64,
    -32.0740154082539565609270280894029553f64,
    151.460628316754794871044299311069511f64,
    -625.663818821985667575409168135627113f64,
    2269.23454288127878662927248289190911f64,
    -7247.84552023637243116202012538066207f64,
    20433.4080364380605432442998672201118f64,
    -50935.4519169180639628698489443747714f64,
    112392.14523156831666984313299871348f64,
    -219646.363823979224577636294203200059f64,
    380157.168156887119461293586120923179f64,
    -582323.209364008781173414074617095463f64,
    788405.124366206693991278146478340287f64,
    -941507.389896486396817170635903353736f64,
    988848.721930829498126056617030697511f64,
    -909887.242813137666176276316040937953f64,
    729805.39267303750307888829515783565f64,
    -506951.065306678731742444550016398657f64,
    302434.810250999296065839395729712807f64,
    -153283.729916034425832127296220773696f64,
    65067.6240058283849874249281688339046f64,
    -22692.9662397224504472988827601042348f64,
    6330.14321423836775635179361202907602f64,
    -1357.51323009307653516169000537686479f64,
    210.070876428960261295590636908002177f64,
    -20.8742514970059880239520958083832335f64,
    1.0f64,
    -1.82517349616343496855938197597058405e-26f64,
    6.82797404914741021738064797210595492e-23f64,
    -4.25382783261883656542814368662200992e-20f64,
    1.05806877623339194837416027298578127e-17f64,
    -1.4057199455672207314113843626811094e-15f64,
    1.15737608851701173552870645860744674e-13f64,
    -6.46377009435409887448304849458643738e-12f64,
    0.00000000026018450390790180414540007291945187f64,
    -0.00000000788359046840942466560562220945939165f64,
    0.000000185753879990954090977178222647719653f64,
    -0.00000349021763983003213046592765711767979f64,
    0.000053350469637401919708550608473084534f64,
    -0.00067422622498281846356313232736999585f64,
    0.00713849981589501025575611796455432529f64,
    -0.0640198793012806475317810579360824411f64,
    0.490819074643151631076988110843298715f64,
    -3.24178082365113859558107469984404555f64,
    18.5665628990928846837825187354704427f64,
    -92.7149315564225638336187364155397026f64,
    405.545397633000545929413391860291018f64,
    -1559.78999089615594588235919946265776f64,
    5291.69171127487981175652871269503289f64,
    -15875.0751338246394352695861380850987f64,
    42195.489558600563368528146343837784f64,
    -99503.5480725864348938695649597593134f64,
    208348.245556068739185939129895332766f64,
    -387471.171599747745725886798131139217f64,
    639828.356736690372571817263440867904f64,
    -937306.995323359402936376458651037656f64,
    1216287.66180798906188658651167965866f64,
    -1394951.38614136598623150882412977802f64,
    1409704.97034169772590608850497726377f64,
    -1250274.05107686286404766182881912084f64,
    968160.931859519448570240698213780756f64,
    -650257.342293707092323295991337613941f64,
    375614.489647917761404139920462099978f64,
    -184574.2562589142051344286933100147f64,
    76057.4406575977453960085655883177937f64,
    -25779.4693597331305447523769678298206f64,
    6996.42608331085627504934639653057069f64,
    -1461.27886550163453845967361446524578f64,
    220.445863178656700923907401640195162f64,
    -21.3742690058479532163742690058479532f64,
    1.0f64,
    4.56308445663452990157752673034561541e-27f64,
    -1.786903873218081909457759467603343e-23f64,
    1.16535914265039241861803546612198019e-20f64,
    -3.03459520746162185808136435378163642e-18f64,
    4.22133869037964897758104077070695494e-16f64,
    -3.63973202637178622955876404229844115e-14f64,
    2.12924323542749494429187696474458807e-12f64,
    -0.000000000089802588324953028529584876820766253f64,
    0.00000000285198053421996659771873304636616825f64,
    -0.0000000704606955513168218259922282043406274f64,
    0.00000138881739389306051441232049802766131f64,
    -0.0000222812002673925639238617305874048174f64,
    0.00029571027746180783207646927225240524f64,
    -0.00329011804092891421781080888758368415f64,
    0.0310298169733110560489299832916291904f64,
    -0.250378523163958176394814347939352778f64,
    1.74204895854600739261795224745706943f64,
    -10.5206093967092211162025351415054389f64,
    55.458640962652894169696220960221528f64,
    -256.387742714967149433161761195903223f64,
    1043.62959374361628134652383563717017f64,
    -3752.70292941955401515544459365003351f64,
    11952.3191610371207692001633833695042f64,
    -33789.8414156469713726373701060281828f64,
    84923.9365366659253913359434845655127f64,
    -189952.315192216029038579987875681229f64,
    378328.857030650477142450790331579279f64,
    -670998.350205304619837554231908838722f64,
    1059218.8242526594356007106089418097f64,
    -1486622.91123180271663257629325166273f64,
    1851979.38941588982495753148396605442f64,
    -2042955.58240166376248620342440676336f64,
    1989246.92869765176873036573517384746f64,
    -1702684.08442372431113704032157537713f64,
    1274396.99909677346377904027580597805f64,
    -828489.974568088752850142125472209334f64,
    463837.697029317294729480978697469311f64,
    -221185.839975475999856190855446997583f64,
    88551.9450568484616968118477421137692f64,
    -29192.9489198401522077401695853122316f64,
    7713.95960381852123210855746953661816f64,
    -1570.20075043099077172700537470844742f64,
    231.070850536746490503715937241948803f64,
    -21.8742857142857142857142857142857143f64,
    1.0f64,
    -1.14080711993820381120460780958456016e-27f64,
    4.67160515614694460688286898024877387e-24f64,
    -3.18603471649221622189411664452966378e-21f64,
    8.67663454458046884429164432860245103e-19f64,
    -1.26245032623645821684443424981165662e-16f64,
    1.13873019426528531159367969333011428e-14f64,
    -6.97040906792689796793706963796009344e-13f64,
    0.0000000000307693771712773067441793502589952696f64,
    -0.00000000102308179094497044924396339611159272f64,
    0.0000000264730771918375033239009874850051997f64,
    -0.000000546738710004054542331513025742949494f64,
    0.00000919515103188637184830271906931324148f64,
    -0.000127999167625026958844851618348918383f64,
    0.00149463643426762248866526735887429312f64,
    -0.0148040180156031179829702671736120462f64,
    0.125544879217379085607304173801045605f64,
    -0.918806273304609033779262401003620054f64,
    5.84203560940738043402964168338665371f64,
    -32.4557533855965579668313426854814095f64,
    158.308361819645230822567103938144741f64,
    -680.725955824474492537038546934022388f64,
    2589.28862407102667021928134867470769f64,
    -8736.79628756312593164899161201867542f64,
    26210.3888626893777949469748360560263f64,
    -70033.7872625405892499735657410220418f64,
    166880.510219882432669937010937178237f64,
    -354904.252503822368121585498373184485f64,
    673846.858178116963093185044779833855f64,
    -1142039.15574343199589169673173725088f64,
    1726531.0648535006398870841697588566f64,
    -2325452.01051454549462757551452266335f64,
    2785377.47425459838462795269190578133f64,
    -2959463.56639551078366719973514989266f64,
    2780102.13812911619071767247847414159f64,
    -2299259.18710941830698511630792154643f64,
    1665177.7715339017055556805062338653f64,
    -1048879.58222597094911762348006123753f64,
    569680.246992039756518161290355362999f64,
    -263851.903869997360913674702901431284f64,
    102711.580294381257045649592970953437f64,
    -32958.7159552223400773065466052363243f64,
    8485.30627573474880039057432926138432f64,
    -1684.40388491349574580329243713392942f64,
    241.945838462266830792538585361234732f64,
    -22.3743016759776536312849162011173184f64,
    1.0f64,
    2.85210390369479387754290289864134973e-28f64,
    -1.22013005000063282081285386003876942e-24f64,
    8.69342660625450884829158375277623209e-22f64,
    -2.47356965036628291763389863045659724e-19f64,
    3.76070928628902370727410945351919087e-17f64,
    -3.54509528720845301472372717818409059e-15f64,
    2.26832384816383289108762119295021433e-13f64,
    -0.0000000000104691869915253825742505593520779123f64,
    0.0000000003640659776302951790195632014685094f64,
    -0.000000009855956074148252493457717519493895f64,
    0.000000213044271560667752582267609750323299f64,
    -0.00000375179262644500613638382959508361549f64,
    0.0000547136424689896728222641815949693926f64,
    -0.000669694983820433595344513582722425366f64,
    0.00695738677635672679607911333161630796f64,
    -0.0619287393058695313894674179770536654f64,
    0.476077183413872022556530775698600053f64,
    -3.18233411372909105986985812632754046f64,
    18.6040262553400672595249007607370341f64,
    -95.5871164072380127189245256725208639f64,
    433.450808631283142290815445261161917f64,
    -1740.85121515328351456636447121149583f64,
    6210.75354243375461063581404898393069f64,
    -19730.3938623402755166865281092359073f64,
    55920.2740938846283925947077705914856f64,
    -141603.828766718463080676557962754929f64,
    320691.023971685931094473381268592046f64,
    -649897.952143877847780554022137607919f64,
    1178678.55866094209665655024924047982f64,
    -1912411.30933372456335926664758800174f64,
    2773536.62771732822267979518890305111f64,
    -3590490.56829826519784248472894482766f64,
    4140818.73576064810763084176329202595f64,
    -4243132.67188899978581472736397010398f64,
    3850112.04249102833945524208135478706f64,
    -3080089.63399282267156419366508382965f64,
    2160641.90678760995700884164377750648f64,
    -1319903.42325048368347448675017878034f64,
    696075.38426157086886391353877849363f64,
    -313384.588585295975592411290185988474f64,
    118709.28877740483632408744125083171f64,
    -37103.3549385565251744663547179654667f64,
    9313.09109903527238314918542117607097f64,
    -1804.0132689786519417974345494371158f64,
    253.070826917851643872837605289375962f64,
    -22.8743169398907103825136612021857923f64,
    1.0f64,
    -7.1304658658928377646678904958372695e-29f64,
    3.18375300912115206192421310639134083e-25f64,
    -2.36765098778309675005097314678636047e-22f64,
    7.03192343371579734765139024595549058e-20f64,
    -1.11606670497975012189152779475093572e-17f64,
    1.0984576525234029533016836895448654e-15f64,
    -7.33969431458819246069761374377705518e-14f64,
    3.53837790748334069506378368065383968e-12f64,
    -0.000000000128561063971894711920650807063756175f64,
    0.00000000363752186885184449610782577633333648f64,
    -0.0000000822079942360516856120368625451334044f64,
    0.00000151426413625281351636024610445689453f64,
    -0.0000231089874706407627931498427245378252f64,
    0.000296150562508365467795289522916000129f64,
    -0.00322318363534236913891487062771540881f64,
    0.0300756376456429341031159997193030905f64,
    -0.242545464884217210508999997736315246f64,
    1.70214170276143165378597681120832999f64,
    -10.4560133169630801589710004117083128f64,
    56.5041174838445825375971985264294171f64,
    -269.770940397227212012835855528747627f64,
    1142.06164662937652472332949291786888f64,
    -4300.23634809073909203435481371400522f64,
    14437.9916034930612027240415243054764f64,
    -43313.9748104791836081721245729164293f64,
    116293.602572788599907982136914548683f64,
    -279771.185676618124967166679304230993f64,
    603531.551491069288451183465417303338f64,
    -1167872.74249570550622371865385945711f64,
    2026997.51858450036137679904290549452f64,
    -3153870.71535690056227779918879193893f64,
    4394737.88205469750481332673848057065f64,
    -5475982.91652847228774358966620198088f64,
    6088680.30579039925700161368479800672f64,
    -6024532.66428953464674347552481769409f64,
    5286122.03545735979977201848326653987f64,
    -4094883.266903588577288183332107883f64,
    2785005.76131132625563805730510262165f64,
    -1651459.55670741802527309363004330898f64,
    846352.400190714732232864168044173331f64,
    -370680.924640490249813381015371245535f64,
    136731.145042035698892319103833115261f64,
    -41654.7550300177602477460953157683324f64,
    10200.0015736979194040308496053659802f64,
    -1929.15390265342049334334773100443303f64,
    264.445815869345281109986992339933516f64,
    -23.3743315508021390374331550802139037f64,
    1.0f64,
];
static mut lJACOBI_ALPHA: [f128::f128; 48] = [
    f128::f128::new(0.333333333333333333333333333333333333),
    f128::f128::new(0.523809523809523809523809523809523810),
    f128::f128::new(0.506493506493506493506493506493506494),
    f128::f128::new(0.503030303030303030303030303030303030),
    f128::f128::new(0.501754385964912280701754385964912281),
    f128::f128::new(0.501144164759725400457665903890160183),
    f128::f128::new(0.500805152979066022544283413848631240),
    f128::f128::new(0.500597371565113500597371565113500597),
    f128::f128::new(0.500460829493087557603686635944700461),
    f128::f128::new(0.500366300366300366300366300366300366),
    f128::f128::new(0.500298151460942158616577221228384019),
    f128::f128::new(0.500247402276100940128649183572488867),
    f128::f128::new(0.500208594075928243637880684188569045),
    f128::f128::new(0.500178253119429590017825311942959002),
    f128::f128::new(0.500154083204930662557781201848998459),
    f128::f128::new(0.500134517083669626042507398439601829),
    f128::f128::new(0.500118455342335939350864723999052357),
    f128::f128::new(0.500105108261509354635274332562539416),
    f128::f128::new(0.500093896713615023474178403755868545),
    f128::f128::new(0.500084388185654008438818565400843882),
    f128::f128::new(0.500076254384627116059173402470642062),
    f128::f128::new(0.500069242487190139869824124082537045),
    f128::f128::new(0.500063155235569028672476948339017305),
    f128::f128::new(0.500057836899942163100057836899942163),
    f128::f128::new(0.500053163211057947900053163211057948),
    f128::f128::new(0.500049034029616553888398548592723350),
    f128::f128::new(0.500045367933944288177116414118501043),
    f128::f128::new(0.500042098172939294434621537425275743),
    f128::f128::new(0.500039169604386995691343517430473952),
    f128::f128::new(0.500036536353671903544026306174643771),
    f128::f128::new(0.500034160005465600874496139919382387),
    f128::f128::new(0.500032008194097689008386146853594520),
    f128::f128::new(0.500030053495221494259782412694596382),
    f128::f128::new(0.500028272547356516822165677127509189),
    f128::f128::new(0.500026645350386357580602184918731681),
    f128::f128::new(0.500025154701413694219449615133068370),
    f128::f128::new(0.500023785738071452357166642880928595),
    f128::f128::new(0.500022525566517997927647880344190656),
    f128::f128::new(0.500021362956633198034607989745780816),
    f128::f128::new(0.500020288090890647190099411645364171),
    f128::f128::new(0.500019292356368406837211096963383108),
    f128::f128::new(0.500018368171632195731236912677712061),
    f128::f128::new(0.500017508841965192422173197464719683),
    f128::f128::new(0.500016708437761069340016708437761069),
    f128::f128::new(0.500015961691939345570630486831604150),
    f128::f128::new(0.500015263913056751228745001068473914),
    f128::f128::new(0.500014610911428654919493878028111394),
    f128::f128::new(0.500013998936080857854803034969342330),
];
static mut lJACOBI_BETA: [f128::f128; 48] = [
    f128::f128::new(0 as libc::c_long),
    f128::f128::new(0.0888888888888888888888888888888888889),
    f128::f128::new(0.0653061224489795918367346938775510204),
    f128::f128::new(0.0635727908455181182453909726636999364),
    f128::f128::new(0.0630668677727501256913021618903971845),
    f128::f128::new(0.0628506250145487557904048045811122233),
    f128::f128::new(0.0627383202808533621388063732109100729),
    f128::f128::new(0.0626725320467338347287261718934771297),
    f128::f128::new(0.0626306844685688562397450409219758676),
    f128::f128::new(0.0626024168881311738454595597452740310),
    f128::f128::new(0.0625824265599124886179295184923702747),
    f128::f128::new(0.0625677689984038834439182682794918809),
    f128::f128::new(0.0625567021738527914561025858962869892),
    f128::f128::new(0.0625481417132150677511108031817980614),
    f128::f128::new(0.0625413838666524411762292054790023554),
    f128::f128::new(0.0625359556958903491628039209027981060),
    f128::f128::new(0.0625315298227085892971919513683760366),
    f128::f128::new(0.0625278737843751839315875074783323933),
    f128::f128::new(0.0625248188203958038426770641549301682),
    f128::f128::new(0.0625222400126509715550811441222400127),
    f128::f128::new(0.0625200432923554218218534834461769248),
    f128::f128::new(0.0625181567280224133007342386318247239),
    f128::f128::new(0.0625165245548401282337764651568207433),
    f128::f128::new(0.0625151030019811111861504383082116693),
    f128::f128::new(0.0625138573245990196466785257298989339),
    f128::f128::new(0.0625127596587629188827452983765522236),
    f128::f128::new(0.0625117874484888667690678686386608579),
    f128::f128::new(0.0625109222768887769076079260615228261),
    f128::f128::new(0.0625101489869806127933216619694767892),
    f128::f128::new(0.0625094550129262476820902302274736489),
    f128::f128::new(0.0625088298660401298247880731141415094),
    f128::f128::new(0.0625082647359430659414435305409292754),
    f128::f128::new(0.0625077521782950542645271337054302016),
    f128::f128::new(0.0625072858682741100226250759358014808),
    f128::f128::new(0.0625068604044429658749318401286927631),
    f128::f128::new(0.0625064711515671281343432808324685505),
    f128::f128::new(0.0625061141137874382619366175795073383),
    f128::f128::new(0.0625057858316275578773529320825966201),
    f128::f128::new(0.0625054832978509385509978861892195425),
    f128::f128::new(0.0625052038883250828781839823557093059),
    f128::f128::new(0.0625049453049100895427815298756695634),
    f128::f128::new(0.0625047055280393577559120272350957998),
    f128::f128::new(0.0625044827771571428430901562023013271),
    f128::f128::new(0.0625042754775595923421139265505510973),
    f128::f128::new(0.0625040822324815102880576155219607192),
    f128::f128::new(0.0625039017995013815508333080556297147),
    f128::f128::new(0.0625037330705176781129155364679885059),
    f128::f128::new(0.0625035750546917580575963715315712799),
];
static mut lJACOBI_RN_PART2: [f128::f128; 88] = [
    f128::f128::new(0.142857142857142857142857142857142857),
    f128::f128::new(0.0649350649350649350649350649350649351),
    f128::f128::new(0.0424242424242424242424242424242424242),
    f128::f128::new(0.0315789473684210526315789473684210526),
    f128::f128::new(0.0251716247139588100686498855835240275),
    f128::f128::new(0.0209339774557165861513687600644122383),
    f128::f128::new(0.0179211469534050179211469534050179211),
    f128::f128::new(0.0156682027649769585253456221198156682),
    f128::f128::new(0.0139194139194139194139194139194139194),
    f128::f128::new(0.0125223613595706618962432915921288014),
    f128::f128::new(0.0113805047006432459178624443344878773),
    f128::f128::new(0.0104297037964121818940342094284522320),
    f128::f128::new(0.00962566844919786096256684491978609626),
    f128::f128::new(0.00893682588597842835130970724191063174),
    f128::f128::new(0.00834005918751681463545870325531342480),
    f128::f128::new(0.00781805259417199715707178393745557925),
    f128::f128::new(0.00735757830565482446920327937775909186),
    f128::f128::new(0.00694835680751173708920187793427230047),
    f128::f128::new(0.00658227848101265822784810126582278481),
    f128::f128::new(0.00625285953942351685221900259264907732),
    f128::f128::new(0.00595485389835202880487467109818584684),
    f128::f128::new(0.00568397120121258052292535051155740811),
    f128::f128::new(0.00543666859456333140543666859456333141),
    f128::f128::new(0.00520999468367889420520999468367889421),
    f128::f128::new(0.00500147102088849661665195645778170050),
    f128::f128::new(0.00480900099809454677433989656111060702),
    f128::f128::new(0.00463079902332238780836911678033173360),
    f128::f128::new(0.00446533490011750881316098707403055229),
    f128::f128::new(0.00431128973328461819510412860796492510),
    f128::f128::new(0.00416752066680330668852907016465122634),
    f128::f128::new(0.00403303245630881505665450355290954484),
    f128::f128::new(0.00390695437879425377171365029752960269),
    f128::f128::new(0.00378852134577325417020073508623126944),
    f128::f128::new(0.00367705835331734612310151878497202238),
    f128::f128::new(0.00357196760074457916184534889570860794),
    f128::f128::new(0.00347271775843204414632986061557490129),
    f128::f128::new(0.00337883497769968914718205162859845925),
    f128::f128::new(0.00328989532151249732963042085024567400),
    f128::f128::new(0.00320551836072225603570703996753905457),
    f128::f128::new(0.00312536173168190762819770806806343327),
    f128::f128::new(0.00304911649094449138532750450020204989),
    f128::f128::new(0.00297650313408271176944356900234618482),
    f128::f128::new(0.00290726817042606516290726817042606516),
    f128::f128::new(0.00284118116520351157222665602553870710),
    f128::f128::new(0.00277803217632872363159019446225234301),
    f128::f128::new(0.00271762952572981502586131322871920750),
    f128::f128::new(0.00265979785536299241257664417504269676),
    f128::f128::new(0.00260437642636595516176668009128742113),
    f128::f128::new(0.00255121762659451101662156938538848087),
    f128::f128::new(0.00250018565735079337574572369235339258),
    f128::f128::new(0.00245115537469360557816329930272958759),
    f128::f128::new(0.00240401126450992513222061954804588227),
    f128::f128::new(0.00235864653367133252507439656122561446),
    f128::f128::new(0.00231496230221939046405436975682276734),
    f128::f128::new(0.00227286688371521592235395294551262363),
    f128::f128::new(0.00223227514272732660358349301673218625),
    f128::f128::new(0.00219310791998016667620191849266739135),
    f128::f128::new(0.00215529151699364465321912130422768721),
    f128::f128::new(0.00211875723315231905991275705510549274),
    f128::f128::new(0.00208344094908483564922430566317130706),
    f128::f128::new(0.00204928275103713700204928275103713700),
    f128::f128::new(0.00201622659160927141635885607368098456),
    f128::f128::new(0.00198421998281384266854152019373486446),
    f128::f128::new(0.00195321371791960027254144901203724733),
    f128::f128::new(0.00192316161897910947340605135281941366),
    f128::f128::new(0.00189402030731547542757864456501616326),
    f128::f128::new(0.00186574899456859737136697209668725901),
    f128::f128::new(0.00183830929218383092921838309292183831),
    f128::f128::new(0.00181166503747148908439231019876181167),
    f128::f128::new(0.00178578213457958129108248793647175045),
    f128::f128::new(0.00176062840890902599081518326541165462),
    f128::f128::new(0.00173617347366404444604092579953781865),
    f128::f128::new(0.00171238860737375502358902673423029879),
    f128::f128::new(0.00168924664134686242276514936794966272),
    f128::f128::new(0.00166672185613210150446482775367837787),
    f128::f128::new(0.00164478988615473925242687135163027703),
    f128::f128::new(0.00162342763178566565769766540632822565),
    f128::f128::new(0.00160261317817587914050936558975144184),
    f128::f128::new(0.00158232572025675473951336020301537543),
    f128::f128::new(0.00156254549336646059182623717693644031),
    f128::f128::new(0.00154325370901619943003758722223800191),
    f128::f128::new(0.00152443249535741012777516006541201253),
    f128::f128::new(0.00150606484195337511836587455471885287),
    f128::f128::new(0.00148813454849645577422621406243120680),
    f128::f128::new(0.00147062617714595319796692381124384014),
    f128::f128::new(0.00145352500819183169356668150998563279),
    f128::f128::new(0.00143681699877665295532730691232132154),
    f128::f128::new(0.00142048874443240640423739015288311063),
];
static mut lJACOBI_SN: [f128::f128; 88] = [
    f128::f128::new(0.133333333333333333333333333333333333),
    f128::f128::new(0.0816326530612244897959183673469387755),
    f128::f128::new(0.0741682559864378046196228014409832592),
    f128::f128::new(0.0709502262443438914027149321266968326),
    f128::f128::new(0.0691356875160036313694452850392234456),
    f128::f128::new(0.0679665136375911423170402376451525790),
    f128::f128::new(0.0671491414786433943522066127430112104),
    f128::f128::new(0.0665451022478544097547291059795993593),
    f128::f128::new(0.0660803289374717946146517575089003660),
    f128::f128::new(0.0657115478879081130488259944169887885),
    f128::f128::new(0.0654117584983313326913690986558324210),
    f128::f128::new(0.0651632314310966577667735269752989471),
    f128::f128::new(0.0649538394714156472799996802272518330),
    f128::f128::new(0.0647750047190328855039516771032524395),
    f128::f128::new(0.0646204875524200274682307182662247096),
    f128::f128::new(0.0644856401296682327127291998486377877),
    f128::f128::new(0.0643669288956803364001636106394598167),
    f128::f128::new(0.0642616193431845761716403159370115618),
    f128::f128::new(0.0641675621182470497538990689675621182),
    f128::f128::new(0.0640830443746643073673998205323313479),
    f128::f128::new(0.0640066842691658040936088633611538840),
    f128::f128::new(0.0639373546583592220572713848194757602),
    f128::f128::new(0.0638741269802850483858493608801293143),
    f128::f128::new(0.0638162293521948325559843283492718283),
    f128::f128::new(0.0637630148519381772604002043440832681),
    f128::f128::new(0.0637139372071136526684730199586351051),
    f128::f128::new(0.0636685319486830135170080728404399155),
    f128::f128::new(0.0636264016474624094503452630760745891),
    f128::f128::new(0.0635872042372870450559193721279473325),
    f128::f128::new(0.0635506436971407986552012076660438679),
    f128::f128::new(0.0635164625542647282953377810335249089),
    f128::f128::new(0.0634844358060809144874103701695775485),
    f128::f128::new(0.0634543659571873541138769710257378668),
    f128::f128::new(0.0634260789398024212554455436599970685),
    f128::f128::new(0.0633994207394466585362624705586466726),
    f128::f128::new(0.0633742545875900415711301817125560514),
    f128::f128::new(0.0633504586131360383892090527864154933),
    f128::f128::new(0.0633279238675595035319320689022355891),
    f128::f128::new(0.0633065526561241224022632641807825021),
    f128::f128::new(0.0632862571212214656620662989991154329),
    f128::f128::new(0.0632669580344788621187890031769872120),
    f128::f128::new(0.0632485837625994897816983723475668191),
    f128::f128::new(0.0632310693784614480670222280220691334),
    f128::f128::new(0.0632143558942142547231491793347102729),
    f128::f128::new(0.0631983895972736191236203448118033782),
    f128::f128::new(0.0631831214734580876576211401252492506),
    f128::f128::new(0.0631685067042097554837410137819071446),
    f128::f128::new(0.0631545042270307306418800612740449121),
    f128::f128::new(0.0631410763500519566499298347892141201),
    f128::f128::new(0.0631281884131127460009319915165060210),
    f128::f128::new(0.0631158084889316866582675155969963302),
    f128::f128::new(0.0631039071189426329431813657385193769),
    f128::f128::new(0.0630924570791929844168441760812401272),
    f128::f128::new(0.0630814331723869622592583712817914834),
    f128::f128::new(0.0630708120427293346371691454965353148),
    f128::f128::new(0.0630605720107052623408921603962253696),
    f128::f128::new(0.0630506929253359486693139231697881124),
    f128::f128::new(0.0630411560317907882669526183723252281),
    f128::f128::new(0.0630319438525254492239910205987482423),
    f128::f128::new(0.0630230400803605451462935505127575629),
    f128::f128::new(0.0630144294821244268441141487100133182),
    f128::f128::new(0.0630060978116620368437903104284681857),
    f128::f128::new(0.0629980317311645809853106304095146108),
    f128::f128::new(0.0629902187399059982519710116900037282),
    f128::f128::new(0.0629826471095851879522211025629876426),
    f128::f128::new(0.0629753058255704593910133559737027347),
    f128::f128::new(0.0629681845334270223004317456018676823),
    f128::f128::new(0.0629612734901814788868752070834879740),
    f128::f128::new(0.0629545635198408417968641138972612553),
    f128::f128::new(0.0629480459727389605947825152324343429),
    f128::f128::new(0.0629417126883315527433774503501116480),
    f128::f128::new(0.0629355559611032858765030867631851152),
    f128::f128::new(0.0629295685092873800533889095865830818),
    f128::f128::new(0.0629237434461307009797940084537341416),
    f128::f128::new(0.0629180742534659027450976347026882854),
    f128::f128::new(0.0629125547573773684532637358197768559),
    f128::f128::new(0.0629071791057699320890454947020834937),
    f128::f128::new(0.0629019417476690252459380084028850472),
    f128::f128::new(0.0628968374140983050099351803916073865),
    f128::f128::new(0.0628918611003962662746221735204718309),
    f128::f128::new(0.0628870080498470665701343133259403169),
    f128::f128::new(0.0628822737385130048545800855496113614),
    f128::f128::new(0.0628776538611669803523093451739050315),
    f128::f128::new(0.0628731443182329721334066277492113016),
    f128::f128::new(0.0628687412036512628117090270546644992),
    f128::f128::new(0.0628644407935929008720508221776268525),
    f128::f128::new(0.0628602395359548608299450549157781435),
    f128::f128::new(0.0628561340405736106069856843147540300),
];
static mut lJACOBI_COEF: [f128::f128; 1176] = [
    f128::f128::new(1.0),
    -f128::f128::new(0.333333333333333333333333333333333333),
    f128::f128::new(1.0),
    f128::f128::new(0.0857142857142857142857142857142857143),
    -f128::f128::new(0.857142857142857142857142857142857143),
    f128::f128::new(1.0),
    -f128::f128::new(0.021645021645021645021645021645021645),
    f128::f128::new(0.454545454545454545454545454545454545),
    -f128::f128::new(1.36363636363636363636363636363636364),
    f128::f128::new(1.0),
    f128::f128::new(0.00543900543900543900543900543900543901),
    -f128::f128::new(0.195804195804195804195804195804195804),
    f128::f128::new(1.07692307692307692307692307692307692),
    -f128::f128::new(1.86666666666666666666666666666666667),
    f128::f128::new(1.0),
    -f128::f128::new(0.0013639611162830977072463140574595683),
    f128::f128::new(0.0750178613955703738985472731602762563),
    -f128::f128::new(0.650154798761609907120743034055727554),
    f128::f128::new(1.95046439628482972136222910216718266),
    -f128::f128::new(2.36842105263157894736842105263157895),
    f128::f128::new(1.0),
    f128::f128::new(0.000341696263085413711339138718328380463),
    -f128::f128::new(0.0266523085206622694844528200296136761),
    f128::f128::new(0.333153856508278368555660250370170952),
    -f128::f128::new(1.51029748283752860411899313501144165),
    f128::f128::new(3.07453416149068322981366459627329193),
    -f128::f128::new(2.86956521739130434782608695652173913),
    f128::f128::new(1.0),
    -f128::f128::new(0.0000855506199428665440241695457740685901),
    f128::f128::new(0.00898281509400098712253780230627720196),
    -f128::f128::new(0.152707856598016781083142639206712433),
    f128::f128::new(0.967149758454106280193236714975845411),
    -f128::f128::new(2.90144927536231884057971014492753623),
    f128::f128::new(4.44888888888888888888888888888888889),
    -f128::f128::new(3.37037037037037037037037037037037037),
    f128::f128::new(1.0),
    f128::f128::new(0.0000214114454806951862129456593984042634),
    -f128::f128::new(0.00291195658537454532496060967818297982),
    f128::f128::new(0.0645483709758024213699601811997227193),
    -f128::f128::new(0.542206316196740339507665522077670842),
    f128::f128::new(2.22691879866518353726362625139043382),
    -f128::f128::new(4.94870844147818563836361389197874181),
    f128::f128::new(6.07341490545050055617352614015572859),
    -f128::f128::new(3.87096774193548387096774193548387097),
    f128::f128::new(1.0),
    -f128::f128::new(0.00000535749588218260503510068880185180269),
    f128::f128::new(0.000916131795853225461002217785116658261),
    -f128::f128::new(0.0256516902838903129080620979832664313),
    f128::f128::new(0.275328142380422691879866518353726363),
    -f128::f128::new(1.4749721913236929922135706340378198),
    f128::f128::new(4.4249165739710789766407119021134594),
    -f128::f128::new(7.77712609970674486803519061583577713),
    f128::f128::new(7.94805194805194805194805194805194805),
    -f128::f128::new(4.37142857142857142857142857142857143),
    f128::f128::new(1.0),
    f128::f128::new(0.00000134030215763542648487272949235516339),
    -f128::f128::new(0.000281463453103439561823273193394584312),
    f128::f128::new(0.00971048913206866488290292517211315876),
    -f128::f128::new(0.129473188427582198438705668961508784),
    f128::f128::new(0.873944021886179839461263265490184289),
    -f128::f128::new(3.37925021795989537925021795989537925),
    f128::f128::new(7.93611793611793611793611793611793612),
    -f128::f128::new(11.5117315117315117315117315117315117),
    f128::f128::new(10.0727650727650727650727650727650728),
    -f128::f128::new(4.87179487179487179487179487179487179),
    f128::f128::new(1.0),
    -f128::f128::new(0.000000335265599272389721967597110679879215),
    f128::f128::new(0.0000848221966159145996578020690020094413),
    -f128::f128::new(0.00353425819232977498574175287508372672),
    f128::f128::new(0.0572549827157423547690163965763563729),
    -f128::f128::new(0.474398428216150939514707285918381375),
    f128::f128::new(2.28765464273121675277092180098419463),
    -f128::f128::new(6.86296392819365025831276540295258389),
    f128::f128::new(13.1980075542185581890630103902934306),
    -f128::f128::new(16.277542650202888433177712814695231),
    f128::f128::new(12.4475326148610323312535450935904708),
    -f128::f128::new(5.37209302325581395348837209302325581),
    f128::f128::new(1.0),
    f128::f128::new(0.0000000838560293215575238396495846570478035),
    -f128::f128::new(0.0000251568087964672571518948753971143411),
    f128::f128::new(0.00124526203542512922901879633215715988),
    -f128::f128::new(0.0240750660182191650943633957550384244),
    f128::f128::new(0.239890836395826680761692407701990015),
    -f128::f128::new(1.40735957352218319380192879185167475),
    f128::f128::new(5.22428932595355882547685687884333809),
    -f128::f128::new(12.744969564414176475339145352782649),
    f128::f128::new(20.7105755421730367724261111982718046),
    -f128::f128::new(22.199571169388091703777008081807686),
    f128::f128::new(15.0723404255319148936170212765957447),
    -f128::f128::new(5.87234042553191489361702127659574468),
    f128::f128::new(1.0),
    -f128::f128::new(0.0000000209723962889049429370872310566846247),
    f128::f128::new(0.00000736131109740563497091761810089630328),
    -f128::f128::new(0.00042695604364952682831322184985198559),
    f128::f128::new(0.00970613405896590989698724338663513909),
    -f128::f128::new(0.114393722837812509500206797056771282),
    f128::f128::new(0.800756059864687566501447579397398975),
    -f128::f128::new(3.59126960181738666188528005305500146),
    f128::f128::new(10.7738088054521599856558401591650044),
    -f128::f128::new(22.086308051176927970594472326288259),
    f128::f128::new(31.0363152353139837495281800663527822),
    -f128::f128::new(29.4028249597711424995530126944394779),
    f128::f128::new(17.9471788715486194477791116446578631),
    -f128::f128::new(6.37254901960784313725490196078431373),
    f128::f128::new(1.0),
    f128::f128::new(0.00000000524489773400058435716521147180895075),
    -f128::f128::new(0.000002129428480004237249009075857554434),
    f128::f128::new(0.000143026612906951268558442928432406151),
    -f128::f128::new(0.00377590258074351348994289331061552238),
    f128::f128::new(0.0519186604852233104867147830209634327),
    -f128::f128::new(0.426886763989613886224099327061254891),
    f128::f128::new(2.27026142667203748582816460300758283),
    -f128::f128::new(8.18292030712558566320481307457678206),
    f128::f128::new(20.5254917703733440385387394620634283),
    -f128::f128::new(36.2214560653647247738918931683472265),
    f128::f128::new(44.8002219755826859045504994450610433),
    -f128::f128::new(38.0123095550398547068913328624760367),
    f128::f128::new(21.0720411663807890222984562607204117),
    -f128::f128::new(6.87272727272727272727272727272727273),
    f128::f128::new(1.0),
    -f128::f128::new(0.00000000131161433074471943038237967522787023),
    f128::f128::new(0.000000609900663796294535127806548980959656),
    -f128::f128::new(0.0000469623511123146792048411042715338935),
    f128::f128::new(0.00142452465040687860254684682956986144),
    -f128::f128::new(0.0225888908850233606975285711546078028),
    f128::f128::new(0.215347426437222705316439045007261053),
    -f128::f128::new(1.33776431574638347242030315837843988),
    f128::f128::new(5.68917351861374070139183870651050805),
    -f128::f128::new(17.0675205558412221041755161195315241),
    f128::f128::new(36.7007468161553076619199006753324931),
    -f128::f128::new(56.7895766523666339610760568344618577),
    f128::f128::new(62.6897924084566738531359068951851676),
    -f128::f128::new(48.1530289514232422350174357310842592),
    f128::f128::new(24.4469223907225691347011596788581624),
    -f128::f128::new(7.37288135593220338983050847457627119),
    f128::f128::new(1.0),
    f128::f128::new(0.00000000032798890758409455440995755084412784),
    -f128::f128::new(0.0000001731781432044019247284575868456995),
    f128::f128::new(0.0000151530875303851684137400388489987062),
    -f128::f128::new(0.000523286622715967815887822674918755321),
    f128::f128::new(0.009475225632749845809111646292278891),
    -f128::f128::new(0.103595800251398314179620666128915875),
    f128::f128::new(0.742436568468354584953948107257230437),
    -f128::f128::new(3.67138962429406113438765547544784282),
    f128::f128::new(12.9416484256365654987164855509536459),
    -f128::f128::new(33.1576874696047952646853747449269883),
    f128::f128::new(62.3015496139416416289088357049417622),
    -f128::f128::new(85.7657695984131689956407348665432051),
    f128::f128::new(85.4550240563899328760913119141281935),
    -f128::f128::new(59.9499861072520144484579049736037788),
    f128::f128::new(28.0718188914910226385636221701795472),
    -f128::f128::new(7.87301587301587301587301587301587302),
    f128::f128::new(1.0),
    -f128::f128::new(0.0000000000820160551915221514930984553086693956),
    f128::f128::new(0.0000000487995528389556801383935809086582904),
    -f128::f128::new(0.00000481488921344362710698816664965428465),
    f128::f128::new(0.000187780679324301457172538499336517101),
    -f128::f128::new(0.00384950392614817987203703923639860058),
    f128::f128::new(0.0478193932159296121881934429588181717),
    -f128::f128::new(0.391249580857605917903400896935785041),
    f128::f128::new(2.22281355278442043468195894193187765),
    -f128::f128::new(9.07648867386971677495133234622183373),
    f128::f128::new(27.2294660216091503248539970386655012),
    -f128::f128::new(60.7647031219067354617794460231272237),
    f128::f128::new(101.27450520317789243629907670521204),
    -f128::f128::new(125.492321664807388453674942873849701),
    f128::f128::new(113.90841504959439875025879430087896),
    -f128::f128::new(73.5281832595265431086326608714668416),
    f128::f128::new(31.9467278989667049368541905855338691),
    -f128::f128::new(8.37313432835820895522388059701492537),
    f128::f128::new(1.0),
    f128::f128::new(0.0000000000205081991446447510877823245056378873),
    -f128::f128::new(0.0000000136584606303334042244630281207548329),
    f128::f128::new(0.00000150925989965184116680316460734340904),
    -f128::f128::new(0.0000660049662781071870281917321611517552),
    f128::f128::new(0.00152047154462068341547084525871224579),
    -f128::f128::new(0.0212866016246895678165918336219714411),
    f128::f128::new(0.197062327161898877817236520348856826),
    -f128::f128::new(1.27332580627688505666522059302338256),
    f128::f128::new(5.95279814434443763990990627238431349),
    -f128::f128::new(20.6208040294284441121062112703508899),
    f128::f128::new(53.7226210240372622920661819938088973),
    -f128::f128::new(106.049849294203426862260515104661719),
    f128::f128::new(158.690535356905852514904321515309022),
    -f128::f128::new(178.709956740392436986015328229548006),
    f128::f128::new(148.924963950327030821679440191290005),
    -f128::f128::new(89.0126221312299494566359872407710376),
    f128::f128::new(36.0716472749540722596448254745866503),
    -f128::f128::new(8.87323943661971830985915492957746479),
    f128::f128::new(1.0),
    -f128::f128::new(5.12798623361071492952949812752845071e-12),
    f128::f128::new(0.00000000379983779910553976278135811249858198),
    -f128::f128::new(0.000000467380049289981390822107047837325583),
    f128::f128::new(0.0000227769877353984264460640167979390001),
    -f128::f128::new(0.000585693970338816680041646146232717145),
    f128::f128::new(0.00917587220197479465398578962431256861),
    -f128::f128::new(0.0953734595538592292823371467011882131),
    f128::f128::new(0.694863776749545813342742068822942696),
    -f128::f128::new(3.68277801677259281071653296476159629),
    f128::f128::new(14.5626189552118866044673362332076193),
    -f128::f128::new(43.6878568656356598134020086996228579),
    f128::f128::new(100.425333314513140090547474543288907),
    -f128::f128::new(177.563632816965262189083940496829662),
    f128::f128::new(240.940190991635940385803131566467326),
    -f128::f128::new(248.589085943751367064717516695561527),
    f128::f128::new(191.442169634843006819954869179340486),
    -f128::f128::new(106.528304071001350569168435269149141),
    f128::f128::new(40.4465753424657534246575342465753425),
    -f128::f128::new(9.37333333333333333333333333333333333),
    f128::f128::new(1.0),
    f128::f128::new(1.2822073091109481189897035429838523e-12),
    -f128::f128::new(0.00000000105140999347097745757155690524675889),
    f128::f128::new(0.000000143166994110964763805993665264433668),
    -f128::f128::new(0.00000773101768199209724552365792427941808),
    f128::f128::new(0.000220610111711131632113335810053544823),
    -f128::f128::new(0.00384351839070060443504122833515509203),
    f128::f128::new(0.0445498722558479150425233284302067485),
    -f128::f128::new(0.363252804547682999577497908738608873),
    f128::f128::new(2.1643812937632778724825917062342112),
    -f128::f128::new(9.67605754858877166521629233375294418),
    f128::f128::new(33.0513755212321726880282827610824251),
    -f128::f128::new(87.2785241036866897822391882435509928),
    f128::f128::new(179.300446256486786617860941065555844),
    -f128::f128::new(286.88071401037885858857750570488935),
    f128::f128::new(355.944589605470065285827645967177527),
    -f128::f128::new(338.761057693481855237546311334279302),
    f128::f128::new(242.460031212068666551066412346107161),
    -f128::f128::new(126.200230149597238204833141542002301),
    f128::f128::new(45.0715107677132993588689791221436791),
    -f128::f128::new(9.87341772151898734177215189873417722),
    f128::f128::new(1.0),
    -f128::f128::new(3.20599507156850184147209825339261597e-13),
    f128::f128::new(0.000000000289501354962635716284930472281353222),
    -f128::f128::new(0.0000000434252032443953574427395708422029833),
    f128::f128::new(0.00000258524709981633694642442911747248427),
    -f128::f128::new(0.0000814352836442146138123695172003832545),
    f128::f128::new(0.0015689864648785348927849860313940507),
    -f128::f128::new(0.0201590988214696604406313356760932575),
    f128::f128::new(0.182761060744093075423306065195350961),
    -f128::f128::new(1.21536105394821895156498533354908389),
    f128::f128::new(6.09269234234172507091727941720357742),
    -f128::f128::new(23.4728989189165407995339396494369404),
    f128::f128::new(70.4186967567496223986018189483108211),
    -f128::f128::new(165.841133666258168692359356218847948),
    f128::f128::new(307.699088002319002219977513230662501),
    -f128::f128::new(449.33835073354520959107827328922143),
    f128::f128::new(513.381977734648204981071038677570231),
    -f128::f128::new(453.34940775761272939860708657414468),
    f128::f128::new(303.041047966318669384095646105711684),
    -f128::f128::new(148.153401227978016143335649207236824),
    f128::f128::new(49.9464524765729585006693440428380187),
    -f128::f128::new(10.3734939759036144578313253012048193),
    f128::f128::new(1.0),
    f128::f128::new(8.01607151768784300863003336108579705e-14),
    -f128::f128::new(0.0000000000793591080251096457854373302747493908),
    f128::f128::new(0.0000000130545732701305367317044408301962748),
    -f128::f128::new(0.000000852898786981861733138023467572823287),
    f128::f128::new(0.0000295163901637651435503837407170737773),
    -f128::f128::new(0.000625747471471821043268135303201964079),
    f128::f128::new(0.00886475584585079811296525012869449112),
    -f128::f128::new(0.0888423882573178887804869023886744604),
    f128::f128::new(0.655212613397719429756090905116474146),
    -f128::f128::new(3.65719981595851237262550086908149621),
    f128::f128::new(15.764456048789587543054132693567081),
    -f128::f128::new(53.2306308140947111843386298743823516),
    f128::f128::new(142.141213441984790372672355860216642),
    -f128::f128::new(301.776730076829247252750540133998408),
    f128::f128::new(510.146377034639917974887817845568738),
    -f128::f128::new(684.88617054765451056858502441795895),
    f128::f128::new(724.929918422416568646183745603686388),
    -f128::f128::new(597.001109289048938885092496379506437),
    f128::f128::new(374.310219316149731523192914396674671),
    -f128::f128::new(172.512818006305139421784501087514358),
    f128::f128::new(55.0713995943204868154158215010141988),
    -f128::f128::new(10.8735632183908045977011494252873563),
    f128::f128::new(1.0),
    -f128::f128::new(2.00426531958487246480748457293477454e-14),
    f128::f128::new(0.0000000000216661081047124713445689082334249128),
    -f128::f128::new(0.00000000389267742281334068490754717927200934),
    f128::f128::new(0.000000277937167988872524902398868600021467),
    -f128::f128::new(0.0000105219070738644598713051000255722412),
    f128::f128::new(0.000244342064270852457011418433927177602),
    -f128::f128::new(0.00379840845366507001354114110923157909),
    f128::f128::new(0.0418659744947919255338655443138381739),
    -f128::f128::new(0.340509925890974327675439760419217148),
    f128::f128::new(2.10314954226778261211301028494222356),
    -f128::f128::new(10.072979386650958826435996627881176),
    f128::f128::new(37.9808010639523166139642989735259926),
    -f128::f128::new(113.942403191856949841892896920577978),
    f128::f128::new(273.81235967027777792774877690760431),
    -f128::f128::new(528.791064971700470601207955403574461),
    f128::f128::new(820.537859438845557829460620453822439),
    -f128::f128::new(1019.055083496630773433362383466844),
    f128::f128::new(1004.5231036963223132061486596384398),
    -f128::f128::new(774.917822851448641616171823149653563),
    f128::f128::new(457.455044784283337511680379241971876),
    -f128::f128::new(199.403481059815813787142729413167228),
    f128::f128::new(60.4463514014075811828620817384862329),
    -f128::f128::new(11.3736263736263736263736263736263736),
    f128::f128::new(1.0),
    f128::f128::new(5.01123043685680053736246001314421841e-15),
    -f128::f128::new(5.89320699374359743193825297545760085e-12),
    f128::f128::new(0.00000000115212196727687329794392845670196097),
    -f128::f128::new(0.0000000895582809229889510268413720342990992),
    f128::f128::new(0.00000369427908807329422985720659641483784),
    -f128::f128::new(0.0000935884035645234538230492337758425586),
    f128::f128::new(0.00158958485448228472326724531913211376),
    -f128::f128::new(0.0191798260463906442433784105539237463),
    f128::f128::new(0.171179947464036499872152314193769435),
    -f128::f128::new(1.16357611348103241743162357360470727),
    f128::f128::new(6.15470523183388199746727206038279373),
    -f128::f128::new(25.7378582422144156257722286161462283),
    f128::f128::new(86.0726201361011073282165471474745245),
    -f128::f128::new(231.998816120690984675439062465192872),
    f128::f128::new(506.34662248563508560115668395180984),
    -f128::f128::new(896.291722560779346926185394581364545),
    f128::f128::new(1284.8052716546655557752375313454641),
    -f128::f128::new(1484.05314800752812859599629289101735),
    f128::f128::new(1368.62679205138705192741880344393822),
    -f128::f128::new(992.887146438417349193433271346242523),
    f128::f128::new(553.725523975271213973260862866173715),
    -f128::f128::new(228.950390865501222037724584413888319),
    f128::f128::new(66.0713073005093378607809847198641766),
    -f128::f128::new(11.8736842105263157894736842105263158),
    f128::f128::new(1.0),
    -f128::f128::new(1.25293806923806915445249052291567931e-15),
    f128::f128::new(1.59749603827853817192692541671749112e-12),
    -f128::f128::new(0.000000000338669160115050092448508188344108117),
    f128::f128::new(0.0000000285610991697025577964908572170197846),
    -f128::f128::new(0.00000127912922710025026702855481964795749),
    f128::f128::new(0.0000352186913861602240188528760343070964),
    -f128::f128::new(0.000651012174107810201560613769119009963),
    f128::f128::new(0.0085633139824950418820665349630269772),
    -f128::f128::new(0.0834923113293266583501487158895130277),
    f128::f128::new(0.621553873229431789939995996066374762),
    -f128::f128::new(3.61155513708048787417766094556461967),
    f128::f128::new(16.6506762813451064328970082555251946),
    -f128::f128::new(61.6557650707778941102200812940099597),
    f128::f128::new(184.967295212333682330660243882029879),
    -f128::f128::new(452.142277185704556808280596156073037),
    f128::f128::new(903.245146837648873256082386343971194),
    -f128::f128::new(1475.05759866632174866416680027946909),
    f128::f128::new(1964.11412870542307709827557898175296),
    -f128::f128::new(2119.99620241220268639178951382157462),
    f128::f128::new(1836.52587093745581225120883914272965),
    -f128::f128::new(1257.3138654879505176181352821823303),
    f128::f128::new(664.434156558673037765681246681719263),
    -f128::f128::new(261.278547822226606816948650915010112),
    f128::f128::new(71.9462667916276163698844111215245236),
    -f128::f128::new(12.3737373737373737373737373737373737),
    f128::f128::new(1.0),
    f128::f128::new(3.13264627327522625274529255993817349e-16),
    -f128::f128::new(4.31678656457326177628301314759480307e-13),
    f128::f128::new(0.0000000000989263587714705823731523846323809038),
    -f128::f128::new(0.00000000902208391995811711243149747847313842),
    f128::f128::new(0.000000437248852835113032913197931367430316),
    -f128::f128::new(0.0000130397324556604820037669249754464774),
    f128::f128::new(0.000261387364224830571075509723371449843),
    -f128::f128::new(0.0037341052032118653010787103338778549),
    f128::f128::new(0.0396126326974058710689433187918875774),
    -f128::f128::new(0.321561371308353541618481058428263863),
    f128::f128::new(2.04276092194306697228161388169954991),
    -f128::f128::new(10.3287651810800962061685065533553),
    f128::f128::new(42.100945031576479101230325625089538),
    -f128::f128::new(139.645596135505982988080895457989298),
    f128::f128::new(379.407479447525514626346771522103199),
    -f128::f128::new(847.779471317229425785767958435596114),
    f128::f128::new(1560.52955103352916480323819768487752),
    -f128::f128::new(2364.43871368716540121702757224981443),
    f128::f128::new(2938.65954415404842722687712551048365),
    -f128::f128::new(2976.28107459129798034926957804191232),
    f128::f128::new(2430.62954424956001728523682206756173),
    -f128::f128::new(1575.25120289344307740436950837828042),
    f128::f128::new(790.955942256221418358430778519749683),
    -f128::f128::new(296.512952266100396447411731464408577),
    f128::f128::new(78.0712294530423916178025569547245987),
    -f128::f128::new(12.8737864077669902912621359223300971),
    f128::f128::new(1.0),
    -f128::f128::new(7.83231275623507836578685073508351521e-17),
    f128::f128::new(1.16309844430090913731934733415990201e-13),
    -f128::f128::new(0.0000000000287285315742324556917878791537495796),
    f128::f128::new(0.00000000282497227146619147635914145011870866),
    -f128::f128::new(0.00000014770569305094658290677796724906391),
    f128::f128::new(0.00000475612331624047996959825054541985791),
    -f128::f128::new(0.000103049338518543732674628761817430255),
    f128::f128::new(0.0015933013109405607898154139327156524),
    -f128::f128::new(0.0183229650758164490828772602262300026),
    f128::f128::new(0.161553463315531959560793621210354729),
    -f128::f128::new(1.11726974103478418348885693826529533),
    f128::f128::new(6.16674857064653607769823634756818853),
    -f128::f128::new(27.5269356486830885787109680442174213),
    f128::f128::new(100.367442288275261433146145022761982),
    -f128::f128::new(301.102326864825784299438435068285946),
    f128::f128::new(746.87220847620004887148062399696675),
    -f128::f128::new(1535.90655775347590695344805741311711),
    f128::f128::new(2620.07589263828242950882315676355271),
    -f128::f128::new(3701.37705467947835279817874526914589),
    f128::f128::new(4312.1305942851959757350048255696024),
    -f128::f128::new(4113.10918224126385377800460285100537),
    f128::f128::new(3176.79164482048834234886534366541065),
    -f128::f128::new(1954.43206901218204571568671248759936),
    f128::f128::new(934.728380831913152298806688581025782),
    -f128::f128::new(334.778604482351873695671899101714908),
    f128::f128::new(84.4461949265687583444592790387182911),
    -f128::f128::new(13.3738317757009345794392523364485981),
    f128::f128::new(1.0),
    f128::f128::new(1.95824002707753632998638097971961596e-17),
    -f128::f128::new(3.12535108321574798265826404363250707e-14),
    f128::f128::new(8.29780712593781089395769103584430628e-12),
    -f128::f128::new(0.000000000877354806782491205187793198856604651),
    f128::f128::new(0.0000000493512078815151302918133674356840116),
    -f128::f128::new(0.00000171084187322585785011619673777037907),
    f128::f128::new(0.0000399455655551673779852887753470326386),
    -f128::f128::new(0.0006663447089312536239743775931515994),
    f128::f128::new(0.00827933300847082627788164159490862254),
    -f128::f128::new(0.0790053999501137670961254688141607118),
    f128::f128::new(0.592540499625853253220941016106205339),
    -f128::f128::new(3.55524299775511951932564609663723203),
    f128::f128::new(17.2996063260330634581679083615355167),
    -f128::f128::new(68.985507072427231513186489958615476),
    f128::f128::new(227.214170119502389507717407403376369),
    -f128::f128::new(621.574396418868605779732677724179033),
    f128::f128::new(1417.34000473737982487273721472993243),
    -f128::f128::new(2698.25155982089421205718956387088741),
    f128::f128::new(4287.22192282653191471309008481707666),
    -f128::f128::new(5671.57380971361974492627849058304594),
    f128::f128::new(6216.91744526300625886149757621603113),
    -f128::f128::new(5603.16833626491621007726146242002341),
    f128::f128::new(4104.6465719149967585449706061914125),
    -f128::f128::new(2403.30031167196911659734510855265312),
    f128::f128::new(1097.25147208427668000676660541189393),
    -f128::f128::new(376.200504714609147430891407569792205),
    f128::f128::new(91.071162906025291346392263823456484),
    -f128::f128::new(13.8738738738738738738738738738738739),
    f128::f128::new(1.0),
    -f128::f128::new(4.89597679721040056646845079115739304e-18),
    f128::f128::new(8.3770163000269953692275193036702995e-15),
    -f128::f128::new(2.38465730674101801510676716177814526e-12),
    f128::f128::new(0.000000000270420138584431442913107396145641672),
    -f128::f128::new(0.0000000163217869359888978043982678387905152),
    f128::f128::new(0.000000607533180395142307163713302888313622),
    -f128::f128::new(0.00001524355979900538879792589741792496),
    f128::f128::new(0.000273546518151382416560582313005180875),
    -f128::f128::new(0.00366096423459266800830245995571933738),
    f128::f128::new(0.0376863965325715824384076760147578848),
    -f128::f128::new(0.305458161369264405027093795066984961),
    f128::f128::new(1.98481688404877000842280427011058193),
    -f128::f128::new(10.4850109309532850444943790790624219),
    f128::f128::new(45.521078226384877531635596555560238),
    -f128::f128::new(163.779540708686331859852939988259057),
    f128::f128::new(491.338622126058995579558819964777172),
    -f128::f128::new(1234.29016767957562195994010015345233),
    f128::f128::new(2602.7901396879464541508184286658362),
    -f128::f128::new(4610.65681887579086163859264506519555),
    f128::f128::new(6853.67905508563506459790798590772312),
    -f128::f128::new(8523.16497876034104187175736709037363),
    f128::f128::new(8820.13936826418567747704508022941103),
    -f128::f128::new(7533.48055978590066321506598818748849),
    f128::f128::new(5247.96085372525060693532616181949682),
    -f128::f128::new(2931.04196617633677515004918612259131),
    f128::f128::new(1280.08771584027769363696025679639702),
    -f128::f128::new(420.903653172218004845938666638935973),
    f128::f128::new(97.9461331281262023855328972681800693),
    -f128::f128::new(14.3739130434782608695652173913043478),
    f128::f128::new(1.0),
    f128::f128::new(1.22408211097388525259474805746023739e-18),
    -f128::f128::new(2.24007026308221001224838894515223442e-15),
    f128::f128::new(6.82101395108532948729634433798855382e-13),
    -f128::f128::new(0.000000000082761635939835331112528977967594453),
    f128::f128::new(0.00000000534699283625578978509160432654922734),
    -f128::f128::new(0.00000021316678107206415276565195915176253),
    f128::f128::new(0.00000573289449095324047210654890142997713),
    -f128::f128::new(0.000110373968660989860517919490937421098),
    f128::f128::new(0.00158662579950172924494509268222542829),
    -f128::f128::new(0.0175669549304309107250783464293455916),
    f128::f128::new(0.153387253839920425752131456454128087),
    -f128::f128::new(1.07570281913710428449546735695102814),
    f128::f128::new(6.14631647021454150959910152866583833),
    -f128::f128::new(28.9349667674715338759588471964884081),
    f128::f128::new(113.213798542567192070219933871974486),
    -f128::f128::new(370.61252672325444024826019731883142),
    f128::f128::new(1019.93165116379498173160316399234857),
    -f128::f128::new(2367.11409949244396829687579236726886),
    f128::f128::new(4640.29509979867984261371683106916991),
    -f128::f128::new(7683.21976694973447624803185115862558),
    f128::f128::new(10726.9568284721292879924444691176196),
    -f128::f128::new(12583.3059195782236711641915375247337),
    f128::f128::new(12330.5756738361663247031771197520382),
    -f128::f128::new(10007.4237352873233939619988218277412),
    f128::f128::new(6645.00033486720321106164638080583169),
    -f128::f128::new(3547.61650530869461227291161881388892),
    f128::f128::new(1484.86211195047172685630916172074536),
    -f128::f128::new(469.013050036067938881238113974686865),
    f128::f128::new(105.071105365223012281835811247575953),
    -f128::f128::new(14.8739495798319327731092436974789916),
    f128::f128::new(1.0),
    -f128::f128::new(3.06041089493638851367671673843280476e-19),
    f128::f128::new(5.9769824778107667672106277901592677e-16),
    -f128::f128::new(1.942519305288499199343454031801762e-13),
    f128::f128::new(0.0000000000251621000678370262954955412252721571),
    -f128::f128::new(0.00000000173618490468075481438919234454377884),
    f128::f128::new(0.0000000739614769394001550929795938775649787),
    -f128::f128::new(0.00000212695277622699233888598892696391408),
    f128::f128::new(0.0000438245764332484685210025190995311968),
    -f128::f128::new(0.000674898477072026415223438794132780431),
    f128::f128::new(0.00801497080287498036902606724796903296),
    -f128::f128::new(0.0751719893195958685137076412414779828),
    f128::f128::new(0.567206828502405189694339474822061143),
    -f128::f128::new(3.49366524802206095101585908404892733),
    f128::f128::new(17.7693189384014361600898925105626981),
    -f128::f128::new(75.3080659770346580118095444495276252),
    f128::f128::new(267.819719693040496423607736237745371),
    -f128::f128::new(803.459159079121489270823208713236112),
    f128::f128::new(2040.87219552183265991251884566196339),
    -f128::f128::new(4399.21339923595040025587395620467663),
    f128::f128::new(8053.75198409198885509147906349277215),
    -f128::f128::new(12514.2915445121672979113751601964613),
    f128::f128::new(16467.7030428946405906313450133595711),
    -f128::f128::new(18278.10591441794145894599605076908),
    f128::f128::new(17006.5855029801716183236658907155787),
    -f128::f128::new(13146.9348923747425985622665396311921),
    f128::f128::new(8338.91298887769387680235191942321326),
    -f128::f128::new(4263.78808933565343022020709002182397),
    f128::f128::new(1713.26216028511580878869257635398238),
    -f128::f128::new(520.65369546326896007344683489198945),
    f128::f128::new(112.446079419471880669219915339649264),
    -f128::f128::new(15.373983739837398373983739837398374),
    f128::f128::new(1.0),
    f128::f128::new(7.65150919181261480994197715580459975e-20),
    -f128::f128::new(1.59151391189702388046793124840735675e-16),
    f128::f128::new(5.50929065835019766621982200490346661e-14),
    -f128::f128::new(7.60282110852327277938335436676678392e-12),
    f128::f128::new(0.000000000559078880801764951883940237184743146),
    -f128::f128::new(0.0000000253946051635290569255727521067914442),
    f128::f128::new(0.000000779152658426459701125527621458373857),
    -f128::f128::new(0.0000171413584853821134247616076720842249),
    f128::f128::new(0.000282118191738580616782534792936386201),
    -f128::f128::new(0.00358456055385490666029573619260349526),
    f128::f128::new(0.036015400512152720076339791535158276),
    -f128::f128::new(0.291553242241236305379893550522709854),
    f128::f128::new(1.9299557013577490214821214376992424),
    -f128::f128::new(10.5702189182055177176559266433989276),
    f128::f128::new(48.3489643110511643752039607577691689),
    -f128::f128::new(186.060152314252067043888345536794457),
    f128::f128::new(605.82085884580058120137031863290937),
    -f128::f128::new(1675.99638668214349736992287792918956),
    f128::f128::new(3950.56291146505252951481821226166111),
    -f128::f128::new(7946.08244212174150317774246392317042),
    f128::f128::new(13640.7748589756562471217912297347759),
    -f128::f128::new(19962.1095497204725567635969215630867),
    f128::f128::new(24836.5781606987274834151729140377939),
    -f128::f128::new(26156.3963238276453690072835519818312),
    f128::f128::new(23165.1063187090582656367697415158239),
    -f128::f128::new(17094.902948663664222151542731698208),
    f128::f128::new(10378.1273557121038452729953989570569),
    -f128::f128::new(5091.15681600971132032260151646949961),
    f128::f128::new(1967.03786073102482830645967681776121),
    -f128::f128::new(575.950589590935279431534472825043211),
    f128::f128::new(120.07105511811023622047244094488189),
    -f128::f128::new(15.8740157480314960629921259842519685),
    f128::f128::new(1.0),
    -f128::f128::new(1.91299049265686120906591239027601834e-20),
    f128::f128::new(4.22962197926432013324473229490027655e-17),
    -f128::f128::new(1.55650088836926980903406148452330177e-14),
    f128::f128::new(2.2839056368671752331226462182905248e-12),
    -f128::f128::new(0.000000000178634048026396920019235543502008904),
    f128::f128::new(0.00000000863397898794251780092971793593043036),
    -f128::f128::new(0.000000282043313606122248163704119240394058),
    f128::f128::new(0.00000661097129584460170695803171801934644),
    -f128::f128::new(0.00011602254624207275995711345665123953),
    f128::f128::new(0.00157350838857713056804581975523739886),
    -f128::f128::new(0.0168945111194597176779656436878120719),
    f128::f128::new(0.146345959956878333651988108308709766),
    -f128::f128::new(1.03820793331727455540069824662483232),
    f128::f128::new(6.10466264790557438575610569015401407),
    -f128::f128::new(30.0388162039798104695935359356784819),
    f128::f128::new(124.643823559042661833600764054941747),
    -f128::f128::new(438.766362770339692664247850886952198),
    f128::f128::new(1316.29908831101907799274355266085659),
    -f128::f128::new(3376.41162969937592069249774777768929),
    f128::f128::new(7420.42100694955305472248793786135129),
    -f128::f128::new(13984.6395900203115262077657290463928),
    f128::f128::new(22593.0704642488424308420466075534639),
    -f128::f128::new(31238.6217412658413314391088400422101),
    f128::f128::new(36852.5189817252099185383110083976218),
    -f128::f128::new(36917.8603274374886595286271626678303),
    f128::f128::new(31191.8248480798373572343911129479219),
    -f128::f128::new(22017.7587162916498992242760797279449),
    f128::f128::new(12816.7666042424488931193724489261901),
    -f128::f128::new(6042.18997057144019247056129735091821),
    f128::f128::new(2248.00171318901132387743206162783708),
    -f128::f128::new(635.028732539268735558596627578485052),
    f128::f128::new(127.946032309604118586898633055210367),
    -f128::f128::new(16.3740458015267175572519083969465649),
    f128::f128::new(1.0),
    f128::f128::new(4.78274259066368697716339778331887849e-21),
    -f128::f128::new(1.12203141176970096484253311996660889e-17),
    f128::f128::new(4.38153266296068226771009183346960773e-15),
    -f128::f128::new(6.82350686711743585158051634865666911e-13),
    f128::f128::new(0.0000000000566594766644572798390167875379526988),
    -f128::f128::new(0.00000000290851980210880703173619509361490521),
    f128::f128::new(0.000000100960891918655710753145802416238603),
    -f128::f128::new(0.00000251625607551111156030917230637394673),
    f128::f128::new(0.0000469910822101700083887737928215334552),
    -f128::f128::new(0.000678760076369122343393399229644372131),
    f128::f128::new(0.00777001666369916366779285960250794413),
    -f128::f128::new(0.0718474268123870718372534550257877432),
    f128::f128::new(0.544842986660601961432505367278890386),
    -f128::f128::new(3.42999615602335880951047994293110686),
    f128::f128::new(18.1027574901232826057497552543586195),
    -f128::f128::new(80.7341368525038350693207475711625791),
    f128::f128::new(306.171192378144584204420012462412926),
    -f128::f128::new(992.191136797623625817532232899584134),
    f128::f128::new(2757.66139767085550604206180921773305),
    -f128::f128::new(6590.14388063589936010051755261136773),
    f128::f128::new(13560.4883697700236832837572717195451),
    -f128::f128::new(24034.0362976411801866330006929663483),
    f128::f128::new(36660.7974392137663946209513741547998),
    -f128::f128::new(48030.9578044191953923729565829506362),
    f128::f128::new(53864.5049845658529887870479409863075),
    -f128::f128::new(51446.0986383200391811272212987379427),
    f128::f128::new(41552.6181309508008770642941259037229),
    -f128::f128::new(28108.2699865551189720462870117923157),
    f128::f128::new(15715.0782197558165161895150111384311),
    -f128::f128::new(7130.25327575127791115676724643304494),
    f128::f128::new(2558.02871757178614326810576355083816),
    -f128::f128::new(698.013124414088656756394803803401634),
    f128::f128::new(136.071010860484544695071010860484545),
    -f128::f128::new(16.8740740740740740740740740740740741),
    f128::f128::new(1.0),
    -f128::f128::new(1.19574843638868947635745086627008247e-21),
    f128::f128::new(2.97143486442589334874826540268115494e-18),
    -f128::f128::new(1.22918355558417788193219912157577109e-15),
    f128::f128::new(2.02815286671389350518812855060002231e-13),
    -f128::f128::new(0.0000000000178477452270822628456555312452801963),
    f128::f128::new(0.000000000971313956913876926866897689326471127),
    -f128::f128::new(0.0000000357620138681927413982812331070200733),
    f128::f128::new(0.000000945924916271867346655636572402168313),
    -f128::f128::new(0.0000187608441727253690420034586859763382),
    f128::f128::new(0.000288034137004783607056641336296460251),
    -f128::f128::new(0.00350795259488983824594246343257899485),
    f128::f128::new(0.0345480179799756796948878974420658584),
    -f128::f128::new(0.279388319316325061880397779314097811),
    f128::f128::new(1.87834916217283156987282814708093451),
    -f128::f128::new(10.6042251642243983336206753065362811),
    f128::f128::new(50.6808830262586761737870895684802952),
    -f128::f128::new(206.401983292424447320665163161956041),
    f128::f128::new(720.01547469389419502057348361488052),
    -f128::f128::new(2160.04642408168258506172045084464156),
    f128::f128::new(5589.081714658009419953441678643532),
    -f128::f128::new(12496.6134748250877287164131891722049),
    f128::f128::new(24165.9250122924170363679767247058318),
    -f128::f128::new(40412.7836886327735217062782013579554),
    f128::f128::new(58374.0208835806728646868462908503801),
    -f128::f128::new(72657.0259933929651613655427237180263),
    f128::f128::new(77639.2220615113399152877513676301195),
    -f128::f128::new(70847.2539173670598020348259086217531),
    f128::f128::new(54806.3662379631972053476955142168278),
    -f128::f128::new(35588.5495051709072761998022819589791),
    f128::f128::new(19139.8793164530771739513758189119978),
    -f128::f128::new(8369.6421417710066286092456970835516),
    f128::f128::new(2899.05637380222598717030985277087588),
    -f128::f128::new(765.028765308920746614387322258981136),
    f128::f128::new(144.445990652733287822296906999947487),
    -f128::f128::new(17.3741007194244604316546762589928058),
    f128::f128::new(1.0),
    f128::f128::new(2.98951935120536807534489402215319434e-22),
    -f128::f128::new(7.85645685496770730200638149021859471e-19),
    f128::f128::new(3.43719987404837194462779190197063519e-16),
    -f128::f128::new(5.99905951350575850069037279957274861e-14),
    f128::f128::new(5.5855529113248258611785006744593413e-12),
    -f128::f128::new(0.000000000321727847692309969603881638848858059),
    f128::f128::new(0.0000000125425113956411144210725372236077543),
    -f128::f128::new(0.000000351465978669064195315768900221975533),
    f128::f128::new(0.00000738957220151707470651404112716703558),
    -f128::f128::new(0.000120358260955428432474725428032027795),
    f128::f128::new(0.00155642235351309293994947566670890681),
    -f128::f128::new(0.0162919015185915962285620439917841414),
    f128::f128::new(0.140192993140054496532010342320606289),
    -f128::f128::new(1.00421319393860574746621562129960443),
    f128::f128::new(6.04918900158255366926077505211428384),
    -f128::f128::new(30.8995355437159408117182578524090545),
    f128::f128::new(134.749385848906411241424580110404808),
    -f128::f128::new(504.409465744569453844904845333066127),
    f128::f128::new(1627.72133945826936455030404851130704),
    -f128::f128::new(4542.80123473275176848889977692629362),
    f128::f128::new(10990.0845255650033168442998449486103),
    -f128::f128::new(23077.9010711051405306091685478131097),
    f128::f128::new(42081.7963505881262318190441278833132),
    -f128::f128::new(66599.0168331046867320962263589109826),
    f128::f128::new(91337.4814191604169987170763982582359),
    -f128::f128::new(108262.875935200755495622199943078334),
    f128::f128::new(110467.323635238779928790977769973594),
    -f128::f128::new(96494.8669070918762480703858927092887),
    f128::f128::new(71619.2421264974120464574357632251409),
    -f128::f128::new(44713.2836506626311143037348503619755),
    f128::f128::new(23165.0175749478151027212004846225602),
    -f128::f128::new(9775.61291634497961500344684649857378),
    f128::f128::new(3273.08468181193513895204693521157604),
    -f128::f128::new(836.200655306732147387282853378062317),
    f128::f128::new(153.070971581609879482219907751822645),
    -f128::f128::new(17.8741258741258741258741258741258741),
    f128::f128::new(1.0),
    -f128::f128::new(7.47414901363988105724275873518853981e-23),
    f128::f128::new(2.0740763512850669933848655490148198e-19),
    -f128::f128::new(9.58223274293700950943807883644846747e-17),
    f128::f128::new(1.76632490228138875290641919885200084e-14),
    -f128::f128::new(1.73730670745819450910867088344228939e-12),
    f128::f128::new(0.000000000105744068260622105787747767772187348),
    -f128::f128::new(0.00000000435793735861957769307081709606590282),
    f128::f128::new(0.000000129157769848318692727604326462524614),
    -f128::f128::new(0.00000287376037912509091318919626379117267),
    f128::f128::new(0.0000495676708530138230059234571251300959),
    -f128::f128::new(0.000679337973164463132144340433441256683),
    f128::f128::new(0.00754329827344955815562871520249707096),
    -f128::f128::new(0.0689282545131876292336797816691942498),
    f128::f128::new(0.524915168985044253394946029634633133),
    -f128::f128::new(3.36612267095171235510409834876812358),
    f128::f128::new(18.3318266838726587798657677890383558),
    -f128::f128::new(85.3760476607779068175200072433036329),
    f128::f128::new(341.960747047714717680868906017296369),
    -f128::f128::new(1183.29274375240965800681621447254934),
    f128::f128::new(3549.87823125722897402044864341764802),
    -f128::f128::new(9256.99015689385093994563146245063599),
    f128::f128::new(21019.0659195441098578324152254250794),
    -f128::f128::new(41593.7541240872871605309527505240472),
    f128::f128::new(71734.1556632809735087417880769907481),
    -f128::f128::new(107728.421714182596740965061172360219),
    f128::f128::new(140618.568425288140562288271685391013),
    -f128::f128::new(159070.778761638168056887185164469471),
    f128::f128::new(155291.319308182055049246259730792349),
    -f128::f128::new(130081.689550360292865927061722546838),
    f128::f128::new(92780.5880096036208644452545498383072),
    -f128::f128::new(55773.1896283718941241637010401287903),
    f128::f128::new(27871.8478047654362492515586900696493),
    -f128::f128::new(11364.4141346811451373436414897010177),
    f128::f128::new(3682.17614154004469485027078570732276),
    -f128::f128::new(911.653794481380688277240001377932412),
    f128::f128::new(161.94595355383532723434201266713582),
    -f128::f128::new(18.3741496598639455782312925170068027),
    f128::f128::new(1.0),
    f128::f128::new(1.86862030320122365202855761969134346e-23),
    -f128::f128::new(5.46758300716678040583555959521687096e-20),
    f128::f128::new(2.66362418832474985437622344946981897e-17),
    -f128::f128::new(5.17808542210331371690737838576932807e-15),
    f128::f128::new(5.37226362543218798129140507523567788e-13),
    -f128::f128::new(0.0000000000345018708388867183687381348165135757),
    f128::f128::new(0.00000000150083138149157224904010886451834054),
    -f128::f128::new(0.000000046971074444923052365562967540090482),
    f128::f128::new(0.00000110421167507606608936044276192162708),
    -f128::f128::new(0.0000201356246631517933942198385997473174),
    f128::f128::new(0.000291966557615701004216187659696336102),
    -f128::f128::new(0.00343281891984521180714790339279328508),
    f128::f128::new(0.0332461049737183013061824122062914892),
    -f128::f128::new(0.268628528187643874553953890626835233),
    f128::f128::new(1.82994301609307665866780758826481673),
    -f128::f128::new(10.601049196677133746765230166499628),
    f128::f128::new(52.5991574052871494975589343543459363),
    -f128::f128::new(224.835614006913697852310739004851257),
    f128::f128::new(831.891771825580682053549734317949651),
    -f128::f128::new(2674.36046134539451129590668500507285),
    f128::f128::new(7491.63795902523975279686680350780022),
    -f128::f128::new(18324.494241239436607886412878266466),
    f128::f128::new(39186.5241543629812449833121064831509),
    -f128::f128::new(73299.6239254557794109059828387936041),
    f128::f128::new(119891.672112115171110923349590048049),
    -f128::f128::new(171273.81730302167301560478512864007),
    f128::f128::new(213252.694092977965421390271679777342),
    -f128::f128::new(230688.44895592584938666117439573398),
    f128::f128::new(215858.477237330616211804384613151082),
    -f128::f128::new(173679.234558771760170417320953110066),
    f128::f128::new(119220.49151915688621867629658645691),
    -f128::f128::new(69098.7089925943666291217456683007789),
    f128::f128::new(33349.7241318424200050275091940757231),
    -f128::f128::new(13153.317769481905512472388241579516),
    f128::f128::new(4128.45575293220475918250991779163912),
    -f128::f128::new(991.513182898831784814018945059689728),
    f128::f128::new(171.07093648606604737988355038001689),
    -f128::f128::new(18.8741721854304635761589403973509934),
    f128::f128::new(1.0),
    -f128::f128::new(4.67174774517396374989555898256376781e-24),
    f128::f128::new(1.43936548028809823134282172252789686e-20),
    -f128::f128::new(7.3839449138779439267886754365681109e-18),
    f128::f128::new(1.51173965536794438661120148438004457e-15),
    -f128::f128::new(1.65211548050925350822509876507247728e-13),
    f128::f128::new(0.0000000000111793147514459487389898349769904296),
    -f128::f128::new(0.000000000512554642998112740669443040005652121),
    f128::f128::new(0.00000001691430321893772044209162032018652),
    -f128::f128::new(0.000000419474719829655466963872183940625696),
    f128::f128::new(0.0000080742029405119957529974090307525665),
    -f128::f128::new(0.000123662792404683724427486633049947203),
    f128::f128::new(0.00153695184845821200359876243933505809),
    -f128::f128::new(0.0157481877805790708194829716610128416),
    f128::f128::new(0.134756031439355064458406597505466808),
    -f128::f128::new(0.973238004839786576644047648650593611),
    f128::f128::new(5.98485439757799791384558036813870784),
    -f128::f128::new(31.5652804517420212552823351674412494),
    f128::f128::new(143.647345799104064643022819398355632),
    -f128::f128::new(566.836986756464610638975760356050955),
    f128::f128::new(1947.24228025158184166874318813636281),
    -f128::f128::new(5841.72684075474552500622956440908844),
    f128::f128::new(15340.4696712502667038781475553181753),
    -f128::f128::new(35318.7557547389861321845722785232409),
    f128::f128::new(71354.1239450813719829931793569005765),
    -f128::f128::new(126514.404157945695005307055597341448),
    f128::f128::new(196742.808098682897130701992581988129),
    -f128::f128::new(267961.92415250476034543574555284356),
    f128::f128::new(318895.287792952904869515775455270848),
    -f128::f128::new(330491.480076333010501134530926371606),
    f128::f128::new(296902.509324473394188859515079045272),
    -f128::f128::new(229805.897047756242959738720710899448),
    f128::f128::new(152029.178850736678975480243050944056),
    -f128::f128::new(85063.9453093407608553282312308853644),
    f128::f128::new(39696.5078110256883991531745744131701),
    -f128::f128::new(15160.6504809448414869461202281560395),
    f128::f128::new(4614.11101593973436559229746074314245),
    -f128::f128::new(1075.90382061818532155438547989159347),
    f128::f128::new(180.445920303605313092979127134724858),
    -f128::f128::new(19.3741935483870967741935483870967742),
    f128::f128::new(1.0),
    f128::f128::new(1.16798372301529094111678017907224592e-24),
    -f128::f128::new(3.78426726256954264921836778019407678e-21),
    f128::f128::new(2.04161218815626825925330941741470442e-18),
    -f128::f128::new(4.39627157849649765159212627883299686e-16),
    f128::f128::new(5.0541422182786521215982337469869346e-14),
    -f128::f128::new(3.59854925941440031057794242785469744e-12),
    f128::f128::new(0.000000000173657263503558560442284039889654717),
    -f128::f128::new(0.00000000603411282635441942987364982561635402),
    f128::f128::new(0.000000157641197588509207605449101694227249),
    -f128::f128::new(0.00000319815867525969006802166020692079333),
    f128::f128::new(0.000051658678812484151677676185131789025),
    -f128::f128::new(0.000677600851955960950577310999780609288),
    f128::f128::new(0.00733331066953788173686386940704594183),
    -f128::f128::new(0.0663382565182811455580916186360463661),
    f128::f128::new(0.507013817675434469622557371004068655),
    -f128::f128::new(3.30316588343030180898925882626558751),
    f128::f128::new(18.480413964756224838599179925175414),
    -f128::f128::new(89.3384717868429264924794580340030709),
    f128::f128::new(375.079774406665937416838359523711306),
    -f128::f128::new(1373.33618680335437113931996787202404),
    f128::f128::new(4399.95786002766996599635974322075395),
    -f128::f128::new(12366.89665652376459664482064877378),
    f128::f128::new(30551.2024168034226874830294462836404),
    -f128::f128::new(66415.6574278335275814848466223557399),
    f128::f128::new(127120.039349904774865625694909278406),
    -f128::f128::new(214184.29487200282067155219125938827),
    f128::f128::new(317399.80348679151027119159564456859),
    -f128::f128::new(412996.809288892936495428896638844665),
    f128::f128::new(470655.454741563054252907606234527524),
    -f128::f128::new(468092.902356400279002891775347588173),
    f128::f128::new(404358.219041206794686678827404780969),
    -f128::f128::new(301504.541960920983875313139418689142),
    f128::f128::new(192478.345983980806670400798825323872),
    -f128::f128::new(104090.853772222720623620012418356966),
    f128::f128::new(47019.0906635720717830136052583359603),
    -f128::f128::new(17405.8248667633259519727383440796474),
    f128::f128::new(5141.39193051890105388866097409238412),
    -f128::f128::new(1164.95070769254625878558330845780788),
    f128::f128::new(190.070904939310179065016224011537075),
    -f128::f128::new(19.8742138364779874213836477987421384),
    f128::f128::new(1.0),
    -f128::f128::new(2.92007057375426737212483129020805757e-25),
    f128::f128::new(9.93700016248577186734080088057801991e-22),
    -f128::f128::new(5.63096675874193739149312049899421128e-19),
    f128::f128::new(1.27372468082742623795574385687249059e-16),
    -f128::f128::new(1.53847745377084126313083061569384399e-14),
    f128::f128::new(1.15112301929920500732477926289803838e-12),
    -f128::f128::new(0.0000000000583933313426323994624751662451914016),
    f128::f128::new(0.00000000213360249136541459574428492049737814),
    -f128::f128::new(0.0000000586385084710261444730387638983362758),
    f128::f128::new(0.00000125210462205779355551253360559388636),
    -f128::f128::new(0.0000212989586236357303758763611225233722),
    f128::f128::new(0.000294405086083415095628455502442498387),
    -f128::f128::new(0.0033600580476911505479334595387459055),
    f128::f128::new(0.0320808003753404312315000767653185993),
    -f128::f128::new(0.259022758586082000313593212401461283),
    f128::f128::new(1.78457748846548909181572151164868843),
    -f128::f128::new(10.5707432683701753059568342766609811),
    f128::f128::new(54.1727039154443030385488387618544038),
    -f128::f128::new(241.455480308837464971817681338551057),
    f128::f128::new(940.062090476939035032524884528612009),
    -f128::f128::new(3208.2631857046303990468990289938015),
    f128::f128::new(9624.7895571138911971406970869814045),
    -f128::f128::new(25435.490372922545446989157206610477),
    f128::f128::new(59300.3268307846397715795520188899333),
    -f128::f128::new(122070.353635710933997879184209097895),
    f128::f128::new(221918.920446308775521042402639723275),
    -f128::f128::new(356141.374592567929342970009666162239),
    f128::f128::new(503973.643291369711334391523112493734),
    -f128::f128::new(627676.264826524095025560351512833105),
    f128::f128::new(686153.061428632207931752906947180533),
    -f128::f128::new(655915.807874150110633065490708830204),
    f128::f128::new(545613.731245921800119414075560544638),
    -f128::f128::new(392430.511064775104252554766648209189),
    f128::f128::new(242044.552978413735629897415513091262),
    -f128::f128::new(126653.690583963640417400227959440204),
    f128::f128::new(55433.9341396478542116737229619578864),
    -f128::f128::new(19909.3707121270462309532385285905085),
    f128::f128::new(5712.61099663030760051416507206873161),
    -f128::f128::new(1258.77884416976602565715637377514507),
    f128::f128::new(199.945890332660137941546317113134931),
    -f128::f128::new(20.3742331288343558282208588957055215),
    f128::f128::new(1.0),
    f128::f128::new(7.30044136548472071368824632852234026e-26),
    -f128::f128::new(2.60625756747804529478670393928247547e-22),
    f128::f128::new(1.54942012386569792775069549190343167e-19),
    -f128::f128::new(3.67729042730792308186165063411747783e-17),
    f128::f128::new(4.66096561661279250625964217874390315e-15),
    -f128::f128::new(3.66041166424657971491590565770687861e-13),
    f128::f128::new(0.0000000000194944651512526177241354672527873914),
    -f128::f128::new(0.00000000074807332206784770431517639172234693),
    f128::f128::new(0.0000000216006171747091024621007183109827676),
    -f128::f128::new(0.00000048481385214347096637159389986872434),
    f128::f128::new(0.00000867306464966135691945814560870417911),
    -f128::f128::new(0.00012615366763143791882848211794478806),
    f128::f128::new(0.00151612940410681006070317096095239853),
    -f128::f128::new(0.0152545943120900581492288278225056714),
    f128::f128::new(0.129906188070417717413670890901179249),
    -f128::f128::new(0.944880871390348638843344135198462399),
    f128::f128::new(5.91503045497385589437214423345005191),
    -f128::f128::new(32.0740154082539565609270280894029553),
    f128::f128::new(151.460628316754794871044299311069511),
    -f128::f128::new(625.663818821985667575409168135627113),
    f128::f128::new(2269.23454288127878662927248289190911),
    -f128::f128::new(7247.84552023637243116202012538066207),
    f128::f128::new(20433.4080364380605432442998672201118),
    -f128::f128::new(50935.4519169180639628698489443747714),
    f128::f128::new(112392.14523156831666984313299871348),
    -f128::f128::new(219646.363823979224577636294203200059),
    f128::f128::new(380157.168156887119461293586120923179),
    -f128::f128::new(582323.209364008781173414074617095463),
    f128::f128::new(788405.124366206693991278146478340287),
    -f128::f128::new(941507.389896486396817170635903353736),
    f128::f128::new(988848.721930829498126056617030697511),
    -f128::f128::new(909887.242813137666176276316040937953),
    f128::f128::new(729805.39267303750307888829515783565),
    -f128::f128::new(506951.065306678731742444550016398657),
    f128::f128::new(302434.810250999296065839395729712807),
    -f128::f128::new(153283.729916034425832127296220773696),
    f128::f128::new(65067.6240058283849874249281688339046),
    -f128::f128::new(22692.9662397224504472988827601042348),
    f128::f128::new(6330.14321423836775635179361202907602),
    -f128::f128::new(1357.51323009307653516169000537686479),
    f128::f128::new(210.070876428960261295590636908002177),
    -f128::f128::new(20.8742514970059880239520958083832335),
    f128::f128::new(1.0),
    -f128::f128::new(1.82517349616343496855938197597058405e-26),
    f128::f128::new(6.82797404914741021738064797210595492e-23),
    -f128::f128::new(4.25382783261883656542814368662200992e-20),
    f128::f128::new(1.05806877623339194837416027298578127e-17),
    -f128::f128::new(1.4057199455672207314113843626811094e-15),
    f128::f128::new(1.15737608851701173552870645860744674e-13),
    -f128::f128::new(6.46377009435409887448304849458643738e-12),
    f128::f128::new(0.00000000026018450390790180414540007291945187),
    -f128::f128::new(0.00000000788359046840942466560562220945939165),
    f128::f128::new(0.000000185753879990954090977178222647719653),
    -f128::f128::new(0.00000349021763983003213046592765711767979),
    f128::f128::new(0.000053350469637401919708550608473084534),
    -f128::f128::new(0.00067422622498281846356313232736999585),
    f128::f128::new(0.00713849981589501025575611796455432529),
    -f128::f128::new(0.0640198793012806475317810579360824411),
    f128::f128::new(0.490819074643151631076988110843298715),
    -f128::f128::new(3.24178082365113859558107469984404555),
    f128::f128::new(18.5665628990928846837825187354704427),
    -f128::f128::new(92.7149315564225638336187364155397026),
    f128::f128::new(405.545397633000545929413391860291018),
    -f128::f128::new(1559.78999089615594588235919946265776),
    f128::f128::new(5291.69171127487981175652871269503289),
    -f128::f128::new(15875.0751338246394352695861380850987),
    f128::f128::new(42195.489558600563368528146343837784),
    -f128::f128::new(99503.5480725864348938695649597593134),
    f128::f128::new(208348.245556068739185939129895332766),
    -f128::f128::new(387471.171599747745725886798131139217),
    f128::f128::new(639828.356736690372571817263440867904),
    -f128::f128::new(937306.995323359402936376458651037656),
    f128::f128::new(1216287.66180798906188658651167965866),
    -f128::f128::new(1394951.38614136598623150882412977802),
    f128::f128::new(1409704.97034169772590608850497726377),
    -f128::f128::new(1250274.05107686286404766182881912084),
    f128::f128::new(968160.931859519448570240698213780756),
    -f128::f128::new(650257.342293707092323295991337613941),
    f128::f128::new(375614.489647917761404139920462099978),
    -f128::f128::new(184574.2562589142051344286933100147),
    f128::f128::new(76057.4406575977453960085655883177937),
    -f128::f128::new(25779.4693597331305447523769678298206),
    f128::f128::new(6996.42608331085627504934639653057069),
    -f128::f128::new(1461.27886550163453845967361446524578),
    f128::f128::new(220.445863178656700923907401640195162),
    -f128::f128::new(21.3742690058479532163742690058479532),
    f128::f128::new(1.0),
    f128::f128::new(4.56308445663452990157752673034561541e-27),
    -f128::f128::new(1.786903873218081909457759467603343e-23),
    f128::f128::new(1.16535914265039241861803546612198019e-20),
    -f128::f128::new(3.03459520746162185808136435378163642e-18),
    f128::f128::new(4.22133869037964897758104077070695494e-16),
    -f128::f128::new(3.63973202637178622955876404229844115e-14),
    f128::f128::new(2.12924323542749494429187696474458807e-12),
    -f128::f128::new(0.000000000089802588324953028529584876820766253),
    f128::f128::new(0.00000000285198053421996659771873304636616825),
    -f128::f128::new(0.0000000704606955513168218259922282043406274),
    f128::f128::new(0.00000138881739389306051441232049802766131),
    -f128::f128::new(0.0000222812002673925639238617305874048174),
    f128::f128::new(0.00029571027746180783207646927225240524),
    -f128::f128::new(0.00329011804092891421781080888758368415),
    f128::f128::new(0.0310298169733110560489299832916291904),
    -f128::f128::new(0.250378523163958176394814347939352778),
    f128::f128::new(1.74204895854600739261795224745706943),
    -f128::f128::new(10.5206093967092211162025351415054389),
    f128::f128::new(55.458640962652894169696220960221528),
    -f128::f128::new(256.387742714967149433161761195903223),
    f128::f128::new(1043.62959374361628134652383563717017),
    -f128::f128::new(3752.70292941955401515544459365003351),
    f128::f128::new(11952.3191610371207692001633833695042),
    -f128::f128::new(33789.8414156469713726373701060281828),
    f128::f128::new(84923.9365366659253913359434845655127),
    -f128::f128::new(189952.315192216029038579987875681229),
    f128::f128::new(378328.857030650477142450790331579279),
    -f128::f128::new(670998.350205304619837554231908838722),
    f128::f128::new(1059218.8242526594356007106089418097),
    -f128::f128::new(1486622.91123180271663257629325166273),
    f128::f128::new(1851979.38941588982495753148396605442),
    -f128::f128::new(2042955.58240166376248620342440676336),
    f128::f128::new(1989246.92869765176873036573517384746),
    -f128::f128::new(1702684.08442372431113704032157537713),
    f128::f128::new(1274396.99909677346377904027580597805),
    -f128::f128::new(828489.974568088752850142125472209334),
    f128::f128::new(463837.697029317294729480978697469311),
    -f128::f128::new(221185.839975475999856190855446997583),
    f128::f128::new(88551.9450568484616968118477421137692),
    -f128::f128::new(29192.9489198401522077401695853122316),
    f128::f128::new(7713.95960381852123210855746953661816),
    -f128::f128::new(1570.20075043099077172700537470844742),
    f128::f128::new(231.070850536746490503715937241948803),
    -f128::f128::new(21.8742857142857142857142857142857143),
    f128::f128::new(1.0),
    -f128::f128::new(1.14080711993820381120460780958456016e-27),
    f128::f128::new(4.67160515614694460688286898024877387e-24),
    -f128::f128::new(3.18603471649221622189411664452966378e-21),
    f128::f128::new(8.67663454458046884429164432860245103e-19),
    -f128::f128::new(1.26245032623645821684443424981165662e-16),
    f128::f128::new(1.13873019426528531159367969333011428e-14),
    -f128::f128::new(6.97040906792689796793706963796009344e-13),
    f128::f128::new(0.0000000000307693771712773067441793502589952696),
    -f128::f128::new(0.00000000102308179094497044924396339611159272),
    f128::f128::new(0.0000000264730771918375033239009874850051997),
    -f128::f128::new(0.000000546738710004054542331513025742949494),
    f128::f128::new(0.00000919515103188637184830271906931324148),
    -f128::f128::new(0.000127999167625026958844851618348918383),
    f128::f128::new(0.00149463643426762248866526735887429312),
    -f128::f128::new(0.0148040180156031179829702671736120462),
    f128::f128::new(0.125544879217379085607304173801045605),
    -f128::f128::new(0.918806273304609033779262401003620054),
    f128::f128::new(5.84203560940738043402964168338665371),
    -f128::f128::new(32.4557533855965579668313426854814095),
    f128::f128::new(158.308361819645230822567103938144741),
    -f128::f128::new(680.725955824474492537038546934022388),
    f128::f128::new(2589.28862407102667021928134867470769),
    -f128::f128::new(8736.79628756312593164899161201867542),
    f128::f128::new(26210.3888626893777949469748360560263),
    -f128::f128::new(70033.7872625405892499735657410220418),
    f128::f128::new(166880.510219882432669937010937178237),
    -f128::f128::new(354904.252503822368121585498373184485),
    f128::f128::new(673846.858178116963093185044779833855),
    -f128::f128::new(1142039.15574343199589169673173725088),
    f128::f128::new(1726531.0648535006398870841697588566),
    -f128::f128::new(2325452.01051454549462757551452266335),
    f128::f128::new(2785377.47425459838462795269190578133),
    -f128::f128::new(2959463.56639551078366719973514989266),
    f128::f128::new(2780102.13812911619071767247847414159),
    -f128::f128::new(2299259.18710941830698511630792154643),
    f128::f128::new(1665177.7715339017055556805062338653),
    -f128::f128::new(1048879.58222597094911762348006123753),
    f128::f128::new(569680.246992039756518161290355362999),
    -f128::f128::new(263851.903869997360913674702901431284),
    f128::f128::new(102711.580294381257045649592970953437),
    -f128::f128::new(32958.7159552223400773065466052363243),
    f128::f128::new(8485.30627573474880039057432926138432),
    -f128::f128::new(1684.40388491349574580329243713392942),
    f128::f128::new(241.945838462266830792538585361234732),
    -f128::f128::new(22.3743016759776536312849162011173184),
    f128::f128::new(1.0),
    f128::f128::new(2.85210390369479387754290289864134973e-28),
    -f128::f128::new(1.22013005000063282081285386003876942e-24),
    f128::f128::new(8.69342660625450884829158375277623209e-22),
    -f128::f128::new(2.47356965036628291763389863045659724e-19),
    f128::f128::new(3.76070928628902370727410945351919087e-17),
    -f128::f128::new(3.54509528720845301472372717818409059e-15),
    f128::f128::new(2.26832384816383289108762119295021433e-13),
    -f128::f128::new(0.0000000000104691869915253825742505593520779123),
    f128::f128::new(0.0000000003640659776302951790195632014685094),
    -f128::f128::new(0.000000009855956074148252493457717519493895),
    f128::f128::new(0.000000213044271560667752582267609750323299),
    -f128::f128::new(0.00000375179262644500613638382959508361549),
    f128::f128::new(0.0000547136424689896728222641815949693926),
    -f128::f128::new(0.000669694983820433595344513582722425366),
    f128::f128::new(0.00695738677635672679607911333161630796),
    -f128::f128::new(0.0619287393058695313894674179770536654),
    f128::f128::new(0.476077183413872022556530775698600053),
    -f128::f128::new(3.18233411372909105986985812632754046),
    f128::f128::new(18.6040262553400672595249007607370341),
    -f128::f128::new(95.5871164072380127189245256725208639),
    f128::f128::new(433.450808631283142290815445261161917),
    -f128::f128::new(1740.85121515328351456636447121149583),
    f128::f128::new(6210.75354243375461063581404898393069),
    -f128::f128::new(19730.3938623402755166865281092359073),
    f128::f128::new(55920.2740938846283925947077705914856),
    -f128::f128::new(141603.828766718463080676557962754929),
    f128::f128::new(320691.023971685931094473381268592046),
    -f128::f128::new(649897.952143877847780554022137607919),
    f128::f128::new(1178678.55866094209665655024924047982),
    -f128::f128::new(1912411.30933372456335926664758800174),
    f128::f128::new(2773536.62771732822267979518890305111),
    -f128::f128::new(3590490.56829826519784248472894482766),
    f128::f128::new(4140818.73576064810763084176329202595),
    -f128::f128::new(4243132.67188899978581472736397010398),
    f128::f128::new(3850112.04249102833945524208135478706),
    -f128::f128::new(3080089.63399282267156419366508382965),
    f128::f128::new(2160641.90678760995700884164377750648),
    -f128::f128::new(1319903.42325048368347448675017878034),
    f128::f128::new(696075.38426157086886391353877849363),
    -f128::f128::new(313384.588585295975592411290185988474),
    f128::f128::new(118709.28877740483632408744125083171),
    -f128::f128::new(37103.3549385565251744663547179654667),
    f128::f128::new(9313.09109903527238314918542117607097),
    -f128::f128::new(1804.0132689786519417974345494371158),
    f128::f128::new(253.070826917851643872837605289375962),
    -f128::f128::new(22.8743169398907103825136612021857923),
    f128::f128::new(1.0),
    -f128::f128::new(7.1304658658928377646678904958372695e-29),
    f128::f128::new(3.18375300912115206192421310639134083e-25),
    -f128::f128::new(2.36765098778309675005097314678636047e-22),
    f128::f128::new(7.03192343371579734765139024595549058e-20),
    -f128::f128::new(1.11606670497975012189152779475093572e-17),
    f128::f128::new(1.0984576525234029533016836895448654e-15),
    -f128::f128::new(7.33969431458819246069761374377705518e-14),
    f128::f128::new(3.53837790748334069506378368065383968e-12),
    -f128::f128::new(0.000000000128561063971894711920650807063756175),
    f128::f128::new(0.00000000363752186885184449610782577633333648),
    -f128::f128::new(0.0000000822079942360516856120368625451334044),
    f128::f128::new(0.00000151426413625281351636024610445689453),
    -f128::f128::new(0.0000231089874706407627931498427245378252),
    f128::f128::new(0.000296150562508365467795289522916000129),
    -f128::f128::new(0.00322318363534236913891487062771540881),
    f128::f128::new(0.0300756376456429341031159997193030905),
    -f128::f128::new(0.242545464884217210508999997736315246),
    f128::f128::new(1.70214170276143165378597681120832999),
    -f128::f128::new(10.4560133169630801589710004117083128),
    f128::f128::new(56.5041174838445825375971985264294171),
    -f128::f128::new(269.770940397227212012835855528747627),
    f128::f128::new(1142.06164662937652472332949291786888),
    -f128::f128::new(4300.23634809073909203435481371400522),
    f128::f128::new(14437.9916034930612027240415243054764),
    -f128::f128::new(43313.9748104791836081721245729164293),
    f128::f128::new(116293.602572788599907982136914548683),
    -f128::f128::new(279771.185676618124967166679304230993),
    f128::f128::new(603531.551491069288451183465417303338),
    -f128::f128::new(1167872.74249570550622371865385945711),
    f128::f128::new(2026997.51858450036137679904290549452),
    -f128::f128::new(3153870.71535690056227779918879193893),
    f128::f128::new(4394737.88205469750481332673848057065),
    -f128::f128::new(5475982.91652847228774358966620198088),
    f128::f128::new(6088680.30579039925700161368479800672),
    -f128::f128::new(6024532.66428953464674347552481769409),
    f128::f128::new(5286122.03545735979977201848326653987),
    -f128::f128::new(4094883.266903588577288183332107883),
    f128::f128::new(2785005.76131132625563805730510262165),
    -f128::f128::new(1651459.55670741802527309363004330898),
    f128::f128::new(846352.400190714732232864168044173331),
    -f128::f128::new(370680.924640490249813381015371245535),
    f128::f128::new(136731.145042035698892319103833115261),
    -f128::f128::new(41654.7550300177602477460953157683324),
    f128::f128::new(10200.0015736979194040308496053659802),
    -f128::f128::new(1929.15390265342049334334773100443303),
    f128::f128::new(264.445815869345281109986992339933516),
    -f128::f128::new(23.3743315508021390374331550802139037),
    f128::f128::new(1.0),
];
static mut JACOBI_COEF_ORDER: [libc::c_int; 2080] = [
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    3 as libc::c_int,
    2 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    4 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    5 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    6 as libc::c_int,
    3 as libc::c_int,
    5 as libc::c_int,
    4 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    7 as libc::c_int,
    4 as libc::c_int,
    6 as libc::c_int,
    5 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    8 as libc::c_int,
    4 as libc::c_int,
    7 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    9 as libc::c_int,
    4 as libc::c_int,
    8 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    10 as libc::c_int,
    5 as libc::c_int,
    9 as libc::c_int,
    6 as libc::c_int,
    8 as libc::c_int,
    7 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    11 as libc::c_int,
    5 as libc::c_int,
    10 as libc::c_int,
    6 as libc::c_int,
    9 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    12 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    11 as libc::c_int,
    7 as libc::c_int,
    10 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    13 as libc::c_int,
    6 as libc::c_int,
    12 as libc::c_int,
    7 as libc::c_int,
    11 as libc::c_int,
    8 as libc::c_int,
    10 as libc::c_int,
    9 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    14 as libc::c_int,
    6 as libc::c_int,
    13 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    12 as libc::c_int,
    9 as libc::c_int,
    11 as libc::c_int,
    10 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    15 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    14 as libc::c_int,
    8 as libc::c_int,
    13 as libc::c_int,
    9 as libc::c_int,
    12 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    16 as libc::c_int,
    7 as libc::c_int,
    15 as libc::c_int,
    8 as libc::c_int,
    14 as libc::c_int,
    9 as libc::c_int,
    13 as libc::c_int,
    10 as libc::c_int,
    12 as libc::c_int,
    11 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    17 as libc::c_int,
    7 as libc::c_int,
    16 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    15 as libc::c_int,
    10 as libc::c_int,
    14 as libc::c_int,
    11 as libc::c_int,
    13 as libc::c_int,
    12 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    18 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    17 as libc::c_int,
    9 as libc::c_int,
    16 as libc::c_int,
    10 as libc::c_int,
    15 as libc::c_int,
    11 as libc::c_int,
    14 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    19 as libc::c_int,
    8 as libc::c_int,
    18 as libc::c_int,
    9 as libc::c_int,
    17 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    16 as libc::c_int,
    12 as libc::c_int,
    15 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    20 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    19 as libc::c_int,
    10 as libc::c_int,
    18 as libc::c_int,
    11 as libc::c_int,
    17 as libc::c_int,
    12 as libc::c_int,
    16 as libc::c_int,
    13 as libc::c_int,
    15 as libc::c_int,
    14 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    21 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    20 as libc::c_int,
    10 as libc::c_int,
    19 as libc::c_int,
    11 as libc::c_int,
    18 as libc::c_int,
    12 as libc::c_int,
    17 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    16 as libc::c_int,
    15 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    22 as libc::c_int,
    9 as libc::c_int,
    21 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    20 as libc::c_int,
    12 as libc::c_int,
    19 as libc::c_int,
    13 as libc::c_int,
    18 as libc::c_int,
    14 as libc::c_int,
    17 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    23 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    22 as libc::c_int,
    11 as libc::c_int,
    21 as libc::c_int,
    12 as libc::c_int,
    20 as libc::c_int,
    13 as libc::c_int,
    19 as libc::c_int,
    14 as libc::c_int,
    18 as libc::c_int,
    15 as libc::c_int,
    17 as libc::c_int,
    16 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    24 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    23 as libc::c_int,
    11 as libc::c_int,
    22 as libc::c_int,
    12 as libc::c_int,
    21 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    20 as libc::c_int,
    15 as libc::c_int,
    19 as libc::c_int,
    16 as libc::c_int,
    18 as libc::c_int,
    17 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    25 as libc::c_int,
    10 as libc::c_int,
    24 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    23 as libc::c_int,
    13 as libc::c_int,
    22 as libc::c_int,
    14 as libc::c_int,
    21 as libc::c_int,
    15 as libc::c_int,
    20 as libc::c_int,
    16 as libc::c_int,
    19 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    26 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    25 as libc::c_int,
    12 as libc::c_int,
    24 as libc::c_int,
    13 as libc::c_int,
    23 as libc::c_int,
    14 as libc::c_int,
    22 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    21 as libc::c_int,
    17 as libc::c_int,
    20 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    27 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    26 as libc::c_int,
    12 as libc::c_int,
    25 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    24 as libc::c_int,
    15 as libc::c_int,
    23 as libc::c_int,
    16 as libc::c_int,
    22 as libc::c_int,
    17 as libc::c_int,
    21 as libc::c_int,
    18 as libc::c_int,
    20 as libc::c_int,
    19 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    28 as libc::c_int,
    11 as libc::c_int,
    27 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    26 as libc::c_int,
    14 as libc::c_int,
    25 as libc::c_int,
    15 as libc::c_int,
    24 as libc::c_int,
    16 as libc::c_int,
    23 as libc::c_int,
    17 as libc::c_int,
    22 as libc::c_int,
    18 as libc::c_int,
    21 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    29 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    28 as libc::c_int,
    13 as libc::c_int,
    27 as libc::c_int,
    14 as libc::c_int,
    26 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    25 as libc::c_int,
    17 as libc::c_int,
    24 as libc::c_int,
    18 as libc::c_int,
    23 as libc::c_int,
    19 as libc::c_int,
    22 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    30 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    29 as libc::c_int,
    13 as libc::c_int,
    28 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    27 as libc::c_int,
    16 as libc::c_int,
    26 as libc::c_int,
    17 as libc::c_int,
    25 as libc::c_int,
    18 as libc::c_int,
    24 as libc::c_int,
    19 as libc::c_int,
    23 as libc::c_int,
    20 as libc::c_int,
    22 as libc::c_int,
    21 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    31 as libc::c_int,
    12 as libc::c_int,
    30 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    29 as libc::c_int,
    15 as libc::c_int,
    28 as libc::c_int,
    16 as libc::c_int,
    27 as libc::c_int,
    17 as libc::c_int,
    26 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    25 as libc::c_int,
    20 as libc::c_int,
    24 as libc::c_int,
    21 as libc::c_int,
    23 as libc::c_int,
    22 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    32 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    31 as libc::c_int,
    14 as libc::c_int,
    30 as libc::c_int,
    15 as libc::c_int,
    29 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    28 as libc::c_int,
    18 as libc::c_int,
    27 as libc::c_int,
    19 as libc::c_int,
    26 as libc::c_int,
    20 as libc::c_int,
    25 as libc::c_int,
    21 as libc::c_int,
    24 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    33 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    32 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    31 as libc::c_int,
    16 as libc::c_int,
    30 as libc::c_int,
    17 as libc::c_int,
    29 as libc::c_int,
    18 as libc::c_int,
    28 as libc::c_int,
    19 as libc::c_int,
    27 as libc::c_int,
    20 as libc::c_int,
    26 as libc::c_int,
    21 as libc::c_int,
    25 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    34 as libc::c_int,
    13 as libc::c_int,
    33 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    32 as libc::c_int,
    16 as libc::c_int,
    31 as libc::c_int,
    17 as libc::c_int,
    30 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    29 as libc::c_int,
    20 as libc::c_int,
    28 as libc::c_int,
    21 as libc::c_int,
    27 as libc::c_int,
    22 as libc::c_int,
    26 as libc::c_int,
    23 as libc::c_int,
    25 as libc::c_int,
    24 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    35 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    34 as libc::c_int,
    15 as libc::c_int,
    33 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    32 as libc::c_int,
    18 as libc::c_int,
    31 as libc::c_int,
    19 as libc::c_int,
    30 as libc::c_int,
    20 as libc::c_int,
    29 as libc::c_int,
    21 as libc::c_int,
    28 as libc::c_int,
    22 as libc::c_int,
    27 as libc::c_int,
    23 as libc::c_int,
    26 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    36 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    35 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    34 as libc::c_int,
    17 as libc::c_int,
    33 as libc::c_int,
    18 as libc::c_int,
    32 as libc::c_int,
    19 as libc::c_int,
    31 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    30 as libc::c_int,
    22 as libc::c_int,
    29 as libc::c_int,
    23 as libc::c_int,
    28 as libc::c_int,
    24 as libc::c_int,
    27 as libc::c_int,
    25 as libc::c_int,
    26 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    37 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    36 as libc::c_int,
    16 as libc::c_int,
    35 as libc::c_int,
    17 as libc::c_int,
    34 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    33 as libc::c_int,
    20 as libc::c_int,
    32 as libc::c_int,
    21 as libc::c_int,
    31 as libc::c_int,
    22 as libc::c_int,
    30 as libc::c_int,
    23 as libc::c_int,
    29 as libc::c_int,
    24 as libc::c_int,
    28 as libc::c_int,
    25 as libc::c_int,
    27 as libc::c_int,
    26 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    38 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    37 as libc::c_int,
    16 as libc::c_int,
    36 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    35 as libc::c_int,
    19 as libc::c_int,
    34 as libc::c_int,
    20 as libc::c_int,
    33 as libc::c_int,
    21 as libc::c_int,
    32 as libc::c_int,
    22 as libc::c_int,
    31 as libc::c_int,
    23 as libc::c_int,
    30 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    29 as libc::c_int,
    26 as libc::c_int,
    28 as libc::c_int,
    27 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    39 as libc::c_int,
    15 as libc::c_int,
    38 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    37 as libc::c_int,
    18 as libc::c_int,
    36 as libc::c_int,
    19 as libc::c_int,
    35 as libc::c_int,
    20 as libc::c_int,
    34 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    33 as libc::c_int,
    23 as libc::c_int,
    32 as libc::c_int,
    24 as libc::c_int,
    31 as libc::c_int,
    25 as libc::c_int,
    30 as libc::c_int,
    26 as libc::c_int,
    29 as libc::c_int,
    27 as libc::c_int,
    28 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    40 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    39 as libc::c_int,
    17 as libc::c_int,
    38 as libc::c_int,
    18 as libc::c_int,
    37 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    36 as libc::c_int,
    21 as libc::c_int,
    35 as libc::c_int,
    22 as libc::c_int,
    34 as libc::c_int,
    23 as libc::c_int,
    33 as libc::c_int,
    24 as libc::c_int,
    32 as libc::c_int,
    25 as libc::c_int,
    31 as libc::c_int,
    26 as libc::c_int,
    30 as libc::c_int,
    27 as libc::c_int,
    29 as libc::c_int,
    28 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    41 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    40 as libc::c_int,
    17 as libc::c_int,
    39 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    38 as libc::c_int,
    20 as libc::c_int,
    37 as libc::c_int,
    21 as libc::c_int,
    36 as libc::c_int,
    22 as libc::c_int,
    35 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    34 as libc::c_int,
    25 as libc::c_int,
    33 as libc::c_int,
    26 as libc::c_int,
    32 as libc::c_int,
    27 as libc::c_int,
    31 as libc::c_int,
    28 as libc::c_int,
    30 as libc::c_int,
    29 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    42 as libc::c_int,
    16 as libc::c_int,
    41 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    40 as libc::c_int,
    19 as libc::c_int,
    39 as libc::c_int,
    20 as libc::c_int,
    38 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    37 as libc::c_int,
    23 as libc::c_int,
    36 as libc::c_int,
    24 as libc::c_int,
    35 as libc::c_int,
    25 as libc::c_int,
    34 as libc::c_int,
    26 as libc::c_int,
    33 as libc::c_int,
    27 as libc::c_int,
    32 as libc::c_int,
    28 as libc::c_int,
    31 as libc::c_int,
    29 as libc::c_int,
    30 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    43 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    42 as libc::c_int,
    18 as libc::c_int,
    41 as libc::c_int,
    19 as libc::c_int,
    40 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    39 as libc::c_int,
    22 as libc::c_int,
    38 as libc::c_int,
    23 as libc::c_int,
    37 as libc::c_int,
    24 as libc::c_int,
    36 as libc::c_int,
    25 as libc::c_int,
    35 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    34 as libc::c_int,
    28 as libc::c_int,
    33 as libc::c_int,
    29 as libc::c_int,
    32 as libc::c_int,
    30 as libc::c_int,
    31 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    44 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    43 as libc::c_int,
    18 as libc::c_int,
    42 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    41 as libc::c_int,
    21 as libc::c_int,
    40 as libc::c_int,
    22 as libc::c_int,
    39 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    38 as libc::c_int,
    25 as libc::c_int,
    37 as libc::c_int,
    26 as libc::c_int,
    36 as libc::c_int,
    27 as libc::c_int,
    35 as libc::c_int,
    28 as libc::c_int,
    34 as libc::c_int,
    29 as libc::c_int,
    33 as libc::c_int,
    30 as libc::c_int,
    32 as libc::c_int,
    31 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    45 as libc::c_int,
    17 as libc::c_int,
    44 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    43 as libc::c_int,
    20 as libc::c_int,
    42 as libc::c_int,
    21 as libc::c_int,
    41 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    40 as libc::c_int,
    24 as libc::c_int,
    39 as libc::c_int,
    25 as libc::c_int,
    38 as libc::c_int,
    26 as libc::c_int,
    37 as libc::c_int,
    27 as libc::c_int,
    36 as libc::c_int,
    28 as libc::c_int,
    35 as libc::c_int,
    29 as libc::c_int,
    34 as libc::c_int,
    30 as libc::c_int,
    33 as libc::c_int,
    31 as libc::c_int,
    32 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    46 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    45 as libc::c_int,
    19 as libc::c_int,
    44 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    43 as libc::c_int,
    22 as libc::c_int,
    42 as libc::c_int,
    23 as libc::c_int,
    41 as libc::c_int,
    24 as libc::c_int,
    40 as libc::c_int,
    25 as libc::c_int,
    39 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    38 as libc::c_int,
    28 as libc::c_int,
    37 as libc::c_int,
    29 as libc::c_int,
    36 as libc::c_int,
    30 as libc::c_int,
    35 as libc::c_int,
    31 as libc::c_int,
    34 as libc::c_int,
    32 as libc::c_int,
    33 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    47 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    46 as libc::c_int,
    19 as libc::c_int,
    45 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    44 as libc::c_int,
    22 as libc::c_int,
    43 as libc::c_int,
    23 as libc::c_int,
    42 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    41 as libc::c_int,
    26 as libc::c_int,
    40 as libc::c_int,
    27 as libc::c_int,
    39 as libc::c_int,
    28 as libc::c_int,
    38 as libc::c_int,
    29 as libc::c_int,
    37 as libc::c_int,
    30 as libc::c_int,
    36 as libc::c_int,
    31 as libc::c_int,
    35 as libc::c_int,
    32 as libc::c_int,
    34 as libc::c_int,
    33 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    48 as libc::c_int,
    18 as libc::c_int,
    47 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    46 as libc::c_int,
    21 as libc::c_int,
    45 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    44 as libc::c_int,
    24 as libc::c_int,
    43 as libc::c_int,
    25 as libc::c_int,
    42 as libc::c_int,
    26 as libc::c_int,
    41 as libc::c_int,
    27 as libc::c_int,
    40 as libc::c_int,
    28 as libc::c_int,
    39 as libc::c_int,
    29 as libc::c_int,
    30 as libc::c_int,
    38 as libc::c_int,
    31 as libc::c_int,
    37 as libc::c_int,
    32 as libc::c_int,
    36 as libc::c_int,
    33 as libc::c_int,
    35 as libc::c_int,
    34 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    49 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    48 as libc::c_int,
    20 as libc::c_int,
    47 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    46 as libc::c_int,
    23 as libc::c_int,
    45 as libc::c_int,
    24 as libc::c_int,
    44 as libc::c_int,
    25 as libc::c_int,
    43 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    42 as libc::c_int,
    28 as libc::c_int,
    41 as libc::c_int,
    29 as libc::c_int,
    40 as libc::c_int,
    30 as libc::c_int,
    39 as libc::c_int,
    31 as libc::c_int,
    38 as libc::c_int,
    32 as libc::c_int,
    37 as libc::c_int,
    33 as libc::c_int,
    36 as libc::c_int,
    34 as libc::c_int,
    35 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    50 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    49 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    48 as libc::c_int,
    22 as libc::c_int,
    47 as libc::c_int,
    23 as libc::c_int,
    46 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    45 as libc::c_int,
    26 as libc::c_int,
    44 as libc::c_int,
    27 as libc::c_int,
    43 as libc::c_int,
    28 as libc::c_int,
    42 as libc::c_int,
    29 as libc::c_int,
    41 as libc::c_int,
    30 as libc::c_int,
    40 as libc::c_int,
    31 as libc::c_int,
    39 as libc::c_int,
    32 as libc::c_int,
    33 as libc::c_int,
    38 as libc::c_int,
    34 as libc::c_int,
    37 as libc::c_int,
    35 as libc::c_int,
    36 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    51 as libc::c_int,
    19 as libc::c_int,
    50 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    49 as libc::c_int,
    22 as libc::c_int,
    48 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    47 as libc::c_int,
    25 as libc::c_int,
    46 as libc::c_int,
    26 as libc::c_int,
    45 as libc::c_int,
    27 as libc::c_int,
    44 as libc::c_int,
    28 as libc::c_int,
    29 as libc::c_int,
    43 as libc::c_int,
    30 as libc::c_int,
    42 as libc::c_int,
    31 as libc::c_int,
    41 as libc::c_int,
    32 as libc::c_int,
    40 as libc::c_int,
    33 as libc::c_int,
    39 as libc::c_int,
    34 as libc::c_int,
    38 as libc::c_int,
    35 as libc::c_int,
    37 as libc::c_int,
    36 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    52 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    51 as libc::c_int,
    21 as libc::c_int,
    50 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    49 as libc::c_int,
    24 as libc::c_int,
    48 as libc::c_int,
    25 as libc::c_int,
    47 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    46 as libc::c_int,
    28 as libc::c_int,
    45 as libc::c_int,
    29 as libc::c_int,
    44 as libc::c_int,
    30 as libc::c_int,
    43 as libc::c_int,
    31 as libc::c_int,
    42 as libc::c_int,
    32 as libc::c_int,
    41 as libc::c_int,
    33 as libc::c_int,
    40 as libc::c_int,
    34 as libc::c_int,
    39 as libc::c_int,
    35 as libc::c_int,
    38 as libc::c_int,
    36 as libc::c_int,
    37 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    53 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    52 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    51 as libc::c_int,
    23 as libc::c_int,
    50 as libc::c_int,
    24 as libc::c_int,
    49 as libc::c_int,
    25 as libc::c_int,
    26 as libc::c_int,
    48 as libc::c_int,
    27 as libc::c_int,
    47 as libc::c_int,
    28 as libc::c_int,
    46 as libc::c_int,
    29 as libc::c_int,
    45 as libc::c_int,
    30 as libc::c_int,
    44 as libc::c_int,
    31 as libc::c_int,
    32 as libc::c_int,
    43 as libc::c_int,
    33 as libc::c_int,
    42 as libc::c_int,
    34 as libc::c_int,
    41 as libc::c_int,
    35 as libc::c_int,
    40 as libc::c_int,
    36 as libc::c_int,
    39 as libc::c_int,
    37 as libc::c_int,
    38 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    54 as libc::c_int,
    20 as libc::c_int,
    53 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    52 as libc::c_int,
    23 as libc::c_int,
    51 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    50 as libc::c_int,
    26 as libc::c_int,
    49 as libc::c_int,
    27 as libc::c_int,
    48 as libc::c_int,
    28 as libc::c_int,
    47 as libc::c_int,
    29 as libc::c_int,
    30 as libc::c_int,
    46 as libc::c_int,
    31 as libc::c_int,
    45 as libc::c_int,
    32 as libc::c_int,
    44 as libc::c_int,
    33 as libc::c_int,
    43 as libc::c_int,
    34 as libc::c_int,
    42 as libc::c_int,
    35 as libc::c_int,
    41 as libc::c_int,
    36 as libc::c_int,
    40 as libc::c_int,
    37 as libc::c_int,
    39 as libc::c_int,
    38 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    55 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    54 as libc::c_int,
    22 as libc::c_int,
    53 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    52 as libc::c_int,
    25 as libc::c_int,
    51 as libc::c_int,
    26 as libc::c_int,
    50 as libc::c_int,
    27 as libc::c_int,
    28 as libc::c_int,
    49 as libc::c_int,
    29 as libc::c_int,
    48 as libc::c_int,
    30 as libc::c_int,
    47 as libc::c_int,
    31 as libc::c_int,
    46 as libc::c_int,
    32 as libc::c_int,
    45 as libc::c_int,
    33 as libc::c_int,
    44 as libc::c_int,
    34 as libc::c_int,
    35 as libc::c_int,
    43 as libc::c_int,
    36 as libc::c_int,
    42 as libc::c_int,
    37 as libc::c_int,
    41 as libc::c_int,
    38 as libc::c_int,
    40 as libc::c_int,
    39 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    56 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    55 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    54 as libc::c_int,
    24 as libc::c_int,
    53 as libc::c_int,
    25 as libc::c_int,
    52 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    51 as libc::c_int,
    28 as libc::c_int,
    50 as libc::c_int,
    29 as libc::c_int,
    49 as libc::c_int,
    30 as libc::c_int,
    48 as libc::c_int,
    31 as libc::c_int,
    32 as libc::c_int,
    47 as libc::c_int,
    33 as libc::c_int,
    46 as libc::c_int,
    34 as libc::c_int,
    45 as libc::c_int,
    35 as libc::c_int,
    44 as libc::c_int,
    36 as libc::c_int,
    43 as libc::c_int,
    37 as libc::c_int,
    42 as libc::c_int,
    38 as libc::c_int,
    41 as libc::c_int,
    39 as libc::c_int,
    40 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    57 as libc::c_int,
    21 as libc::c_int,
    56 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    55 as libc::c_int,
    24 as libc::c_int,
    54 as libc::c_int,
    25 as libc::c_int,
    26 as libc::c_int,
    53 as libc::c_int,
    27 as libc::c_int,
    52 as libc::c_int,
    28 as libc::c_int,
    51 as libc::c_int,
    29 as libc::c_int,
    30 as libc::c_int,
    50 as libc::c_int,
    31 as libc::c_int,
    49 as libc::c_int,
    32 as libc::c_int,
    48 as libc::c_int,
    33 as libc::c_int,
    47 as libc::c_int,
    34 as libc::c_int,
    46 as libc::c_int,
    35 as libc::c_int,
    45 as libc::c_int,
    36 as libc::c_int,
    44 as libc::c_int,
    37 as libc::c_int,
    43 as libc::c_int,
    38 as libc::c_int,
    42 as libc::c_int,
    39 as libc::c_int,
    41 as libc::c_int,
    40 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    58 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    57 as libc::c_int,
    23 as libc::c_int,
    56 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    55 as libc::c_int,
    26 as libc::c_int,
    54 as libc::c_int,
    27 as libc::c_int,
    53 as libc::c_int,
    28 as libc::c_int,
    29 as libc::c_int,
    52 as libc::c_int,
    30 as libc::c_int,
    51 as libc::c_int,
    31 as libc::c_int,
    50 as libc::c_int,
    32 as libc::c_int,
    49 as libc::c_int,
    33 as libc::c_int,
    48 as libc::c_int,
    34 as libc::c_int,
    35 as libc::c_int,
    47 as libc::c_int,
    36 as libc::c_int,
    46 as libc::c_int,
    37 as libc::c_int,
    45 as libc::c_int,
    38 as libc::c_int,
    44 as libc::c_int,
    39 as libc::c_int,
    43 as libc::c_int,
    40 as libc::c_int,
    42 as libc::c_int,
    41 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    59 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    58 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    57 as libc::c_int,
    25 as libc::c_int,
    56 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    55 as libc::c_int,
    28 as libc::c_int,
    54 as libc::c_int,
    29 as libc::c_int,
    53 as libc::c_int,
    30 as libc::c_int,
    52 as libc::c_int,
    31 as libc::c_int,
    32 as libc::c_int,
    51 as libc::c_int,
    33 as libc::c_int,
    50 as libc::c_int,
    34 as libc::c_int,
    49 as libc::c_int,
    35 as libc::c_int,
    48 as libc::c_int,
    36 as libc::c_int,
    47 as libc::c_int,
    37 as libc::c_int,
    46 as libc::c_int,
    38 as libc::c_int,
    45 as libc::c_int,
    39 as libc::c_int,
    44 as libc::c_int,
    40 as libc::c_int,
    43 as libc::c_int,
    41 as libc::c_int,
    42 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    60 as libc::c_int,
    22 as libc::c_int,
    59 as libc::c_int,
    23 as libc::c_int,
    24 as libc::c_int,
    58 as libc::c_int,
    25 as libc::c_int,
    26 as libc::c_int,
    57 as libc::c_int,
    27 as libc::c_int,
    56 as libc::c_int,
    28 as libc::c_int,
    55 as libc::c_int,
    29 as libc::c_int,
    54 as libc::c_int,
    30 as libc::c_int,
    31 as libc::c_int,
    53 as libc::c_int,
    32 as libc::c_int,
    52 as libc::c_int,
    33 as libc::c_int,
    51 as libc::c_int,
    34 as libc::c_int,
    50 as libc::c_int,
    35 as libc::c_int,
    49 as libc::c_int,
    36 as libc::c_int,
    48 as libc::c_int,
    37 as libc::c_int,
    38 as libc::c_int,
    47 as libc::c_int,
    39 as libc::c_int,
    46 as libc::c_int,
    40 as libc::c_int,
    45 as libc::c_int,
    41 as libc::c_int,
    44 as libc::c_int,
    42 as libc::c_int,
    43 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    61 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    60 as libc::c_int,
    24 as libc::c_int,
    59 as libc::c_int,
    25 as libc::c_int,
    26 as libc::c_int,
    58 as libc::c_int,
    27 as libc::c_int,
    57 as libc::c_int,
    28 as libc::c_int,
    29 as libc::c_int,
    56 as libc::c_int,
    30 as libc::c_int,
    55 as libc::c_int,
    31 as libc::c_int,
    54 as libc::c_int,
    32 as libc::c_int,
    53 as libc::c_int,
    33 as libc::c_int,
    52 as libc::c_int,
    34 as libc::c_int,
    35 as libc::c_int,
    51 as libc::c_int,
    36 as libc::c_int,
    50 as libc::c_int,
    37 as libc::c_int,
    49 as libc::c_int,
    38 as libc::c_int,
    48 as libc::c_int,
    39 as libc::c_int,
    47 as libc::c_int,
    40 as libc::c_int,
    46 as libc::c_int,
    41 as libc::c_int,
    45 as libc::c_int,
    42 as libc::c_int,
    44 as libc::c_int,
    43 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    62 as libc::c_int,
    22 as libc::c_int,
    23 as libc::c_int,
    61 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    60 as libc::c_int,
    26 as libc::c_int,
    59 as libc::c_int,
    27 as libc::c_int,
    28 as libc::c_int,
    58 as libc::c_int,
    29 as libc::c_int,
    57 as libc::c_int,
    30 as libc::c_int,
    56 as libc::c_int,
    31 as libc::c_int,
    55 as libc::c_int,
    32 as libc::c_int,
    33 as libc::c_int,
    54 as libc::c_int,
    34 as libc::c_int,
    53 as libc::c_int,
    35 as libc::c_int,
    52 as libc::c_int,
    36 as libc::c_int,
    51 as libc::c_int,
    37 as libc::c_int,
    50 as libc::c_int,
    38 as libc::c_int,
    49 as libc::c_int,
    39 as libc::c_int,
    48 as libc::c_int,
    40 as libc::c_int,
    47 as libc::c_int,
    41 as libc::c_int,
    42 as libc::c_int,
    46 as libc::c_int,
    43 as libc::c_int,
    45 as libc::c_int,
    44 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    2 as libc::c_int,
    3 as libc::c_int,
    4 as libc::c_int,
    5 as libc::c_int,
    6 as libc::c_int,
    7 as libc::c_int,
    8 as libc::c_int,
    9 as libc::c_int,
    10 as libc::c_int,
    11 as libc::c_int,
    12 as libc::c_int,
    13 as libc::c_int,
    14 as libc::c_int,
    15 as libc::c_int,
    16 as libc::c_int,
    17 as libc::c_int,
    18 as libc::c_int,
    19 as libc::c_int,
    20 as libc::c_int,
    21 as libc::c_int,
    22 as libc::c_int,
    63 as libc::c_int,
    23 as libc::c_int,
    62 as libc::c_int,
    24 as libc::c_int,
    25 as libc::c_int,
    61 as libc::c_int,
    26 as libc::c_int,
    27 as libc::c_int,
    60 as libc::c_int,
    28 as libc::c_int,
    59 as libc::c_int,
    29 as libc::c_int,
    58 as libc::c_int,
    30 as libc::c_int,
    31 as libc::c_int,
    57 as libc::c_int,
    32 as libc::c_int,
    56 as libc::c_int,
    33 as libc::c_int,
    55 as libc::c_int,
    34 as libc::c_int,
    54 as libc::c_int,
    35 as libc::c_int,
    53 as libc::c_int,
    36 as libc::c_int,
    37 as libc::c_int,
    52 as libc::c_int,
    38 as libc::c_int,
    51 as libc::c_int,
    39 as libc::c_int,
    50 as libc::c_int,
    40 as libc::c_int,
    49 as libc::c_int,
    41 as libc::c_int,
    48 as libc::c_int,
    42 as libc::c_int,
    47 as libc::c_int,
    43 as libc::c_int,
    46 as libc::c_int,
    44 as libc::c_int,
    45 as libc::c_int,
];
unsafe extern "C" fn laguerre_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut lower: libc::c_double,
    mut alpha: *mut libc::c_double,
    mut beta: *mut libc::c_double,
    mut moments: *mut libc::c_double,
) {
    let mut i: libc::c_int = 0;
    let mut tt: libc::c_double = sqrt(t);
    let mut t_inv: libc::c_double = 0.5f64 / t;
    let mut t2_inv: libc::c_double = 0.5f64 / (t * t);
    let mut e0: libc::c_double = exp(-t) * t_inv;
    let mut l00: libc::c_double = 0.0f64;
    let mut l01: libc::c_double = 1.0f64;
    let mut fac0: libc::c_double = 0.;
    let mut fac1: libc::c_double = 0.;
    let mut l02: libc::c_double = 0.;
    *alpha.offset(0 as libc::c_int as isize) = t_inv;
    *beta.offset(0 as libc::c_int as isize) = 0 as libc::c_int as libc::c_double;
    if lower == 0 as libc::c_int as libc::c_double {
        *moments
            .offset(
                0 as libc::c_int as isize,
            ) = 0.8862269254527580136490837416705725913987747280611935641069038949264f64
            / tt * erf(tt);
        *moments.offset(1 as libc::c_int as isize) = -l01 * e0;
        i = 1 as libc::c_int;
        while i < n - 1 as libc::c_int {
            *alpha
                .offset(
                    i as isize,
                ) = (i * 4 as libc::c_int + 1 as libc::c_int) as libc::c_double * t_inv;
            *beta
                .offset(
                    i as isize,
                ) = (i * (i * 2 as libc::c_int - 1 as libc::c_int)) as libc::c_double
                * t2_inv;
            fac0 = (i * 4 as libc::c_int - 1 as libc::c_int) as libc::c_double * t_inv;
            fac1 = ((i - 1 as libc::c_int) * (i * 2 as libc::c_int - 1 as libc::c_int))
                as libc::c_double * t2_inv;
            l02 = (1.0f64 - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            *moments.offset((i + 1 as libc::c_int) as isize) = -l01 * e0;
            i += 1;
            i;
        }
    } else {
        let mut lower2: libc::c_double = lower * lower;
        let mut l10: libc::c_double = 0.0f64;
        let mut l11: libc::c_double = 1.0f64;
        let mut l12: libc::c_double = 0.;
        let mut et: libc::c_double = exp(-t * lower2) * lower * t_inv;
        *moments
            .offset(
                0 as libc::c_int as isize,
            ) = 0.8862269254527580136490837416705725913987747280611935641069038949264f64
            / tt * (erfc(lower * tt) - erfc(tt));
        *moments.offset(1 as libc::c_int as isize) = l11 * et - l01 * e0;
        i = 1 as libc::c_int;
        while i < n - 1 as libc::c_int {
            *alpha
                .offset(
                    i as isize,
                ) = (i * 4 as libc::c_int + 1 as libc::c_int) as libc::c_double * t_inv;
            *beta
                .offset(
                    i as isize,
                ) = (i * (i * 2 as libc::c_int - 1 as libc::c_int)) as libc::c_double
                * t2_inv;
            fac0 = (i * 4 as libc::c_int - 1 as libc::c_int) as libc::c_double * t_inv;
            fac1 = ((i - 1 as libc::c_int) * (i * 2 as libc::c_int - 1 as libc::c_int))
                as libc::c_double * t2_inv;
            l12 = (lower2 - fac0) * l11 - fac1 * l10;
            l10 = l11;
            l11 = l12;
            l02 = (1.0f64 - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            *moments.offset((i + 1 as libc::c_int) as isize) = l11 * et - l01 * e0;
            i += 1;
            i;
        }
    };
}
unsafe extern "C" fn naive_jacobi_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut lower: libc::c_double,
    mut mus: *mut libc::c_double,
) {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut s: libc::c_double = 0.;
    let mut fmt: [libc::c_double; 64] = [0.; 64];
    let mut coef: *mut libc::c_double = 0 as *mut libc::c_double;
    let mut order: *mut libc::c_int = 0 as *mut libc::c_int;
    fmt_erfc_like(fmt.as_mut_ptr(), t, lower, n - 1 as libc::c_int);
    i = 0 as libc::c_int;
    while i < n {
        coef = JACOBI_COEF
            .as_mut_ptr()
            .offset((i * (i + 1 as libc::c_int) / 2 as libc::c_int) as isize);
        order = JACOBI_COEF_ORDER
            .as_mut_ptr()
            .offset((i * (i + 1 as libc::c_int) / 2 as libc::c_int) as isize);
        s = 0 as libc::c_int as libc::c_double;
        j = 0 as libc::c_int;
        while j <= i {
            k = *order.offset(j as isize);
            s += *coef.offset(k as isize) * fmt[k as usize];
            j += 1;
            j;
        }
        *mus.offset(i as isize) = s;
        i += 1;
        i;
    }
}
unsafe extern "C" fn flocke_jacobi_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut mus: *mut libc::c_double,
) {
    if t < 3e-7f64 {
        return naive_jacobi_moments(n, t, 0.0f64, mus);
    }
    let mut t_inv: libc::c_double = 0.5f64 / t;
    let mut mu1: libc::c_double = 1.0f64;
    let mut mu2: libc::c_double = 0.0f64;
    let mut mu0: libc::c_double = 0.;
    let mut rn: libc::c_double = 0.;
    let mut i: libc::c_int = 0;
    i = n - 1 as libc::c_int + 20 as libc::c_int;
    while i >= n {
        rn = (2 as libc::c_int * i + 3 as libc::c_int) as libc::c_double * t_inv
            + JACOBI_RN_PART2[i as usize];
        mu0 = (mu2 - rn * mu1) / JACOBI_SN[i as usize];
        mu2 = mu1;
        mu1 = mu0;
        i -= 1;
        i;
    }
    while i >= 0 as libc::c_int {
        rn = (2 as libc::c_int * i + 3 as libc::c_int) as libc::c_double * t_inv
            + JACOBI_RN_PART2[i as usize];
        mu0 = (mu2 - rn * mu1) / JACOBI_SN[i as usize];
        *mus.offset(i as isize) = mu0;
        mu2 = mu1;
        mu1 = mu0;
        i -= 1;
        i;
    }
    let mut tt: libc::c_double = sqrt(t);
    let mut norm: libc::c_double = 0.8862269254527580136490837416705725913987747280611935641069038949264f64
        * erf(tt) / tt / mu0;
    i = 0 as libc::c_int;
    while i < n {
        *mus.offset(i as isize) *= norm;
        i += 1;
        i;
    }
}
unsafe extern "C" fn wheeler_recursion(
    mut n: libc::c_int,
    mut alpha: *mut libc::c_double,
    mut beta: *mut libc::c_double,
    mut moments: *mut libc::c_double,
    mut a: *mut libc::c_double,
    mut b: *mut libc::c_double,
) {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut nc: libc::c_int = 0;
    let mut a0: libc::c_double = *alpha.offset(0 as libc::c_int as isize)
        + *moments.offset(1 as libc::c_int as isize)
            / *moments.offset(0 as libc::c_int as isize);
    let mut b0: libc::c_double = 0 as libc::c_int as libc::c_double;
    let mut a1: libc::c_double = 0.;
    let mut b1: libc::c_double = 0.;
    *a.offset(0 as libc::c_int as isize) = a0;
    *b.offset(0 as libc::c_int as isize) = b0;
    let mut buf: [libc::c_double; 128] = [0.; 128];
    let mut s0: *mut libc::c_double = moments;
    let mut sm: *mut libc::c_double = buf.as_mut_ptr();
    let mut sk: *mut libc::c_double = buf
        .as_mut_ptr()
        .offset((n * 2 as libc::c_int) as isize);
    let mut swap: *mut libc::c_double = 0 as *mut libc::c_double;
    i = 2 as libc::c_int;
    while i < n * 2 as libc::c_int {
        *sm.offset(i as isize) = 0.0f64;
        i += 1;
        i;
    }
    i = 1 as libc::c_int;
    while i < n {
        nc = 2 as libc::c_int * (n - i);
        j = 0 as libc::c_int;
        while j < nc {
            *sk
                .offset(
                    j as isize,
                ) = *s0.offset((2 as libc::c_int + j) as isize)
                - (a0 - *alpha.offset((i + j) as isize))
                    * *s0.offset((1 as libc::c_int + j) as isize)
                - b0 * *sm.offset((2 as libc::c_int + j) as isize)
                + *beta.offset((i + j) as isize) * *s0.offset(j as isize);
            j += 1;
            j;
        }
        a1 = *alpha.offset(i as isize)
            - *s0.offset(1 as libc::c_int as isize)
                / *s0.offset(0 as libc::c_int as isize)
            + *sk.offset(1 as libc::c_int as isize)
                / *sk.offset(0 as libc::c_int as isize);
        b1 = *sk.offset(0 as libc::c_int as isize)
            / *s0.offset(0 as libc::c_int as isize);
        *a.offset(i as isize) = a1;
        *b.offset(i as isize) = b1;
        a0 = a1;
        b0 = b1;
        swap = sm;
        sm = s0;
        s0 = sk;
        sk = swap;
        i += 1;
        i;
    }
}
unsafe extern "C" fn rys_wheeler_partial(
    mut n: libc::c_int,
    mut alpha: *mut libc::c_double,
    mut beta: *mut libc::c_double,
    mut moments: *mut libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut a: [libc::c_double; 1088] = [0.; 1088];
    let mut b: *mut libc::c_double = a.as_mut_ptr().offset(n as isize);
    let mut c0: *mut libc::c_double = b.offset(n as isize);
    let mut mu0: libc::c_double = *moments.offset(0 as libc::c_int as isize);
    let mut first_seen: libc::c_int = 1 as libc::c_int;
    let mut i: libc::c_int = 0;
    wheeler_recursion(n, alpha, beta, moments, a.as_mut_ptr(), b);
    i = 1 as libc::c_int;
    while i < n {
        if *b.offset(i as isize) < 1e-14f64 {
            if first_seen == 0 || *b.offset(i as isize) < 0.0f64 {
                fprintf(
                    stderr,
                    b"libcint rys_wheeler singular value n=%d i=%d b=%g\n\0" as *const u8
                        as *const libc::c_char,
                    n,
                    i,
                    *b.offset(i as isize),
                );
                i = 0 as libc::c_int;
                while i < n {
                    *roots.offset(i as isize) = 0 as libc::c_int as libc::c_double;
                    *weights.offset(i as isize) = 0 as libc::c_int as libc::c_double;
                    i += 1;
                    i;
                }
                return i;
            }
            first_seen = 0 as libc::c_int;
        }
        *b.offset(i as isize) = sqrt(*b.offset(i as isize));
        i += 1;
        i;
    }
    let mut error: libc::c_int = _CINTdiagonalize(
        n,
        a.as_mut_ptr(),
        b.offset(1 as libc::c_int as isize),
        roots,
        c0,
    );
    i = 0 as libc::c_int;
    while i < n {
        *roots
            .offset(
                i as isize,
            ) = *roots.offset(i as isize)
            / (1 as libc::c_int as libc::c_double - *roots.offset(i as isize));
        *weights
            .offset(
                i as isize,
            ) = *c0.offset((i * n) as isize) * *c0.offset((i * n) as isize) * mu0;
        i += 1;
        i;
    }
    return error;
}
unsafe extern "C" fn llaguerre_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut lower: libc::c_double,
    mut alpha: *mut f128::f128,
    mut beta: *mut f128::f128,
    mut moments: *mut f128::f128,
) {
    let mut i: libc::c_int = 0;
    let mut tt: f128::f128 = sqrtl(f128::f128::new(t));
    let mut t_inv: f128::f128 = f128::f128::new(0.5) / f128::f128::new(t);
    let mut t2_inv: f128::f128 = f128::f128::new(0.5) / f128::f128::new(t * t);
    let mut e0: f128::f128 = expl(f128::f128::new(-t)) * t_inv;
    let mut l00: f128::f128 = f128::f128::new(0.0);
    let mut l01: f128::f128 = f128::f128::new(1.0);
    let mut fac0: f128::f128 = f128::f128::ZERO;
    let mut fac1: f128::f128 = f128::f128::ZERO;
    let mut l02: f128::f128 = f128::f128::ZERO;
    *alpha.offset(0 as libc::c_int as isize) = t_inv;
    *beta.offset(0 as libc::c_int as isize) = f128::f128::new(0 as libc::c_int);
    if lower == 0 as libc::c_int as libc::c_double {
        *moments
            .offset(
                0 as libc::c_int as isize,
            ) = f128::f128::new(
            0.8862269254527580136490837416705725913987747280611935641069038949264,
        ) / tt * erfl(tt);
        *moments.offset(1 as libc::c_int as isize) = -l01 * e0;
        i = 1 as libc::c_int;
        while i < n - 1 as libc::c_int {
            *alpha
                .offset(
                    i as isize,
                ) = f128::f128::new(i * 4 as libc::c_int + 1 as libc::c_int) * t_inv;
            *beta
                .offset(
                    i as isize,
                ) = f128::f128::new(i * (i * 2 as libc::c_int - 1 as libc::c_int))
                * t2_inv;
            fac0 = f128::f128::new(i * 4 as libc::c_int - 1 as libc::c_int) * t_inv;
            fac1 = f128::f128::new(
                (i - 1 as libc::c_int) * (i * 2 as libc::c_int - 1 as libc::c_int),
            ) * t2_inv;
            l02 = (f128::f128::new(1.0f64) - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            *moments.offset((i + 1 as libc::c_int) as isize) = -l01 * e0;
            i += 1;
            i;
        }
    } else {
        let mut lower2: f128::f128 = f128::f128::new(lower * lower);
        let mut l10: f128::f128 = f128::f128::new(0.0);
        let mut l11: f128::f128 = f128::f128::new(1.0);
        let mut l12: f128::f128 = f128::f128::ZERO;
        let mut et: f128::f128 = expl(f128::f128::new(-t) * lower2)
            * f128::f128::new(lower) * t_inv;
        *moments
            .offset(
                0 as libc::c_int as isize,
            ) = f128::f128::new(
            0.8862269254527580136490837416705725913987747280611935641069038949264,
        ) / tt * (erfcl(f128::f128::new(lower) * tt) - erfcl(tt));
        *moments.offset(1 as libc::c_int as isize) = l11 * et - l01 * e0;
        i = 1 as libc::c_int;
        while i < n - 1 as libc::c_int {
            *alpha
                .offset(
                    i as isize,
                ) = f128::f128::new(i * 4 as libc::c_int + 1 as libc::c_int) * t_inv;
            *beta
                .offset(
                    i as isize,
                ) = f128::f128::new(i * (i * 2 as libc::c_int - 1 as libc::c_int))
                * t2_inv;
            fac0 = f128::f128::new(i * 4 as libc::c_int - 1 as libc::c_int) * t_inv;
            fac1 = f128::f128::new(
                (i - 1 as libc::c_int) * (i * 2 as libc::c_int - 1 as libc::c_int),
            ) * t2_inv;
            l12 = (lower2 - fac0) * l11 - fac1 * l10;
            l10 = l11;
            l11 = l12;
            l02 = (f128::f128::new(1.0f64) - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            *moments.offset((i + 1 as libc::c_int) as isize) = l11 * et - l01 * e0;
            i += 1;
            i;
        }
    };
}
unsafe extern "C" fn lnaive_jacobi_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut lower: libc::c_double,
    mut mus: *mut f128::f128,
) {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut s: f128::f128 = f128::f128::ZERO;
    let mut fmt: [f128::f128; 64] = [f128::f128::ZERO; 64];
    let mut coef: *mut f128::f128 = 0 as *mut f128::f128;
    let mut order: *mut libc::c_int = 0 as *mut libc::c_int;
    fmt_lerfc_like(
        fmt.as_mut_ptr(),
        f128::f128::new(t),
        f128::f128::new(lower),
        n - 1 as libc::c_int,
    );
    i = 0 as libc::c_int;
    while i < n {
        coef = lJACOBI_COEF
            .as_mut_ptr()
            .offset((i * (i + 1 as libc::c_int) / 2 as libc::c_int) as isize);
        order = JACOBI_COEF_ORDER
            .as_mut_ptr()
            .offset((i * (i + 1 as libc::c_int) / 2 as libc::c_int) as isize);
        s = f128::f128::new(0 as libc::c_int);
        j = 0 as libc::c_int;
        while j <= i {
            k = *order.offset(j as isize);
            s += *coef.offset(k as isize) * fmt[k as usize];
            j += 1;
            j;
        }
        *mus.offset(i as isize) = s;
        i += 1;
        i;
    }
}
unsafe extern "C" fn lflocke_jacobi_moments(
    mut n: libc::c_int,
    mut t: libc::c_double,
    mut mus: *mut f128::f128,
) {
    if t < 3e-7f64 {
        return lnaive_jacobi_moments(n, t, 0.0f64, mus);
    }
    let mut t_inv: f128::f128 = f128::f128::new(0.5) / f128::f128::new(t);
    let mut mu1: f128::f128 = f128::f128::new(1.0);
    let mut mu2: f128::f128 = f128::f128::new(0.0);
    let mut mu0: f128::f128 = f128::f128::ZERO;
    let mut rn: f128::f128 = f128::f128::ZERO;
    let mut i: libc::c_int = 0;
    i = n - 1 as libc::c_int + 24 as libc::c_int;
    while i >= n {
        rn = f128::f128::new(2 as libc::c_int * i + 3 as libc::c_int) * t_inv
            + lJACOBI_RN_PART2[i as usize];
        mu0 = (mu2 - rn * mu1) / lJACOBI_SN[i as usize];
        mu2 = mu1;
        mu1 = mu0;
        i -= 1;
        i;
    }
    while i >= 0 as libc::c_int {
        rn = f128::f128::new(2 as libc::c_int * i + 3 as libc::c_int) * t_inv
            + lJACOBI_RN_PART2[i as usize];
        mu0 = (mu2 - rn * mu1) / lJACOBI_SN[i as usize];
        *mus.offset(i as isize) = mu0;
        mu2 = mu1;
        mu1 = mu0;
        i -= 1;
        i;
    }
    let mut tt: f128::f128 = sqrtl(f128::f128::new(t));
    let mut norm: f128::f128 = f128::f128::new(
        0.8862269254527580136490837416705725913987747280611935641069038949264,
    ) * erfl(tt) / tt / mu0;
    i = 0 as libc::c_int;
    while i < n {
        *mus.offset(i as isize) *= norm;
        i += 1;
        i;
    }
}
unsafe extern "C" fn lwheeler_recursion(
    mut n: libc::c_int,
    mut alpha: *mut f128::f128,
    mut beta: *mut f128::f128,
    mut moments: *mut f128::f128,
    mut a: *mut f128::f128,
    mut b: *mut f128::f128,
) {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut nc: libc::c_int = 0;
    let mut a0: f128::f128 = *alpha.offset(0 as libc::c_int as isize)
        + *moments.offset(1 as libc::c_int as isize)
            / *moments.offset(0 as libc::c_int as isize);
    let mut b0: f128::f128 = f128::f128::new(0 as libc::c_int);
    let mut a1: f128::f128 = f128::f128::ZERO;
    let mut b1: f128::f128 = f128::f128::ZERO;
    *a.offset(0 as libc::c_int as isize) = a0;
    *b.offset(0 as libc::c_int as isize) = b0;
    let mut buf: [f128::f128; 128] = [f128::f128::ZERO; 128];
    let mut s0: *mut f128::f128 = moments;
    let mut sm: *mut f128::f128 = buf.as_mut_ptr();
    let mut sk: *mut f128::f128 = buf
        .as_mut_ptr()
        .offset((n * 2 as libc::c_int) as isize);
    let mut swap: *mut f128::f128 = 0 as *mut f128::f128;
    i = 2 as libc::c_int;
    while i < n * 2 as libc::c_int {
        *sm.offset(i as isize) = f128::f128::new(0.0f64);
        i += 1;
        i;
    }
    i = 1 as libc::c_int;
    while i < n {
        nc = 2 as libc::c_int * (n - i);
        j = 0 as libc::c_int;
        while j < nc {
            *sk
                .offset(
                    j as isize,
                ) = *s0.offset((2 as libc::c_int + j) as isize)
                - (a0 - *alpha.offset((i + j) as isize))
                    * *s0.offset((1 as libc::c_int + j) as isize)
                - b0 * *sm.offset((2 as libc::c_int + j) as isize)
                + *beta.offset((i + j) as isize) * *s0.offset(j as isize);
            j += 1;
            j;
        }
        a1 = *alpha.offset(i as isize)
            - *s0.offset(1 as libc::c_int as isize)
                / *s0.offset(0 as libc::c_int as isize)
            + *sk.offset(1 as libc::c_int as isize)
                / *sk.offset(0 as libc::c_int as isize);
        b1 = *sk.offset(0 as libc::c_int as isize)
            / *s0.offset(0 as libc::c_int as isize);
        *a.offset(i as isize) = a1;
        *b.offset(i as isize) = b1;
        a0 = a1;
        b0 = b1;
        swap = sm;
        sm = s0;
        s0 = sk;
        sk = swap;
        i += 1;
        i;
    }
}
unsafe extern "C" fn lrys_wheeler_partial(
    mut n: libc::c_int,
    mut alpha: *mut f128::f128,
    mut beta: *mut f128::f128,
    mut moments: *mut f128::f128,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut a: [f128::f128; 64] = [f128::f128::ZERO; 64];
    let mut b: *mut f128::f128 = a.as_mut_ptr().offset(n as isize);
    let mut da: [libc::c_double; 1088] = [0.; 1088];
    let mut db: *mut libc::c_double = da.as_mut_ptr().offset(n as isize);
    let mut c0: *mut libc::c_double = db.offset(n as isize);
    let mut mu0: libc::c_double = (*moments.offset(0 as libc::c_int as isize))
        .to_f64()
        .unwrap();
    let mut first_seen: libc::c_int = 1 as libc::c_int;
    let mut i: libc::c_int = 0;
    lwheeler_recursion(n, alpha, beta, moments, a.as_mut_ptr(), b);
    da[0 as libc::c_int as usize] = (a[0 as libc::c_int as usize]).to_f64().unwrap();
    i = 1 as libc::c_int;
    while i < n {
        if *b.offset(i as isize) < f128::f128::new(1e-19f64) {
            if first_seen == 0 || *b.offset(i as isize) < f128::f128::new(0.0f64) {
                fprintf(
                    stderr,
                    b"libcint lrys_wheeler singular value n=%d i=%d b=%g\n\0"
                        as *const u8 as *const libc::c_char,
                    n,
                    i,
                    (*b.offset(i as isize)).to_f64().unwrap(),
                );
                i = 0 as libc::c_int;
                while i < n {
                    *roots.offset(i as isize) = 0 as libc::c_int as libc::c_double;
                    *weights.offset(i as isize) = 0 as libc::c_int as libc::c_double;
                    i += 1;
                    i;
                }
                return i;
            }
            first_seen = 0 as libc::c_int;
        }
        da[i as usize] = (a[i as usize]).to_f64().unwrap();
        *db.offset(i as isize) = (sqrtl(*b.offset(i as isize))).to_f64().unwrap();
        i += 1;
        i;
    }
    let mut error: libc::c_int = _CINTdiagonalize(
        n,
        da.as_mut_ptr(),
        db.offset(1 as libc::c_int as isize),
        roots,
        c0,
    );
    i = 0 as libc::c_int;
    while i < n {
        *roots
            .offset(
                i as isize,
            ) = *roots.offset(i as isize)
            / (1 as libc::c_int as libc::c_double - *roots.offset(i as isize));
        *weights
            .offset(
                i as isize,
            ) = *c0.offset((i * n) as isize) * *c0.offset((i * n) as isize) * mu0;
        i += 1;
        i;
    }
    return error;
}
#[no_mangle]
pub unsafe extern "C" fn CINTrys_laguerre(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut moments: [libc::c_double; 192] = [0.; 192];
    let mut alpha: *mut libc::c_double = moments
        .as_mut_ptr()
        .offset((n * 2 as libc::c_int) as isize);
    let mut beta: *mut libc::c_double = alpha.offset((n * 2 as libc::c_int) as isize);
    laguerre_moments(n * 2 as libc::c_int, x, lower, alpha, beta, moments.as_mut_ptr());
    return rys_wheeler_partial(n, alpha, beta, moments.as_mut_ptr(), roots, weights);
}
#[no_mangle]
pub unsafe extern "C" fn CINTrys_jacobi(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut moments: [libc::c_double; 64] = [0.; 64];
    let mut alpha: *mut libc::c_double = JACOBI_ALPHA.as_mut_ptr();
    let mut beta: *mut libc::c_double = JACOBI_BETA.as_mut_ptr();
    if lower == 0 as libc::c_int as libc::c_double {
        flocke_jacobi_moments(n * 2 as libc::c_int, x, moments.as_mut_ptr());
    } else {
        naive_jacobi_moments(n * 2 as libc::c_int, x, lower, moments.as_mut_ptr());
    }
    return rys_wheeler_partial(n, alpha, beta, moments.as_mut_ptr(), roots, weights);
}
#[no_mangle]
pub unsafe extern "C" fn CINTlrys_laguerre(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut moments: [f128::f128; 192] = [f128::f128::ZERO; 192];
    let mut alpha: *mut f128::f128 = moments
        .as_mut_ptr()
        .offset((n * 2 as libc::c_int) as isize);
    let mut beta: *mut f128::f128 = alpha.offset((n * 2 as libc::c_int) as isize);
    llaguerre_moments(n * 2 as libc::c_int, x, lower, alpha, beta, moments.as_mut_ptr());
    return lrys_wheeler_partial(n, alpha, beta, moments.as_mut_ptr(), roots, weights);
}
#[no_mangle]
pub unsafe extern "C" fn CINTlrys_jacobi(
    mut n: libc::c_int,
    mut x: libc::c_double,
    mut lower: libc::c_double,
    mut roots: *mut libc::c_double,
    mut weights: *mut libc::c_double,
) -> libc::c_int {
    let mut moments: [f128::f128; 64] = [f128::f128::ZERO; 64];
    let mut alpha: *mut f128::f128 = lJACOBI_ALPHA.as_mut_ptr();
    let mut beta: *mut f128::f128 = lJACOBI_BETA.as_mut_ptr();
    if lower == 0 as libc::c_int as libc::c_double {
        lflocke_jacobi_moments(n * 2 as libc::c_int, x, moments.as_mut_ptr());
    } else {
        lnaive_jacobi_moments(n * 2 as libc::c_int, x, lower, moments.as_mut_ptr());
    }
    return lrys_wheeler_partial(n, alpha, beta, moments.as_mut_ptr(), roots, weights);
}
